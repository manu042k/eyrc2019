
astar.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000004e  00800200  000026ce  00002762  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000026ce  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000000b5  0080024e  0080024e  000027b0  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000027b0  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000228  00000000  00000000  000027e0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000032b2  00000000  00000000  00002a08  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000463  00000000  00000000  00005cba  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00001f59  00000000  00000000  0000611d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000006e4  00000000  00000000  00008078  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000006ee  00000000  00000000  0000875c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00001fde  00000000  00000000  00008e4a  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000003c8  00000000  00000000  0000ae28  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	be c0       	rjmp	.+380    	; 0x17e <__ctors_end>
       2:	00 00       	nop
       4:	dd c0       	rjmp	.+442    	; 0x1c0 <__bad_interrupt>
       6:	00 00       	nop
       8:	db c0       	rjmp	.+438    	; 0x1c0 <__bad_interrupt>
       a:	00 00       	nop
       c:	d9 c0       	rjmp	.+434    	; 0x1c0 <__bad_interrupt>
       e:	00 00       	nop
      10:	d7 c0       	rjmp	.+430    	; 0x1c0 <__bad_interrupt>
      12:	00 00       	nop
      14:	02 c3       	rjmp	.+1540   	; 0x61a <__vector_5>
      16:	00 00       	nop
      18:	db c2       	rjmp	.+1462   	; 0x5d0 <__vector_6>
      1a:	00 00       	nop
      1c:	d1 c0       	rjmp	.+418    	; 0x1c0 <__bad_interrupt>
      1e:	00 00       	nop
      20:	cf c0       	rjmp	.+414    	; 0x1c0 <__bad_interrupt>
      22:	00 00       	nop
      24:	cd c0       	rjmp	.+410    	; 0x1c0 <__bad_interrupt>
      26:	00 00       	nop
      28:	cb c0       	rjmp	.+406    	; 0x1c0 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	c9 c0       	rjmp	.+402    	; 0x1c0 <__bad_interrupt>
      2e:	00 00       	nop
      30:	c7 c0       	rjmp	.+398    	; 0x1c0 <__bad_interrupt>
      32:	00 00       	nop
      34:	c5 c0       	rjmp	.+394    	; 0x1c0 <__bad_interrupt>
      36:	00 00       	nop
      38:	c3 c0       	rjmp	.+390    	; 0x1c0 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	c1 c0       	rjmp	.+386    	; 0x1c0 <__bad_interrupt>
      3e:	00 00       	nop
      40:	bf c0       	rjmp	.+382    	; 0x1c0 <__bad_interrupt>
      42:	00 00       	nop
      44:	bd c0       	rjmp	.+378    	; 0x1c0 <__bad_interrupt>
      46:	00 00       	nop
      48:	bb c0       	rjmp	.+374    	; 0x1c0 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	b9 c0       	rjmp	.+370    	; 0x1c0 <__bad_interrupt>
      4e:	00 00       	nop
      50:	b7 c0       	rjmp	.+366    	; 0x1c0 <__bad_interrupt>
      52:	00 00       	nop
      54:	b5 c0       	rjmp	.+362    	; 0x1c0 <__bad_interrupt>
      56:	00 00       	nop
      58:	b3 c0       	rjmp	.+358    	; 0x1c0 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	b1 c0       	rjmp	.+354    	; 0x1c0 <__bad_interrupt>
      5e:	00 00       	nop
      60:	af c0       	rjmp	.+350    	; 0x1c0 <__bad_interrupt>
      62:	00 00       	nop
      64:	ad c0       	rjmp	.+346    	; 0x1c0 <__bad_interrupt>
      66:	00 00       	nop
      68:	ab c0       	rjmp	.+342    	; 0x1c0 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	a9 c0       	rjmp	.+338    	; 0x1c0 <__bad_interrupt>
      6e:	00 00       	nop
      70:	a7 c0       	rjmp	.+334    	; 0x1c0 <__bad_interrupt>
      72:	00 00       	nop
      74:	a5 c0       	rjmp	.+330    	; 0x1c0 <__bad_interrupt>
      76:	00 00       	nop
      78:	a3 c0       	rjmp	.+326    	; 0x1c0 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	a1 c0       	rjmp	.+322    	; 0x1c0 <__bad_interrupt>
      7e:	00 00       	nop
      80:	9f c0       	rjmp	.+318    	; 0x1c0 <__bad_interrupt>
      82:	00 00       	nop
      84:	9d c0       	rjmp	.+314    	; 0x1c0 <__bad_interrupt>
      86:	00 00       	nop
      88:	9b c0       	rjmp	.+310    	; 0x1c0 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	99 c0       	rjmp	.+306    	; 0x1c0 <__bad_interrupt>
      8e:	00 00       	nop
      90:	97 c0       	rjmp	.+302    	; 0x1c0 <__bad_interrupt>
      92:	00 00       	nop
      94:	95 c0       	rjmp	.+298    	; 0x1c0 <__bad_interrupt>
      96:	00 00       	nop
      98:	93 c0       	rjmp	.+294    	; 0x1c0 <__bad_interrupt>
      9a:	00 00       	nop
      9c:	91 c0       	rjmp	.+290    	; 0x1c0 <__bad_interrupt>
      9e:	00 00       	nop
      a0:	8f c0       	rjmp	.+286    	; 0x1c0 <__bad_interrupt>
      a2:	00 00       	nop
      a4:	8d c0       	rjmp	.+282    	; 0x1c0 <__bad_interrupt>
      a6:	00 00       	nop
      a8:	8b c0       	rjmp	.+278    	; 0x1c0 <__bad_interrupt>
      aa:	00 00       	nop
      ac:	89 c0       	rjmp	.+274    	; 0x1c0 <__bad_interrupt>
      ae:	00 00       	nop
      b0:	87 c0       	rjmp	.+270    	; 0x1c0 <__bad_interrupt>
      b2:	00 00       	nop
      b4:	85 c0       	rjmp	.+266    	; 0x1c0 <__bad_interrupt>
      b6:	00 00       	nop
      b8:	83 c0       	rjmp	.+262    	; 0x1c0 <__bad_interrupt>
      ba:	00 00       	nop
      bc:	81 c0       	rjmp	.+258    	; 0x1c0 <__bad_interrupt>
      be:	00 00       	nop
      c0:	7f c0       	rjmp	.+254    	; 0x1c0 <__bad_interrupt>
      c2:	00 00       	nop
      c4:	7d c0       	rjmp	.+250    	; 0x1c0 <__bad_interrupt>
      c6:	00 00       	nop
      c8:	7b c0       	rjmp	.+246    	; 0x1c0 <__bad_interrupt>
      ca:	00 00       	nop
      cc:	79 c0       	rjmp	.+242    	; 0x1c0 <__bad_interrupt>
      ce:	00 00       	nop
      d0:	77 c0       	rjmp	.+238    	; 0x1c0 <__bad_interrupt>
      d2:	00 00       	nop
      d4:	75 c0       	rjmp	.+234    	; 0x1c0 <__bad_interrupt>
      d6:	00 00       	nop
      d8:	73 c0       	rjmp	.+230    	; 0x1c0 <__bad_interrupt>
      da:	00 00       	nop
      dc:	71 c0       	rjmp	.+226    	; 0x1c0 <__bad_interrupt>
      de:	00 00       	nop
      e0:	6f c0       	rjmp	.+222    	; 0x1c0 <__bad_interrupt>
      e2:	00 00       	nop
      e4:	04 0e       	add	r0, r20
      e6:	15 0e       	add	r1, r21
      e8:	26 0e       	add	r2, r22
      ea:	37 0e       	add	r3, r23
      ec:	48 0e       	add	r4, r24
      ee:	59 0e       	add	r5, r25
      f0:	6a 0e       	add	r6, r26
      f2:	7b 0e       	add	r7, r27
      f4:	8c 0e       	add	r8, r28
      f6:	9d 0e       	add	r9, r29
      f8:	ae 0e       	add	r10, r30
      fa:	bf 0e       	add	r11, r31
      fc:	07 63       	ori	r16, 0x37	; 55
      fe:	42 36       	cpi	r20, 0x62	; 98
     100:	b7 9b       	sbis	0x16, 7	; 22
     102:	d8 a7       	std	Y+40, r29	; 0x28
     104:	1a 39       	cpi	r17, 0x9A	; 154
     106:	68 56       	subi	r22, 0x68	; 104
     108:	18 ae       	std	Y+56, r1	; 0x38
     10a:	ba ab       	std	Y+50, r27	; 0x32
     10c:	55 8c       	ldd	r5, Z+29	; 0x1d
     10e:	1d 3c       	cpi	r17, 0xCD	; 205
     110:	b7 cc       	rjmp	.-1682   	; 0xfffffa80 <__eeprom_end+0xff7efa80>
     112:	57 63       	ori	r21, 0x37	; 55
     114:	bd 6d       	ori	r27, 0xDD	; 221
     116:	ed fd       	.word	0xfded	; ????
     118:	75 3e       	cpi	r23, 0xE5	; 229
     11a:	f6 17       	cp	r31, r22
     11c:	72 31       	cpi	r23, 0x12	; 18
     11e:	bf 00       	.word	0x00bf	; ????
     120:	00 00       	nop
     122:	80 3f       	cpi	r24, 0xF0	; 240
     124:	08 00       	.word	0x0008	; ????
     126:	00 00       	nop
     128:	be 92       	st	-X, r11
     12a:	24 49       	sbci	r18, 0x94	; 148
     12c:	12 3e       	cpi	r17, 0xE2	; 226
     12e:	ab aa       	std	Y+51, r10	; 0x33
     130:	aa 2a       	or	r10, r26
     132:	be cd       	rjmp	.-1156   	; 0xfffffcb0 <__eeprom_end+0xff7efcb0>
     134:	cc cc       	rjmp	.-1640   	; 0xffffface <__eeprom_end+0xff7eface>
     136:	4c 3e       	cpi	r20, 0xEC	; 236
     138:	00 00       	nop
     13a:	00 80       	ld	r0, Z
     13c:	be ab       	std	Y+54, r27	; 0x36
     13e:	aa aa       	std	Y+50, r10	; 0x32
     140:	aa 3e       	cpi	r26, 0xEA	; 234
     142:	00 00       	nop
     144:	00 00       	nop
     146:	bf 00       	.word	0x00bf	; ????
     148:	00 00       	nop
     14a:	80 3f       	cpi	r24, 0xF0	; 240
     14c:	00 00       	nop
     14e:	00 00       	nop
     150:	00 08       	sbc	r0, r0
     152:	41 78       	andi	r20, 0x81	; 129
     154:	d3 bb       	out	0x13, r29	; 19
     156:	43 87       	std	Z+11, r20	; 0x0b
     158:	d1 13       	cpse	r29, r17
     15a:	3d 19       	sub	r19, r13
     15c:	0e 3c       	cpi	r16, 0xCE	; 206
     15e:	c3 bd       	out	0x23, r28	; 35
     160:	42 82       	std	Z+2, r4	; 0x02
     162:	ad 2b       	or	r26, r29
     164:	3e 68       	ori	r19, 0x8E	; 142
     166:	ec 82       	std	Y+4, r14	; 0x04
     168:	76 be       	out	0x36, r7	; 54
     16a:	d9 8f       	std	Y+25, r29	; 0x19
     16c:	e1 a9       	ldd	r30, Z+49	; 0x31
     16e:	3e 4c       	sbci	r19, 0xCE	; 206
     170:	80 ef       	ldi	r24, 0xF0	; 240
     172:	ff be       	out	0x3f, r15	; 63
     174:	01 c4       	rjmp	.+2050   	; 0x978 <backward_by_count+0x34>
     176:	ff 7f       	andi	r31, 0xFF	; 255
     178:	3f 00       	.word	0x003f	; ????
     17a:	00 00       	nop
	...

0000017e <__ctors_end>:
     17e:	11 24       	eor	r1, r1
     180:	1f be       	out	0x3f, r1	; 63
     182:	cf ef       	ldi	r28, 0xFF	; 255
     184:	d1 e2       	ldi	r29, 0x21	; 33
     186:	de bf       	out	0x3e, r29	; 62
     188:	cd bf       	out	0x3d, r28	; 61
     18a:	00 e0       	ldi	r16, 0x00	; 0
     18c:	0c bf       	out	0x3c, r16	; 60

0000018e <__do_copy_data>:
     18e:	12 e0       	ldi	r17, 0x02	; 2
     190:	a0 e0       	ldi	r26, 0x00	; 0
     192:	b2 e0       	ldi	r27, 0x02	; 2
     194:	ee ec       	ldi	r30, 0xCE	; 206
     196:	f6 e2       	ldi	r31, 0x26	; 38
     198:	00 e0       	ldi	r16, 0x00	; 0
     19a:	0b bf       	out	0x3b, r16	; 59
     19c:	02 c0       	rjmp	.+4      	; 0x1a2 <__do_copy_data+0x14>
     19e:	07 90       	elpm	r0, Z+
     1a0:	0d 92       	st	X+, r0
     1a2:	ae 34       	cpi	r26, 0x4E	; 78
     1a4:	b1 07       	cpc	r27, r17
     1a6:	d9 f7       	brne	.-10     	; 0x19e <__do_copy_data+0x10>

000001a8 <__do_clear_bss>:
     1a8:	23 e0       	ldi	r18, 0x03	; 3
     1aa:	ae e4       	ldi	r26, 0x4E	; 78
     1ac:	b2 e0       	ldi	r27, 0x02	; 2
     1ae:	01 c0       	rjmp	.+2      	; 0x1b2 <.do_clear_bss_start>

000001b0 <.do_clear_bss_loop>:
     1b0:	1d 92       	st	X+, r1

000001b2 <.do_clear_bss_start>:
     1b2:	a3 30       	cpi	r26, 0x03	; 3
     1b4:	b2 07       	cpc	r27, r18
     1b6:	e1 f7       	brne	.-8      	; 0x1b0 <.do_clear_bss_loop>
     1b8:	0e 94 67 0f 	call	0x1ece	; 0x1ece <main>
     1bc:	0c 94 65 13 	jmp	0x26ca	; 0x26ca <_exit>

000001c0 <__bad_interrupt>:
     1c0:	1f cf       	rjmp	.-450    	; 0x0 <__vectors>

000001c2 <lcd_set_4bit>:
*/

void servo_3_free (void) 
{
OCR1CH = 0x03;
OCR1CL = 0xFF; //Servo 3 off
     1c2:	86 e6       	ldi	r24, 0x66	; 102
     1c4:	9e e0       	ldi	r25, 0x0E	; 14
     1c6:	01 97       	sbiw	r24, 0x01	; 1
     1c8:	f1 f7       	brne	.-4      	; 0x1c6 <lcd_set_4bit+0x4>
     1ca:	00 00       	nop
     1cc:	40 98       	cbi	0x08, 0	; 8
     1ce:	41 98       	cbi	0x08, 1	; 8
     1d0:	80 e3       	ldi	r24, 0x30	; 48
     1d2:	88 b9       	out	0x08, r24	; 8
     1d4:	42 9a       	sbi	0x08, 2	; 8
     1d6:	8f ef       	ldi	r24, 0xFF	; 255
     1d8:	97 e4       	ldi	r25, 0x47	; 71
     1da:	01 97       	sbiw	r24, 0x01	; 1
     1dc:	f1 f7       	brne	.-4      	; 0x1da <lcd_set_4bit+0x18>
     1de:	00 c0       	rjmp	.+0      	; 0x1e0 <lcd_set_4bit+0x1e>
     1e0:	00 00       	nop
     1e2:	42 98       	cbi	0x08, 2	; 8
     1e4:	86 e6       	ldi	r24, 0x66	; 102
     1e6:	9e e0       	ldi	r25, 0x0E	; 14
     1e8:	01 97       	sbiw	r24, 0x01	; 1
     1ea:	f1 f7       	brne	.-4      	; 0x1e8 <lcd_set_4bit+0x26>
     1ec:	00 00       	nop
     1ee:	40 98       	cbi	0x08, 0	; 8
     1f0:	41 98       	cbi	0x08, 1	; 8
     1f2:	80 e3       	ldi	r24, 0x30	; 48
     1f4:	88 b9       	out	0x08, r24	; 8
     1f6:	42 9a       	sbi	0x08, 2	; 8
     1f8:	8f ef       	ldi	r24, 0xFF	; 255
     1fa:	97 e4       	ldi	r25, 0x47	; 71
     1fc:	01 97       	sbiw	r24, 0x01	; 1
     1fe:	f1 f7       	brne	.-4      	; 0x1fc <lcd_set_4bit+0x3a>
     200:	00 c0       	rjmp	.+0      	; 0x202 <lcd_set_4bit+0x40>
     202:	00 00       	nop
     204:	42 98       	cbi	0x08, 2	; 8
     206:	86 e6       	ldi	r24, 0x66	; 102
     208:	9e e0       	ldi	r25, 0x0E	; 14
     20a:	01 97       	sbiw	r24, 0x01	; 1
     20c:	f1 f7       	brne	.-4      	; 0x20a <lcd_set_4bit+0x48>
     20e:	00 00       	nop
     210:	40 98       	cbi	0x08, 0	; 8
     212:	41 98       	cbi	0x08, 1	; 8
     214:	80 e3       	ldi	r24, 0x30	; 48
     216:	88 b9       	out	0x08, r24	; 8
     218:	42 9a       	sbi	0x08, 2	; 8
     21a:	8f ef       	ldi	r24, 0xFF	; 255
     21c:	97 e4       	ldi	r25, 0x47	; 71
     21e:	01 97       	sbiw	r24, 0x01	; 1
     220:	f1 f7       	brne	.-4      	; 0x21e <lcd_set_4bit+0x5c>
     222:	00 c0       	rjmp	.+0      	; 0x224 <lcd_set_4bit+0x62>
     224:	00 00       	nop
     226:	42 98       	cbi	0x08, 2	; 8
     228:	86 e6       	ldi	r24, 0x66	; 102
     22a:	9e e0       	ldi	r25, 0x0E	; 14
     22c:	01 97       	sbiw	r24, 0x01	; 1
     22e:	f1 f7       	brne	.-4      	; 0x22c <lcd_set_4bit+0x6a>
     230:	00 00       	nop
     232:	40 98       	cbi	0x08, 0	; 8
     234:	41 98       	cbi	0x08, 1	; 8
     236:	80 e2       	ldi	r24, 0x20	; 32
     238:	88 b9       	out	0x08, r24	; 8
     23a:	42 9a       	sbi	0x08, 2	; 8
     23c:	8f ef       	ldi	r24, 0xFF	; 255
     23e:	97 e4       	ldi	r25, 0x47	; 71
     240:	01 97       	sbiw	r24, 0x01	; 1
     242:	f1 f7       	brne	.-4      	; 0x240 <lcd_set_4bit+0x7e>
     244:	00 c0       	rjmp	.+0      	; 0x246 <lcd_set_4bit+0x84>
     246:	00 00       	nop
     248:	42 98       	cbi	0x08, 2	; 8
     24a:	08 95       	ret

0000024c <lcd_wr_command>:
     24c:	98 b1       	in	r25, 0x08	; 8
     24e:	9f 70       	andi	r25, 0x0F	; 15
     250:	98 b9       	out	0x08, r25	; 8
     252:	98 b1       	in	r25, 0x08	; 8
     254:	28 2f       	mov	r18, r24
     256:	20 7f       	andi	r18, 0xF0	; 240
     258:	92 2b       	or	r25, r18
     25a:	98 b9       	out	0x08, r25	; 8
     25c:	40 98       	cbi	0x08, 0	; 8
     25e:	41 98       	cbi	0x08, 1	; 8
     260:	42 9a       	sbi	0x08, 2	; 8
     262:	ef ef       	ldi	r30, 0xFF	; 255
     264:	f7 e4       	ldi	r31, 0x47	; 71
     266:	31 97       	sbiw	r30, 0x01	; 1
     268:	f1 f7       	brne	.-4      	; 0x266 <lcd_wr_command+0x1a>
     26a:	00 c0       	rjmp	.+0      	; 0x26c <lcd_wr_command+0x20>
     26c:	00 00       	nop
     26e:	42 98       	cbi	0x08, 2	; 8
     270:	98 b1       	in	r25, 0x08	; 8
     272:	9f 70       	andi	r25, 0x0F	; 15
     274:	98 b9       	out	0x08, r25	; 8
     276:	98 b1       	in	r25, 0x08	; 8
     278:	82 95       	swap	r24
     27a:	80 7f       	andi	r24, 0xF0	; 240
     27c:	89 2b       	or	r24, r25
     27e:	88 b9       	out	0x08, r24	; 8
     280:	40 98       	cbi	0x08, 0	; 8
     282:	41 98       	cbi	0x08, 1	; 8
     284:	42 9a       	sbi	0x08, 2	; 8
     286:	8f ef       	ldi	r24, 0xFF	; 255
     288:	97 e4       	ldi	r25, 0x47	; 71
     28a:	01 97       	sbiw	r24, 0x01	; 1
     28c:	f1 f7       	brne	.-4      	; 0x28a <lcd_wr_command+0x3e>
     28e:	00 c0       	rjmp	.+0      	; 0x290 <lcd_wr_command+0x44>
     290:	00 00       	nop
     292:	42 98       	cbi	0x08, 2	; 8
     294:	08 95       	ret

00000296 <lcd_init>:
     296:	86 e6       	ldi	r24, 0x66	; 102
     298:	9e e0       	ldi	r25, 0x0E	; 14
     29a:	01 97       	sbiw	r24, 0x01	; 1
     29c:	f1 f7       	brne	.-4      	; 0x29a <lcd_init+0x4>
     29e:	00 00       	nop
     2a0:	88 e2       	ldi	r24, 0x28	; 40
     2a2:	d4 df       	rcall	.-88     	; 0x24c <lcd_wr_command>
     2a4:	81 e0       	ldi	r24, 0x01	; 1
     2a6:	d2 df       	rcall	.-92     	; 0x24c <lcd_wr_command>
     2a8:	86 e0       	ldi	r24, 0x06	; 6
     2aa:	d0 df       	rcall	.-96     	; 0x24c <lcd_wr_command>
     2ac:	8e e0       	ldi	r24, 0x0E	; 14
     2ae:	ce df       	rcall	.-100    	; 0x24c <lcd_wr_command>
     2b0:	80 e8       	ldi	r24, 0x80	; 128
     2b2:	cc cf       	rjmp	.-104    	; 0x24c <lcd_wr_command>
     2b4:	08 95       	ret

000002b6 <lcd_wr_char>:
     2b6:	98 b1       	in	r25, 0x08	; 8
     2b8:	9f 70       	andi	r25, 0x0F	; 15
     2ba:	98 b9       	out	0x08, r25	; 8
     2bc:	98 b1       	in	r25, 0x08	; 8
     2be:	28 2f       	mov	r18, r24
     2c0:	20 7f       	andi	r18, 0xF0	; 240
     2c2:	92 2b       	or	r25, r18
     2c4:	98 b9       	out	0x08, r25	; 8
     2c6:	40 9a       	sbi	0x08, 0	; 8
     2c8:	41 98       	cbi	0x08, 1	; 8
     2ca:	42 9a       	sbi	0x08, 2	; 8
     2cc:	ef ef       	ldi	r30, 0xFF	; 255
     2ce:	f7 e4       	ldi	r31, 0x47	; 71
     2d0:	31 97       	sbiw	r30, 0x01	; 1
     2d2:	f1 f7       	brne	.-4      	; 0x2d0 <lcd_wr_char+0x1a>
     2d4:	00 c0       	rjmp	.+0      	; 0x2d6 <lcd_wr_char+0x20>
     2d6:	00 00       	nop
     2d8:	42 98       	cbi	0x08, 2	; 8
     2da:	98 b1       	in	r25, 0x08	; 8
     2dc:	9f 70       	andi	r25, 0x0F	; 15
     2de:	98 b9       	out	0x08, r25	; 8
     2e0:	98 b1       	in	r25, 0x08	; 8
     2e2:	82 95       	swap	r24
     2e4:	80 7f       	andi	r24, 0xF0	; 240
     2e6:	89 2b       	or	r24, r25
     2e8:	88 b9       	out	0x08, r24	; 8
     2ea:	40 9a       	sbi	0x08, 0	; 8
     2ec:	41 98       	cbi	0x08, 1	; 8
     2ee:	42 9a       	sbi	0x08, 2	; 8
     2f0:	8f ef       	ldi	r24, 0xFF	; 255
     2f2:	97 e4       	ldi	r25, 0x47	; 71
     2f4:	01 97       	sbiw	r24, 0x01	; 1
     2f6:	f1 f7       	brne	.-4      	; 0x2f4 <lcd_wr_char+0x3e>
     2f8:	00 c0       	rjmp	.+0      	; 0x2fa <lcd_wr_char+0x44>
     2fa:	00 00       	nop
     2fc:	42 98       	cbi	0x08, 2	; 8
     2fe:	08 95       	ret

00000300 <lcd_home>:
     300:	80 e8       	ldi	r24, 0x80	; 128
     302:	a4 cf       	rjmp	.-184    	; 0x24c <lcd_wr_command>
     304:	08 95       	ret

00000306 <lcd_cursor>:
     306:	82 30       	cpi	r24, 0x02	; 2
     308:	69 f0       	breq	.+26     	; 0x324 <lcd_cursor+0x1e>
     30a:	18 f4       	brcc	.+6      	; 0x312 <lcd_cursor+0xc>
     30c:	81 30       	cpi	r24, 0x01	; 1
     30e:	31 f0       	breq	.+12     	; 0x31c <lcd_cursor+0x16>
     310:	08 95       	ret
     312:	83 30       	cpi	r24, 0x03	; 3
     314:	59 f0       	breq	.+22     	; 0x32c <lcd_cursor+0x26>
     316:	84 30       	cpi	r24, 0x04	; 4
     318:	69 f0       	breq	.+26     	; 0x334 <lcd_cursor+0x2e>
     31a:	08 95       	ret
     31c:	8f e7       	ldi	r24, 0x7F	; 127
     31e:	86 0f       	add	r24, r22
     320:	95 cf       	rjmp	.-214    	; 0x24c <lcd_wr_command>
     322:	08 95       	ret
     324:	8f eb       	ldi	r24, 0xBF	; 191
     326:	86 0f       	add	r24, r22
     328:	91 cf       	rjmp	.-222    	; 0x24c <lcd_wr_command>
     32a:	08 95       	ret
     32c:	83 e9       	ldi	r24, 0x93	; 147
     32e:	86 0f       	add	r24, r22
     330:	8d cf       	rjmp	.-230    	; 0x24c <lcd_wr_command>
     332:	08 95       	ret
     334:	83 ed       	ldi	r24, 0xD3	; 211
     336:	86 0f       	add	r24, r22
     338:	89 cf       	rjmp	.-238    	; 0x24c <lcd_wr_command>
     33a:	08 95       	ret

0000033c <lcd_print>:
     33c:	0f 93       	push	r16
     33e:	1f 93       	push	r17
     340:	cf 93       	push	r28
     342:	df 93       	push	r29
     344:	8a 01       	movw	r16, r20
     346:	e9 01       	movw	r28, r18
     348:	88 23       	and	r24, r24
     34a:	11 f0       	breq	.+4      	; 0x350 <lcd_print+0x14>
     34c:	61 11       	cpse	r22, r1
     34e:	02 c0       	rjmp	.+4      	; 0x354 <lcd_print+0x18>
     350:	d7 df       	rcall	.-82     	; 0x300 <lcd_home>
     352:	01 c0       	rjmp	.+2      	; 0x356 <lcd_print+0x1a>
     354:	d8 df       	rcall	.-80     	; 0x306 <lcd_cursor>
     356:	c5 30       	cpi	r28, 0x05	; 5
     358:	d1 05       	cpc	r29, r1
     35a:	09 f0       	breq	.+2      	; 0x35e <lcd_print+0x22>
     35c:	d5 c0       	rjmp	.+426    	; 0x508 <lcd_print+0x1cc>
     35e:	98 01       	movw	r18, r16
     360:	32 95       	swap	r19
     362:	22 95       	swap	r18
     364:	2f 70       	andi	r18, 0x0F	; 15
     366:	23 27       	eor	r18, r19
     368:	3f 70       	andi	r19, 0x0F	; 15
     36a:	23 27       	eor	r18, r19
     36c:	a7 e4       	ldi	r26, 0x47	; 71
     36e:	b3 e0       	ldi	r27, 0x03	; 3
     370:	0e 94 56 13 	call	0x26ac	; 0x26ac <__umulhisi3>
     374:	96 95       	lsr	r25
     376:	87 95       	ror	r24
     378:	96 95       	lsr	r25
     37a:	87 95       	ror	r24
     37c:	96 95       	lsr	r25
     37e:	87 95       	ror	r24
     380:	c0 96       	adiw	r24, 0x30	; 48
     382:	90 93 77 02 	sts	0x0277, r25
     386:	80 93 76 02 	sts	0x0276, r24
     38a:	95 df       	rcall	.-214    	; 0x2b6 <lcd_wr_char>
     38c:	98 01       	movw	r18, r16
     38e:	36 95       	lsr	r19
     390:	27 95       	ror	r18
     392:	36 95       	lsr	r19
     394:	27 95       	ror	r18
     396:	36 95       	lsr	r19
     398:	27 95       	ror	r18
     39a:	a5 ec       	ldi	r26, 0xC5	; 197
     39c:	b0 e2       	ldi	r27, 0x20	; 32
     39e:	0e 94 56 13 	call	0x26ac	; 0x26ac <__umulhisi3>
     3a2:	ac 01       	movw	r20, r24
     3a4:	52 95       	swap	r21
     3a6:	42 95       	swap	r20
     3a8:	4f 70       	andi	r20, 0x0F	; 15
     3aa:	45 27       	eor	r20, r21
     3ac:	5f 70       	andi	r21, 0x0F	; 15
     3ae:	45 27       	eor	r20, r21
     3b0:	50 93 7a 02 	sts	0x027A, r21
     3b4:	40 93 79 02 	sts	0x0279, r20
     3b8:	9a 01       	movw	r18, r20
     3ba:	ad ec       	ldi	r26, 0xCD	; 205
     3bc:	bc ec       	ldi	r27, 0xCC	; 204
     3be:	0e 94 56 13 	call	0x26ac	; 0x26ac <__umulhisi3>
     3c2:	96 95       	lsr	r25
     3c4:	87 95       	ror	r24
     3c6:	96 95       	lsr	r25
     3c8:	87 95       	ror	r24
     3ca:	96 95       	lsr	r25
     3cc:	87 95       	ror	r24
     3ce:	9c 01       	movw	r18, r24
     3d0:	22 0f       	add	r18, r18
     3d2:	33 1f       	adc	r19, r19
     3d4:	88 0f       	add	r24, r24
     3d6:	99 1f       	adc	r25, r25
     3d8:	88 0f       	add	r24, r24
     3da:	99 1f       	adc	r25, r25
     3dc:	88 0f       	add	r24, r24
     3de:	99 1f       	adc	r25, r25
     3e0:	82 0f       	add	r24, r18
     3e2:	93 1f       	adc	r25, r19
     3e4:	48 1b       	sub	r20, r24
     3e6:	59 0b       	sbc	r21, r25
     3e8:	ca 01       	movw	r24, r20
     3ea:	c0 96       	adiw	r24, 0x30	; 48
     3ec:	90 93 02 03 	sts	0x0302, r25
     3f0:	80 93 01 03 	sts	0x0301, r24
     3f4:	60 df       	rcall	.-320    	; 0x2b6 <lcd_wr_char>
     3f6:	04 c0       	rjmp	.+8      	; 0x400 <lcd_print+0xc4>
     3f8:	c3 30       	cpi	r28, 0x03	; 3
     3fa:	d1 05       	cpc	r29, r1
     3fc:	09 f0       	breq	.+2      	; 0x400 <lcd_print+0xc4>
     3fe:	89 c0       	rjmp	.+274    	; 0x512 <lcd_print+0x1d6>
     400:	98 01       	movw	r18, r16
     402:	36 95       	lsr	r19
     404:	27 95       	ror	r18
     406:	36 95       	lsr	r19
     408:	27 95       	ror	r18
     40a:	ab e7       	ldi	r26, 0x7B	; 123
     40c:	b4 e1       	ldi	r27, 0x14	; 20
     40e:	0e 94 56 13 	call	0x26ac	; 0x26ac <__umulhisi3>
     412:	ac 01       	movw	r20, r24
     414:	56 95       	lsr	r21
     416:	47 95       	ror	r20
     418:	50 93 7a 02 	sts	0x027A, r21
     41c:	40 93 79 02 	sts	0x0279, r20
     420:	9a 01       	movw	r18, r20
     422:	ad ec       	ldi	r26, 0xCD	; 205
     424:	bc ec       	ldi	r27, 0xCC	; 204
     426:	0e 94 56 13 	call	0x26ac	; 0x26ac <__umulhisi3>
     42a:	96 95       	lsr	r25
     42c:	87 95       	ror	r24
     42e:	96 95       	lsr	r25
     430:	87 95       	ror	r24
     432:	96 95       	lsr	r25
     434:	87 95       	ror	r24
     436:	9c 01       	movw	r18, r24
     438:	22 0f       	add	r18, r18
     43a:	33 1f       	adc	r19, r19
     43c:	88 0f       	add	r24, r24
     43e:	99 1f       	adc	r25, r25
     440:	88 0f       	add	r24, r24
     442:	99 1f       	adc	r25, r25
     444:	88 0f       	add	r24, r24
     446:	99 1f       	adc	r25, r25
     448:	82 0f       	add	r24, r18
     44a:	93 1f       	adc	r25, r19
     44c:	48 1b       	sub	r20, r24
     44e:	59 0b       	sbc	r21, r25
     450:	ca 01       	movw	r24, r20
     452:	c0 96       	adiw	r24, 0x30	; 48
     454:	90 93 fe 02 	sts	0x02FE, r25
     458:	80 93 fd 02 	sts	0x02FD, r24
     45c:	2c df       	rcall	.-424    	; 0x2b6 <lcd_wr_char>
     45e:	98 01       	movw	r18, r16
     460:	ad ec       	ldi	r26, 0xCD	; 205
     462:	bc ec       	ldi	r27, 0xCC	; 204
     464:	0e 94 56 13 	call	0x26ac	; 0x26ac <__umulhisi3>
     468:	ac 01       	movw	r20, r24
     46a:	56 95       	lsr	r21
     46c:	47 95       	ror	r20
     46e:	56 95       	lsr	r21
     470:	47 95       	ror	r20
     472:	56 95       	lsr	r21
     474:	47 95       	ror	r20
     476:	50 93 7a 02 	sts	0x027A, r21
     47a:	40 93 79 02 	sts	0x0279, r20
     47e:	9a 01       	movw	r18, r20
     480:	0e 94 56 13 	call	0x26ac	; 0x26ac <__umulhisi3>
     484:	96 95       	lsr	r25
     486:	87 95       	ror	r24
     488:	96 95       	lsr	r25
     48a:	87 95       	ror	r24
     48c:	96 95       	lsr	r25
     48e:	87 95       	ror	r24
     490:	9c 01       	movw	r18, r24
     492:	22 0f       	add	r18, r18
     494:	33 1f       	adc	r19, r19
     496:	88 0f       	add	r24, r24
     498:	99 1f       	adc	r25, r25
     49a:	88 0f       	add	r24, r24
     49c:	99 1f       	adc	r25, r25
     49e:	88 0f       	add	r24, r24
     4a0:	99 1f       	adc	r25, r25
     4a2:	82 0f       	add	r24, r18
     4a4:	93 1f       	adc	r25, r19
     4a6:	48 1b       	sub	r20, r24
     4a8:	59 0b       	sbc	r21, r25
     4aa:	ca 01       	movw	r24, r20
     4ac:	c0 96       	adiw	r24, 0x30	; 48
     4ae:	90 93 80 02 	sts	0x0280, r25
     4b2:	80 93 7f 02 	sts	0x027F, r24
     4b6:	ff de       	rcall	.-514    	; 0x2b6 <lcd_wr_char>
     4b8:	03 c0       	rjmp	.+6      	; 0x4c0 <lcd_print+0x184>
     4ba:	c1 30       	cpi	r28, 0x01	; 1
     4bc:	d1 05       	cpc	r29, r1
     4be:	f9 f4       	brne	.+62     	; 0x4fe <lcd_print+0x1c2>
     4c0:	98 01       	movw	r18, r16
     4c2:	ad ec       	ldi	r26, 0xCD	; 205
     4c4:	bc ec       	ldi	r27, 0xCC	; 204
     4c6:	0e 94 56 13 	call	0x26ac	; 0x26ac <__umulhisi3>
     4ca:	96 95       	lsr	r25
     4cc:	87 95       	ror	r24
     4ce:	96 95       	lsr	r25
     4d0:	87 95       	ror	r24
     4d2:	96 95       	lsr	r25
     4d4:	87 95       	ror	r24
     4d6:	9c 01       	movw	r18, r24
     4d8:	22 0f       	add	r18, r18
     4da:	33 1f       	adc	r19, r19
     4dc:	88 0f       	add	r24, r24
     4de:	99 1f       	adc	r25, r25
     4e0:	88 0f       	add	r24, r24
     4e2:	99 1f       	adc	r25, r25
     4e4:	88 0f       	add	r24, r24
     4e6:	99 1f       	adc	r25, r25
     4e8:	82 0f       	add	r24, r18
     4ea:	93 1f       	adc	r25, r19
     4ec:	08 1b       	sub	r16, r24
     4ee:	19 0b       	sbc	r17, r25
     4f0:	c8 01       	movw	r24, r16
     4f2:	c0 96       	adiw	r24, 0x30	; 48
     4f4:	90 93 00 03 	sts	0x0300, r25
     4f8:	80 93 ff 02 	sts	0x02FF, r24
     4fc:	dc de       	rcall	.-584    	; 0x2b6 <lcd_wr_char>
     4fe:	26 97       	sbiw	r28, 0x06	; 6
     500:	64 f0       	brlt	.+24     	; 0x51a <lcd_print+0x1de>
     502:	85 e4       	ldi	r24, 0x45	; 69
     504:	d8 de       	rcall	.-592    	; 0x2b6 <lcd_wr_char>
     506:	09 c0       	rjmp	.+18     	; 0x51a <lcd_print+0x1de>
     508:	c4 30       	cpi	r28, 0x04	; 4
     50a:	d1 05       	cpc	r29, r1
     50c:	09 f0       	breq	.+2      	; 0x510 <lcd_print+0x1d4>
     50e:	74 cf       	rjmp	.-280    	; 0x3f8 <lcd_print+0xbc>
     510:	3d cf       	rjmp	.-390    	; 0x38c <lcd_print+0x50>
     512:	c2 30       	cpi	r28, 0x02	; 2
     514:	d1 05       	cpc	r29, r1
     516:	89 f6       	brne	.-94     	; 0x4ba <lcd_print+0x17e>
     518:	a2 cf       	rjmp	.-188    	; 0x45e <lcd_print+0x122>
     51a:	df 91       	pop	r29
     51c:	cf 91       	pop	r28
     51e:	1f 91       	pop	r17
     520:	0f 91       	pop	r16
     522:	08 95       	ret

00000524 <lcd_port_config>:
     524:	87 b1       	in	r24, 0x07	; 7
     526:	87 6f       	ori	r24, 0xF7	; 247
     528:	87 b9       	out	0x07, r24	; 7
     52a:	88 b1       	in	r24, 0x08	; 8
     52c:	80 78       	andi	r24, 0x80	; 128
     52e:	88 b9       	out	0x08, r24	; 8
     530:	08 95       	ret

00000532 <motion_pin_config>:
     532:	81 b1       	in	r24, 0x01	; 1
     534:	8f 60       	ori	r24, 0x0F	; 15
     536:	81 b9       	out	0x01, r24	; 1
     538:	82 b1       	in	r24, 0x02	; 2
     53a:	80 7f       	andi	r24, 0xF0	; 240
     53c:	82 b9       	out	0x02, r24	; 2
     53e:	ea e0       	ldi	r30, 0x0A	; 10
     540:	f1 e0       	ldi	r31, 0x01	; 1
     542:	80 81       	ld	r24, Z
     544:	88 61       	ori	r24, 0x18	; 24
     546:	80 83       	st	Z, r24
     548:	eb e0       	ldi	r30, 0x0B	; 11
     54a:	f1 e0       	ldi	r31, 0x01	; 1
     54c:	80 81       	ld	r24, Z
     54e:	88 61       	ori	r24, 0x18	; 24
     550:	80 83       	st	Z, r24
     552:	08 95       	ret

00000554 <left_encoder_pin_config>:
     554:	8c e0       	ldi	r24, 0x0C	; 12
     556:	8a b9       	out	0x0a, r24	; 10
     558:	8b b9       	out	0x0b, r24	; 11
     55a:	08 95       	ret

0000055c <right_encoder_pin_config>:
     55c:	6d 98       	cbi	0x0d, 5	; 13
     55e:	75 9a       	sbi	0x0e, 5	; 14
     560:	08 95       	ret

00000562 <adc_pin_config>:
     562:	10 ba       	out	0x10, r1	; 16
     564:	11 ba       	out	0x11, r1	; 17
     566:	10 92 07 01 	sts	0x0107, r1
     56a:	10 92 08 01 	sts	0x0108, r1
     56e:	08 95       	ret

00000570 <servo1_pin_config>:
     570:	25 9a       	sbi	0x04, 5	; 4
     572:	2d 9a       	sbi	0x05, 5	; 5
     574:	08 95       	ret

00000576 <servo2_pin_config>:
     576:	26 9a       	sbi	0x04, 6	; 4
     578:	2e 9a       	sbi	0x05, 6	; 5
     57a:	08 95       	ret

0000057c <servo3_pin_config>:
     57c:	27 9a       	sbi	0x04, 7	; 4
     57e:	2f 9a       	sbi	0x05, 7	; 5
     580:	08 95       	ret

00000582 <buzzer_pin_config>:
     582:	e4 e0       	ldi	r30, 0x04	; 4
     584:	f1 e0       	ldi	r31, 0x01	; 1
     586:	80 81       	ld	r24, Z
     588:	88 60       	ori	r24, 0x08	; 8
     58a:	80 83       	st	Z, r24
     58c:	e5 e0       	ldi	r30, 0x05	; 5
     58e:	f1 e0       	ldi	r31, 0x01	; 1
     590:	80 81       	ld	r24, Z
     592:	87 7f       	andi	r24, 0xF7	; 247
     594:	80 83       	st	Z, r24
     596:	08 95       	ret

00000598 <port_init>:
     598:	c5 df       	rcall	.-118    	; 0x524 <lcd_port_config>
     59a:	e3 df       	rcall	.-58     	; 0x562 <adc_pin_config>
     59c:	ca df       	rcall	.-108    	; 0x532 <motion_pin_config>
     59e:	da df       	rcall	.-76     	; 0x554 <left_encoder_pin_config>
     5a0:	dd df       	rcall	.-70     	; 0x55c <right_encoder_pin_config>
     5a2:	e6 df       	rcall	.-52     	; 0x570 <servo1_pin_config>
     5a4:	e8 df       	rcall	.-48     	; 0x576 <servo2_pin_config>
     5a6:	ea df       	rcall	.-44     	; 0x57c <servo3_pin_config>
     5a8:	ec cf       	rjmp	.-40     	; 0x582 <buzzer_pin_config>
     5aa:	08 95       	ret

000005ac <left_position_encoder_interrupt_init>:
     5ac:	f8 94       	cli
     5ae:	ea e6       	ldi	r30, 0x6A	; 106
     5b0:	f0 e0       	ldi	r31, 0x00	; 0
     5b2:	80 81       	ld	r24, Z
     5b4:	82 60       	ori	r24, 0x02	; 2
     5b6:	80 83       	st	Z, r24
     5b8:	ec 9a       	sbi	0x1d, 4	; 29
     5ba:	78 94       	sei
     5bc:	08 95       	ret

000005be <right_position_encoder_interrupt_init>:
     5be:	f8 94       	cli
     5c0:	ea e6       	ldi	r30, 0x6A	; 106
     5c2:	f0 e0       	ldi	r31, 0x00	; 0
     5c4:	80 81       	ld	r24, Z
     5c6:	88 60       	ori	r24, 0x08	; 8
     5c8:	80 83       	st	Z, r24
     5ca:	ed 9a       	sbi	0x1d, 5	; 29
     5cc:	78 94       	sei
     5ce:	08 95       	ret

000005d0 <__vector_6>:
     5d0:	1f 92       	push	r1
     5d2:	0f 92       	push	r0
     5d4:	0f b6       	in	r0, 0x3f	; 63
     5d6:	0f 92       	push	r0
     5d8:	11 24       	eor	r1, r1
     5da:	8f 93       	push	r24
     5dc:	9f 93       	push	r25
     5de:	af 93       	push	r26
     5e0:	bf 93       	push	r27
     5e2:	80 91 54 02 	lds	r24, 0x0254
     5e6:	90 91 55 02 	lds	r25, 0x0255
     5ea:	a0 91 56 02 	lds	r26, 0x0256
     5ee:	b0 91 57 02 	lds	r27, 0x0257
     5f2:	01 96       	adiw	r24, 0x01	; 1
     5f4:	a1 1d       	adc	r26, r1
     5f6:	b1 1d       	adc	r27, r1
     5f8:	80 93 54 02 	sts	0x0254, r24
     5fc:	90 93 55 02 	sts	0x0255, r25
     600:	a0 93 56 02 	sts	0x0256, r26
     604:	b0 93 57 02 	sts	0x0257, r27
     608:	bf 91       	pop	r27
     60a:	af 91       	pop	r26
     60c:	9f 91       	pop	r25
     60e:	8f 91       	pop	r24
     610:	0f 90       	pop	r0
     612:	0f be       	out	0x3f, r0	; 63
     614:	0f 90       	pop	r0
     616:	1f 90       	pop	r1
     618:	18 95       	reti

0000061a <__vector_5>:
     61a:	1f 92       	push	r1
     61c:	0f 92       	push	r0
     61e:	0f b6       	in	r0, 0x3f	; 63
     620:	0f 92       	push	r0
     622:	11 24       	eor	r1, r1
     624:	8f 93       	push	r24
     626:	9f 93       	push	r25
     628:	af 93       	push	r26
     62a:	bf 93       	push	r27
     62c:	80 91 58 02 	lds	r24, 0x0258
     630:	90 91 59 02 	lds	r25, 0x0259
     634:	a0 91 5a 02 	lds	r26, 0x025A
     638:	b0 91 5b 02 	lds	r27, 0x025B
     63c:	01 96       	adiw	r24, 0x01	; 1
     63e:	a1 1d       	adc	r26, r1
     640:	b1 1d       	adc	r27, r1
     642:	80 93 58 02 	sts	0x0258, r24
     646:	90 93 59 02 	sts	0x0259, r25
     64a:	a0 93 5a 02 	sts	0x025A, r26
     64e:	b0 93 5b 02 	sts	0x025B, r27
     652:	bf 91       	pop	r27
     654:	af 91       	pop	r26
     656:	9f 91       	pop	r25
     658:	8f 91       	pop	r24
     65a:	0f 90       	pop	r0
     65c:	0f be       	out	0x3f, r0	; 63
     65e:	0f 90       	pop	r0
     660:	1f 90       	pop	r1
     662:	18 95       	reti

00000664 <timer5_init>:
     664:	e1 e2       	ldi	r30, 0x21	; 33
     666:	f1 e0       	ldi	r31, 0x01	; 1
     668:	10 82       	st	Z, r1
     66a:	8f ef       	ldi	r24, 0xFF	; 255
     66c:	80 93 25 01 	sts	0x0125, r24
     670:	91 e0       	ldi	r25, 0x01	; 1
     672:	90 93 24 01 	sts	0x0124, r25
     676:	10 92 29 01 	sts	0x0129, r1
     67a:	80 93 28 01 	sts	0x0128, r24
     67e:	10 92 2b 01 	sts	0x012B, r1
     682:	80 93 2a 01 	sts	0x012A, r24
     686:	10 92 2d 01 	sts	0x012D, r1
     68a:	80 93 2c 01 	sts	0x012C, r24
     68e:	89 ea       	ldi	r24, 0xA9	; 169
     690:	80 93 20 01 	sts	0x0120, r24
     694:	8b e0       	ldi	r24, 0x0B	; 11
     696:	80 83       	st	Z, r24
     698:	08 95       	ret

0000069a <timer1_init>:
     69a:	e1 e8       	ldi	r30, 0x81	; 129
     69c:	f0 e0       	ldi	r31, 0x00	; 0
     69e:	10 82       	st	Z, r1
     6a0:	8c ef       	ldi	r24, 0xFC	; 252
     6a2:	80 93 85 00 	sts	0x0085, r24
     6a6:	81 e0       	ldi	r24, 0x01	; 1
     6a8:	80 93 84 00 	sts	0x0084, r24
     6ac:	93 e0       	ldi	r25, 0x03	; 3
     6ae:	90 93 89 00 	sts	0x0089, r25
     6b2:	8f ef       	ldi	r24, 0xFF	; 255
     6b4:	80 93 88 00 	sts	0x0088, r24
     6b8:	90 93 8b 00 	sts	0x008B, r25
     6bc:	80 93 8a 00 	sts	0x008A, r24
     6c0:	90 93 8d 00 	sts	0x008D, r25
     6c4:	80 93 8c 00 	sts	0x008C, r24
     6c8:	90 93 87 00 	sts	0x0087, r25
     6cc:	80 93 86 00 	sts	0x0086, r24
     6d0:	8b ea       	ldi	r24, 0xAB	; 171
     6d2:	80 93 80 00 	sts	0x0080, r24
     6d6:	10 92 82 00 	sts	0x0082, r1
     6da:	8c e0       	ldi	r24, 0x0C	; 12
     6dc:	80 83       	st	Z, r24
     6de:	08 95       	ret

000006e0 <servo_1>:
     6e0:	10 92 89 00 	sts	0x0089, r1
     6e4:	68 2f       	mov	r22, r24
     6e6:	70 e0       	ldi	r23, 0x00	; 0
     6e8:	80 e0       	ldi	r24, 0x00	; 0
     6ea:	90 e0       	ldi	r25, 0x00	; 0
     6ec:	0e 94 fa 10 	call	0x21f4	; 0x21f4 <__floatunsisf>
     6f0:	2b e7       	ldi	r18, 0x7B	; 123
     6f2:	34 e1       	ldi	r19, 0x14	; 20
     6f4:	4e ee       	ldi	r20, 0xEE	; 238
     6f6:	5f e3       	ldi	r21, 0x3F	; 63
     6f8:	0e 94 61 10 	call	0x20c2	; 0x20c2 <__divsf3>
     6fc:	20 e0       	ldi	r18, 0x00	; 0
     6fe:	30 e0       	ldi	r19, 0x00	; 0
     700:	4c e0       	ldi	r20, 0x0C	; 12
     702:	52 e4       	ldi	r21, 0x42	; 66
     704:	0e 94 fd 0f 	call	0x1ffa	; 0x1ffa <__addsf3>
     708:	0e 94 ce 10 	call	0x219c	; 0x219c <__fixunssfsi>
     70c:	60 93 88 00 	sts	0x0088, r22
     710:	08 95       	ret

00000712 <servo_2>:
     712:	10 92 8b 00 	sts	0x008B, r1
     716:	68 2f       	mov	r22, r24
     718:	70 e0       	ldi	r23, 0x00	; 0
     71a:	80 e0       	ldi	r24, 0x00	; 0
     71c:	90 e0       	ldi	r25, 0x00	; 0
     71e:	0e 94 fa 10 	call	0x21f4	; 0x21f4 <__floatunsisf>
     722:	2b e7       	ldi	r18, 0x7B	; 123
     724:	34 e1       	ldi	r19, 0x14	; 20
     726:	4e ee       	ldi	r20, 0xEE	; 238
     728:	5f e3       	ldi	r21, 0x3F	; 63
     72a:	0e 94 61 10 	call	0x20c2	; 0x20c2 <__divsf3>
     72e:	20 e0       	ldi	r18, 0x00	; 0
     730:	30 e0       	ldi	r19, 0x00	; 0
     732:	4c e0       	ldi	r20, 0x0C	; 12
     734:	52 e4       	ldi	r21, 0x42	; 66
     736:	0e 94 fd 0f 	call	0x1ffa	; 0x1ffa <__addsf3>
     73a:	0e 94 ce 10 	call	0x219c	; 0x219c <__fixunssfsi>
     73e:	60 93 8a 00 	sts	0x008A, r22
     742:	08 95       	ret

00000744 <servo_1_free>:
     744:	83 e0       	ldi	r24, 0x03	; 3
     746:	80 93 89 00 	sts	0x0089, r24
     74a:	8f ef       	ldi	r24, 0xFF	; 255
     74c:	80 93 88 00 	sts	0x0088, r24
     750:	08 95       	ret

00000752 <servo_2_free>:
     752:	83 e0       	ldi	r24, 0x03	; 3
     754:	80 93 8b 00 	sts	0x008B, r24
     758:	8f ef       	ldi	r24, 0xFF	; 255
     75a:	80 93 8a 00 	sts	0x008A, r24
     75e:	08 95       	ret

00000760 <adc_init>:
*Example call : adc_init();
*/
 
void adc_init()
{
	ADCSRA = 0x00;
     760:	ea e7       	ldi	r30, 0x7A	; 122
     762:	f0 e0       	ldi	r31, 0x00	; 0
     764:	10 82       	st	Z, r1
	ADCSRB = 0x00;     //MUX5 = 0
     766:	10 92 7b 00 	sts	0x007B, r1
	ADMUX = 0x20;      //Vref=5V external --- ADLAR=1 --- MUX4:0 = 0000
     76a:	80 e2       	ldi	r24, 0x20	; 32
     76c:	80 93 7c 00 	sts	0x007C, r24
	ACSR = 0x80;
     770:	80 e8       	ldi	r24, 0x80	; 128
     772:	80 bf       	out	0x30, r24	; 48
	ADCSRA = 0x86;     //ADEN=1 --- ADIE=1 --- ADPS2:0 = 1 1 0
     774:	86 e8       	ldi	r24, 0x86	; 134
     776:	80 83       	st	Z, r24
     778:	08 95       	ret

0000077a <ADC_Conversion>:
*/

unsigned char ADC_Conversion(unsigned char Ch)
{
	unsigned char a;
	if(Ch>7)
     77a:	88 30       	cpi	r24, 0x08	; 8
     77c:	18 f0       	brcs	.+6      	; 0x784 <ADC_Conversion+0xa>
	{
		ADCSRB = 0x08;
     77e:	98 e0       	ldi	r25, 0x08	; 8
     780:	90 93 7b 00 	sts	0x007B, r25
	}
	Ch = Ch & 0x07;
     784:	87 70       	andi	r24, 0x07	; 7
	ADMUX= 0x20| Ch;
     786:	80 62       	ori	r24, 0x20	; 32
     788:	80 93 7c 00 	sts	0x007C, r24
	ADCSRA = ADCSRA | 0x40;      //Set start conversion bit
     78c:	ea e7       	ldi	r30, 0x7A	; 122
     78e:	f0 e0       	ldi	r31, 0x00	; 0
     790:	80 81       	ld	r24, Z
     792:	80 64       	ori	r24, 0x40	; 64
     794:	80 83       	st	Z, r24
	while((ADCSRA&0x10)==0);     //Wait for conversion to complete
     796:	80 81       	ld	r24, Z
     798:	84 ff       	sbrs	r24, 4
     79a:	fd cf       	rjmp	.-6      	; 0x796 <ADC_Conversion+0x1c>
	a=ADCH;
     79c:	80 91 79 00 	lds	r24, 0x0079
	ADCSRA = ADCSRA|0x10;        //clear ADIF (ADC Interrupt Flag) by writing 1 to it
     7a0:	ea e7       	ldi	r30, 0x7A	; 122
     7a2:	f0 e0       	ldi	r31, 0x00	; 0
     7a4:	90 81       	ld	r25, Z
     7a6:	90 61       	ori	r25, 0x10	; 16
     7a8:	90 83       	st	Z, r25
	ADCSRB = 0x00;
     7aa:	10 92 7b 00 	sts	0x007B, r1
	return a;
}
     7ae:	08 95       	ret

000007b0 <Sharp_GP2D12_estimation>:

unsigned int Sharp_GP2D12_estimation(unsigned char adc_reading)
{
	float distance;
	unsigned int distanceInt;
	distance = (int)(10.00*(2799.6*(1.00/(pow(adc_reading,1.1546)))));
     7b0:	68 2f       	mov	r22, r24
     7b2:	70 e0       	ldi	r23, 0x00	; 0
     7b4:	80 e0       	ldi	r24, 0x00	; 0
     7b6:	90 e0       	ldi	r25, 0x00	; 0
     7b8:	0e 94 fa 10 	call	0x21f4	; 0x21f4 <__floatunsisf>
     7bc:	2f ee       	ldi	r18, 0xEF	; 239
     7be:	39 ec       	ldi	r19, 0xC9	; 201
     7c0:	43 e9       	ldi	r20, 0x93	; 147
     7c2:	5f e3       	ldi	r21, 0x3F	; 63
     7c4:	0e 94 eb 11 	call	0x23d6	; 0x23d6 <pow>
     7c8:	9b 01       	movw	r18, r22
     7ca:	ac 01       	movw	r20, r24
     7cc:	60 e0       	ldi	r22, 0x00	; 0
     7ce:	70 e0       	ldi	r23, 0x00	; 0
     7d0:	80 e8       	ldi	r24, 0x80	; 128
     7d2:	9f e3       	ldi	r25, 0x3F	; 63
     7d4:	0e 94 61 10 	call	0x20c2	; 0x20c2 <__divsf3>
     7d8:	2a e9       	ldi	r18, 0x9A	; 154
     7da:	39 ef       	ldi	r19, 0xF9	; 249
     7dc:	4e e2       	ldi	r20, 0x2E	; 46
     7de:	55 e4       	ldi	r21, 0x45	; 69
     7e0:	0e 94 88 11 	call	0x2310	; 0x2310 <__mulsf3>
     7e4:	20 e0       	ldi	r18, 0x00	; 0
     7e6:	30 e0       	ldi	r19, 0x00	; 0
     7e8:	40 e2       	ldi	r20, 0x20	; 32
     7ea:	51 e4       	ldi	r21, 0x41	; 65
     7ec:	0e 94 88 11 	call	0x2310	; 0x2310 <__mulsf3>
     7f0:	0e 94 c9 10 	call	0x2192	; 0x2192 <__fixsfsi>
     7f4:	cb 01       	movw	r24, r22
     7f6:	61 32       	cpi	r22, 0x21	; 33
     7f8:	23 e0       	ldi	r18, 0x03	; 3
     7fa:	72 07       	cpc	r23, r18
     7fc:	10 f0       	brcs	.+4      	; 0x802 <Sharp_GP2D12_estimation+0x52>
     7fe:	80 e2       	ldi	r24, 0x20	; 32
     800:	93 e0       	ldi	r25, 0x03	; 3
	if(distanceInt>800)
	{
		distanceInt=800;
	}
	return distanceInt;
}
     802:	08 95       	ret

00000804 <print_sensor>:
*Logic        : Function To Print Sensor Values At Desired Row And Column Location on LCD
*Example call : void print_sensor(1,2,13);
*/

void print_sensor(char row, char coloumn,unsigned char channel)
{
     804:	cf 93       	push	r28
     806:	df 93       	push	r29
     808:	c8 2f       	mov	r28, r24
     80a:	d6 2f       	mov	r29, r22
     80c:	84 2f       	mov	r24, r20

	ADC_Value = ADC_Conversion(channel);
     80e:	b5 df       	rcall	.-150    	; 0x77a <ADC_Conversion>
     810:	80 93 7c 02 	sts	0x027C, r24
	lcd_print(row, coloumn, ADC_Value, 3);
     814:	48 2f       	mov	r20, r24
     816:	50 e0       	ldi	r21, 0x00	; 0
     818:	23 e0       	ldi	r18, 0x03	; 3
     81a:	30 e0       	ldi	r19, 0x00	; 0
     81c:	6d 2f       	mov	r22, r29
     81e:	8c 2f       	mov	r24, r28
     820:	8d dd       	rcall	.-1254   	; 0x33c <lcd_print>
}
     822:	df 91       	pop	r29
     824:	cf 91       	pop	r28
     826:	08 95       	ret

00000828 <init_devices>:
*Example call : init_devices ();
*/

void init_devices (void)
{
	cli(); //Clears the global interrupts
     828:	f8 94       	cli
	port_init();
     82a:	b6 de       	rcall	.-660    	; 0x598 <port_init>
	adc_init();
     82c:	99 df       	rcall	.-206    	; 0x760 <adc_init>
	timer5_init();
     82e:	1a df       	rcall	.-460    	; 0x664 <timer5_init>
	timer1_init();
     830:	34 df       	rcall	.-408    	; 0x69a <timer1_init>
    left_position_encoder_interrupt_init();
     832:	bc de       	rcall	.-648    	; 0x5ac <left_position_encoder_interrupt_init>
    right_position_encoder_interrupt_init();
     834:	c4 de       	rcall	.-632    	; 0x5be <right_position_encoder_interrupt_init>
	sei(); //re-enable interrupts
     836:	78 94       	sei
     838:	08 95       	ret

0000083a <buzzer_on>:
*/

void buzzer_on (void)
{
	unsigned char port_restore = 0;
	port_restore = PINJ;
     83a:	80 91 03 01 	lds	r24, 0x0103
	port_restore = port_restore | 0x08;
     83e:	88 60       	ori	r24, 0x08	; 8
	PORTJ = port_restore;
     840:	80 93 05 01 	sts	0x0105, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     844:	2f ef       	ldi	r18, 0xFF	; 255
     846:	8f ef       	ldi	r24, 0xFF	; 255
     848:	90 ee       	ldi	r25, 0xE0	; 224
     84a:	21 50       	subi	r18, 0x01	; 1
     84c:	80 40       	sbci	r24, 0x00	; 0
     84e:	90 40       	sbci	r25, 0x00	; 0
     850:	e1 f7       	brne	.-8      	; 0x84a <buzzer_on+0x10>
     852:	00 c0       	rjmp	.+0      	; 0x854 <buzzer_on+0x1a>
     854:	00 00       	nop
     856:	08 95       	ret

00000858 <buzzer_off>:
*Example call : buzzer_off();
*/
void buzzer_off (void)
{
	unsigned char port_restore = 0;
	port_restore = PINJ;
     858:	80 91 03 01 	lds	r24, 0x0103
	port_restore = port_restore & 0xF7;
     85c:	87 7f       	andi	r24, 0xF7	; 247
	PORTJ = port_restore;
     85e:	80 93 05 01 	sts	0x0105, r24
     862:	08 95       	ret

00000864 <forward_by_count>:
*Output       : void
*Logic        : moves forward by specified no. of counts at specified velocity,used instead of delays 
*Example call : forward_by_count(200,150,150);
*/
void forward_by_count(unsigned long int count,int left_velocity,int right_velocity)
{
     864:	cf 92       	push	r12
     866:	df 92       	push	r13
     868:	ef 92       	push	r14
     86a:	ff 92       	push	r15
     86c:	cf 93       	push	r28
     86e:	df 93       	push	r29
	//setting counts to zero
   	ShaftCountLeft=0;
     870:	10 92 58 02 	sts	0x0258, r1
     874:	10 92 59 02 	sts	0x0259, r1
     878:	10 92 5a 02 	sts	0x025A, r1
     87c:	10 92 5b 02 	sts	0x025B, r1
	ShaftCountRight=0;
     880:	10 92 54 02 	sts	0x0254, r1
     884:	10 92 55 02 	sts	0x0255, r1
     888:	10 92 56 02 	sts	0x0256, r1
     88c:	10 92 57 02 	sts	0x0257, r1
	
	//starting the infinite loop
	while(1)
	{
		//terminates if counts is greater then specified 
		if (ShaftCountRight >= count)
     890:	61 15       	cp	r22, r1
     892:	71 05       	cpc	r23, r1
     894:	81 05       	cpc	r24, r1
     896:	91 05       	cpc	r25, r1
     898:	a9 f0       	breq	.+42     	; 0x8c4 <forward_by_count+0x60>
*Example call : void forward (void)
*/

void forward (void) 
{
  PORTA=0x06;
     89a:	36 e0       	ldi	r19, 0x06	; 6
*Example call : velocity (unsigned char left_motor, unsigned char right_motor);
*/

void velocity (unsigned char left_motor, unsigned char right_motor)
{
OCR5AL = (unsigned char)left_motor;  //sets velocity of both motors
     89c:	c8 e2       	ldi	r28, 0x28	; 40
     89e:	d1 e0       	ldi	r29, 0x01	; 1
OCR5BL = (unsigned char)right_motor;
     8a0:	ea e2       	ldi	r30, 0x2A	; 42
     8a2:	f1 e0       	ldi	r31, 0x01	; 1
*Example call : void forward (void)
*/

void forward (void) 
{
  PORTA=0x06;
     8a4:	32 b9       	out	0x02, r19	; 2
*Example call : velocity (unsigned char left_motor, unsigned char right_motor);
*/

void velocity (unsigned char left_motor, unsigned char right_motor)
{
OCR5AL = (unsigned char)left_motor;  //sets velocity of both motors
     8a6:	48 83       	st	Y, r20
OCR5BL = (unsigned char)right_motor;
     8a8:	20 83       	st	Z, r18
     8aa:	c0 90 54 02 	lds	r12, 0x0254
     8ae:	d0 90 55 02 	lds	r13, 0x0255
     8b2:	e0 90 56 02 	lds	r14, 0x0256
     8b6:	f0 90 57 02 	lds	r15, 0x0257
     8ba:	c6 16       	cp	r12, r22
     8bc:	d7 06       	cpc	r13, r23
     8be:	e8 06       	cpc	r14, r24
     8c0:	f9 06       	cpc	r15, r25
     8c2:	80 f3       	brcs	.-32     	; 0x8a4 <forward_by_count+0x40>
*Example call : void stop (void)
*/

void stop (void)
{
  PORTA =0x00;
     8c4:	12 b8       	out	0x02, r1	; 2
		    forward();
			velocity(left_velocity,right_velocity);
		}
	}
	stop();
}
     8c6:	df 91       	pop	r29
     8c8:	cf 91       	pop	r28
     8ca:	ff 90       	pop	r15
     8cc:	ef 90       	pop	r14
     8ce:	df 90       	pop	r13
     8d0:	cf 90       	pop	r12
     8d2:	08 95       	ret

000008d4 <left_by_count>:
*Logic        : moves left by specified no. of counts at specified velocity,used instead of delays 
*Example call : left_by_count(200,150,150);
*/

void left_by_count(unsigned long int count,int left_velocity,int right_velocity)
{
     8d4:	cf 92       	push	r12
     8d6:	df 92       	push	r13
     8d8:	ef 92       	push	r14
     8da:	ff 92       	push	r15
     8dc:	cf 93       	push	r28
     8de:	df 93       	push	r29
	//setting counts to zero
	ShaftCountLeft=0;
     8e0:	10 92 58 02 	sts	0x0258, r1
     8e4:	10 92 59 02 	sts	0x0259, r1
     8e8:	10 92 5a 02 	sts	0x025A, r1
     8ec:	10 92 5b 02 	sts	0x025B, r1
	ShaftCountRight=0;
     8f0:	10 92 54 02 	sts	0x0254, r1
     8f4:	10 92 55 02 	sts	0x0255, r1
     8f8:	10 92 56 02 	sts	0x0256, r1
     8fc:	10 92 57 02 	sts	0x0257, r1
	
	//starting the infinite loop
	while(1)
	{
		//terminates if counts is greater then specified
		if (ShaftCountRight>=count)
     900:	61 15       	cp	r22, r1
     902:	71 05       	cpc	r23, r1
     904:	81 05       	cpc	r24, r1
     906:	91 05       	cpc	r25, r1
     908:	a9 f0       	breq	.+42     	; 0x934 <left_by_count+0x60>
*Example call : void left(void)
*/

void left(void)
{
	PORTA=0x0A;
     90a:	3a e0       	ldi	r19, 0x0A	; 10
*Example call : velocity (unsigned char left_motor, unsigned char right_motor);
*/

void velocity (unsigned char left_motor, unsigned char right_motor)
{
OCR5AL = (unsigned char)left_motor;  //sets velocity of both motors
     90c:	c8 e2       	ldi	r28, 0x28	; 40
     90e:	d1 e0       	ldi	r29, 0x01	; 1
OCR5BL = (unsigned char)right_motor;
     910:	ea e2       	ldi	r30, 0x2A	; 42
     912:	f1 e0       	ldi	r31, 0x01	; 1
*Example call : void left(void)
*/

void left(void)
{
	PORTA=0x0A;
     914:	32 b9       	out	0x02, r19	; 2
*Example call : velocity (unsigned char left_motor, unsigned char right_motor);
*/

void velocity (unsigned char left_motor, unsigned char right_motor)
{
OCR5AL = (unsigned char)left_motor;  //sets velocity of both motors
     916:	48 83       	st	Y, r20
OCR5BL = (unsigned char)right_motor;
     918:	20 83       	st	Z, r18
     91a:	c0 90 54 02 	lds	r12, 0x0254
     91e:	d0 90 55 02 	lds	r13, 0x0255
     922:	e0 90 56 02 	lds	r14, 0x0256
     926:	f0 90 57 02 	lds	r15, 0x0257
     92a:	c6 16       	cp	r12, r22
     92c:	d7 06       	cpc	r13, r23
     92e:	e8 06       	cpc	r14, r24
     930:	f9 06       	cpc	r15, r25
     932:	80 f3       	brcs	.-32     	; 0x914 <left_by_count+0x40>
*Example call : void stop (void)
*/

void stop (void)
{
  PORTA =0x00;
     934:	12 b8       	out	0x02, r1	; 2
			left();
			velocity(left_velocity,right_velocity);
		}
	}
	stop();
}
     936:	df 91       	pop	r29
     938:	cf 91       	pop	r28
     93a:	ff 90       	pop	r15
     93c:	ef 90       	pop	r14
     93e:	df 90       	pop	r13
     940:	cf 90       	pop	r12
     942:	08 95       	ret

00000944 <backward_by_count>:
*Logic        : moves backward by specified no. of counts at specified velocity
*Example call : backward_by_count(200,150,150);
*/

void backward_by_count(int count,int left_velocity,int right_velocity)
{
     944:	0f 93       	push	r16
     946:	1f 93       	push	r17
     948:	cf 93       	push	r28
     94a:	df 93       	push	r29
	//setting counts to zero
	ShaftCountLeft=0;
     94c:	10 92 58 02 	sts	0x0258, r1
     950:	10 92 59 02 	sts	0x0259, r1
     954:	10 92 5a 02 	sts	0x025A, r1
     958:	10 92 5b 02 	sts	0x025B, r1
	ShaftCountRight=0;
     95c:	10 92 54 02 	sts	0x0254, r1
     960:	10 92 55 02 	sts	0x0255, r1
     964:	10 92 56 02 	sts	0x0256, r1
     968:	10 92 57 02 	sts	0x0257, r1
	
	//starting the infinite loop
	while(1)
	{
		//terminates if counts is greater then specified
		if (ShaftCountRight>=count)
     96c:	aa 27       	eor	r26, r26
     96e:	97 fd       	sbrc	r25, 7
     970:	a0 95       	com	r26
     972:	ba 2f       	mov	r27, r26
     974:	00 97       	sbiw	r24, 0x00	; 0
     976:	a1 05       	cpc	r26, r1
     978:	b1 05       	cpc	r27, r1
     97a:	a9 f0       	breq	.+42     	; 0x9a6 <backward_by_count+0x62>
*Example call : void backward(void)
*/

void backward(void)
{
	PORTA=0x09;
     97c:	59 e0       	ldi	r21, 0x09	; 9
*Example call : velocity (unsigned char left_motor, unsigned char right_motor);
*/

void velocity (unsigned char left_motor, unsigned char right_motor)
{
OCR5AL = (unsigned char)left_motor;  //sets velocity of both motors
     97e:	c8 e2       	ldi	r28, 0x28	; 40
     980:	d1 e0       	ldi	r29, 0x01	; 1
OCR5BL = (unsigned char)right_motor;
     982:	ea e2       	ldi	r30, 0x2A	; 42
     984:	f1 e0       	ldi	r31, 0x01	; 1
*Example call : void backward(void)
*/

void backward(void)
{
	PORTA=0x09;
     986:	52 b9       	out	0x02, r21	; 2
*Example call : velocity (unsigned char left_motor, unsigned char right_motor);
*/

void velocity (unsigned char left_motor, unsigned char right_motor)
{
OCR5AL = (unsigned char)left_motor;  //sets velocity of both motors
     988:	68 83       	st	Y, r22
OCR5BL = (unsigned char)right_motor;
     98a:	40 83       	st	Z, r20
     98c:	00 91 54 02 	lds	r16, 0x0254
     990:	10 91 55 02 	lds	r17, 0x0255
     994:	20 91 56 02 	lds	r18, 0x0256
     998:	30 91 57 02 	lds	r19, 0x0257
     99c:	08 17       	cp	r16, r24
     99e:	19 07       	cpc	r17, r25
     9a0:	2a 07       	cpc	r18, r26
     9a2:	3b 07       	cpc	r19, r27
     9a4:	80 f3       	brcs	.-32     	; 0x986 <backward_by_count+0x42>
*Example call : void stop (void)
*/

void stop (void)
{
  PORTA =0x00;
     9a6:	12 b8       	out	0x02, r1	; 2
			backward();
			velocity(left_velocity,right_velocity);
		}
	}
	stop();
}
     9a8:	df 91       	pop	r29
     9aa:	cf 91       	pop	r28
     9ac:	1f 91       	pop	r17
     9ae:	0f 91       	pop	r16
     9b0:	08 95       	ret

000009b2 <node>:
*Example call : node();
*/


void node ()
{
     9b2:	cf 92       	push	r12
     9b4:	df 92       	push	r13
     9b6:	ef 92       	push	r14
     9b8:	ff 92       	push	r15
     9ba:	0f 93       	push	r16
     9bc:	1f 93       	push	r17
     9be:	cf 93       	push	r28
     9c0:	df 93       	push	r29
*Example call : velocity (unsigned char left_motor, unsigned char right_motor);
*/

void velocity (unsigned char left_motor, unsigned char right_motor)
{
OCR5AL = (unsigned char)left_motor;  //sets velocity of both motors
     9c2:	08 e2       	ldi	r16, 0x28	; 40
     9c4:	11 e0       	ldi	r17, 0x01	; 1
     9c6:	0f 2e       	mov	r0, r31
     9c8:	f0 e5       	ldi	r31, 0x50	; 80
     9ca:	cf 2e       	mov	r12, r31
     9cc:	f0 2d       	mov	r31, r0
OCR5BL = (unsigned char)right_motor;
     9ce:	ca e2       	ldi	r28, 0x2A	; 42
     9d0:	d1 e0       	ldi	r29, 0x01	; 1
     9d2:	0f 2e       	mov	r0, r31
     9d4:	f4 e6       	ldi	r31, 0x64	; 100
     9d6:	df 2e       	mov	r13, r31
     9d8:	f0 2d       	mov	r31, r0
*Example call : void forward (void)
*/

void forward (void) 
{
  PORTA=0x06;
     9da:	0f 2e       	mov	r0, r31
     9dc:	f6 e0       	ldi	r31, 0x06	; 6
     9de:	ff 2e       	mov	r15, r31
     9e0:	f0 2d       	mov	r31, r0
*Example call : velocity (unsigned char left_motor, unsigned char right_motor);
*/

void velocity (unsigned char left_motor, unsigned char right_motor)
{
OCR5AL = (unsigned char)left_motor;  //sets velocity of both motors
     9e2:	0f 2e       	mov	r0, r31
     9e4:	fe e6       	ldi	r31, 0x6E	; 110
     9e6:	ef 2e       	mov	r14, r31
     9e8:	f0 2d       	mov	r31, r0
	//starting infinte loop
	while (1)
	{
		Left_white_line = ADC_Conversion(1);                   //Getting data of Left WL Sensor
     9ea:	81 e0       	ldi	r24, 0x01	; 1
     9ec:	c6 de       	rcall	.-628    	; 0x77a <ADC_Conversion>
     9ee:	80 93 52 02 	sts	0x0252, r24
		Center_white_line = ADC_Conversion(2);                 //Getting data of Center WL Sensor
     9f2:	82 e0       	ldi	r24, 0x02	; 2
     9f4:	c2 de       	rcall	.-636    	; 0x77a <ADC_Conversion>
     9f6:	80 93 51 02 	sts	0x0251, r24
		Right_white_line = ADC_Conversion(3);                  //Getting data of Right WL Sensor
     9fa:	83 e0       	ldi	r24, 0x03	; 3
     9fc:	be de       	rcall	.-644    	; 0x77a <ADC_Conversion>
     9fe:	80 93 50 02 	sts	0x0250, r24
		
		sharp_left = ADC_Conversion(4);						    //Stores the Analog value of front sharp connected to ADC channel 4 into variable "sharp_left"
     a02:	84 e0       	ldi	r24, 0x04	; 4
     a04:	ba de       	rcall	.-652    	; 0x77a <ADC_Conversion>
     a06:	80 93 8a 02 	sts	0x028A, r24
		value_left = Sharp_GP2D12_estimation(sharp_left);		//Stores Distance calculated in a variable "value_left".
     a0a:	d2 de       	rcall	.-604    	; 0x7b0 <Sharp_GP2D12_estimation>
     a0c:	90 93 fc 02 	sts	0x02FC, r25
     a10:	80 93 fb 02 	sts	0x02FB, r24
		lcd_print(2,5,value_left,3);
     a14:	23 e0       	ldi	r18, 0x03	; 3
     a16:	30 e0       	ldi	r19, 0x00	; 0
     a18:	ac 01       	movw	r20, r24
     a1a:	65 e0       	ldi	r22, 0x05	; 5
     a1c:	82 e0       	ldi	r24, 0x02	; 2
     a1e:	8e dc       	rcall	.-1764   	; 0x33c <lcd_print>
		sharp_right = ADC_Conversion(5);						//Stores the Analog value of front sharp connected to ADC channel 5 into variable "sharp"
     a20:	85 e0       	ldi	r24, 0x05	; 5
     a22:	ab de       	rcall	.-682    	; 0x77a <ADC_Conversion>
     a24:	80 93 89 02 	sts	0x0289, r24
		value_right = Sharp_GP2D12_estimation(sharp_right);		//Stores Distance calculated in a variable "value_right".
     a28:	c3 de       	rcall	.-634    	; 0x7b0 <Sharp_GP2D12_estimation>
     a2a:	90 93 fa 02 	sts	0x02FA, r25
     a2e:	80 93 f9 02 	sts	0x02F9, r24
		lcd_print(2,10,value_right,3);
     a32:	23 e0       	ldi	r18, 0x03	; 3
     a34:	30 e0       	ldi	r19, 0x00	; 0
     a36:	ac 01       	movw	r20, r24
     a38:	6a e0       	ldi	r22, 0x0A	; 10
     a3a:	82 e0       	ldi	r24, 0x02	; 2
     a3c:	7f dc       	rcall	.-1794   	; 0x33c <lcd_print>
		
		
		//sets flag to zero
		flag=0;
     a3e:	10 92 53 02 	sts	0x0253, r1
		
        //stops if Left_WL and Center_WL or Right_WL and Center_WL are greater then thershold
		if ((Center_white_line>thershold && Left_white_line>thershold )||(Center_white_line>thershold&& Right_white_line>thershold))
     a42:	80 91 4d 02 	lds	r24, 0x024D
     a46:	90 91 51 02 	lds	r25, 0x0251
     a4a:	89 17       	cp	r24, r25
     a4c:	00 f5       	brcc	.+64     	; 0xa8e <node+0xdc>
     a4e:	90 91 52 02 	lds	r25, 0x0252
     a52:	89 17       	cp	r24, r25
     a54:	20 f0       	brcs	.+8      	; 0xa5e <node+0xac>
     a56:	90 91 50 02 	lds	r25, 0x0250
     a5a:	89 17       	cp	r24, r25
     a5c:	80 f4       	brcc	.+32     	; 0xa7e <node+0xcc>
		{
			//moves forward by 100 counts
			forward_by_count(150,110,110);
     a5e:	2e e6       	ldi	r18, 0x6E	; 110
     a60:	30 e0       	ldi	r19, 0x00	; 0
     a62:	4e e6       	ldi	r20, 0x6E	; 110
     a64:	50 e0       	ldi	r21, 0x00	; 0
     a66:	66 e9       	ldi	r22, 0x96	; 150
     a68:	70 e0       	ldi	r23, 0x00	; 0
     a6a:	80 e0       	ldi	r24, 0x00	; 0
     a6c:	90 e0       	ldi	r25, 0x00	; 0
     a6e:	fa de       	rcall	.-524    	; 0x864 <forward_by_count>
*Example call : void forward (void)
*/

void forward (void) 
{
  PORTA=0x06;
     a70:	86 e0       	ldi	r24, 0x06	; 6
     a72:	82 b9       	out	0x02, r24	; 2
*Example call : velocity (unsigned char left_motor, unsigned char right_motor);
*/

void velocity (unsigned char left_motor, unsigned char right_motor)
{
OCR5AL = (unsigned char)left_motor;  //sets velocity of both motors
     a74:	10 92 28 01 	sts	0x0128, r1
OCR5BL = (unsigned char)right_motor;
     a78:	10 92 2a 01 	sts	0x012A, r1
     a7c:	59 c0       	rjmp	.+178    	; 0xb30 <node+0x17e>

          //moves forward if center_WL greater then thershold
		 if(Center_white_line>thershold)
		{
			//sets flag to 1
			flag=1;
     a7e:	81 e0       	ldi	r24, 0x01	; 1
     a80:	80 93 53 02 	sts	0x0253, r24
*Example call : void forward (void)
*/

void forward (void) 
{
  PORTA=0x06;
     a84:	f2 b8       	out	0x02, r15	; 2
*Example call : velocity (unsigned char left_motor, unsigned char right_motor);
*/

void velocity (unsigned char left_motor, unsigned char right_motor)
{
OCR5AL = (unsigned char)left_motor;  //sets velocity of both motors
     a86:	f8 01       	movw	r30, r16
     a88:	e0 82       	st	Z, r14
OCR5BL = (unsigned char)right_motor;
     a8a:	e8 82       	st	Y, r14
     a8c:	ae cf       	rjmp	.-164    	; 0x9ea <node+0x38>
			forward();
			velocity(110,110);
			
		}
         //takes soft_left if left_WL is greater then thershold and flag is zero
		else if((Left_white_line>thershold) && (flag==0))
     a8e:	90 91 52 02 	lds	r25, 0x0252
     a92:	89 17       	cp	r24, r25
     a94:	40 f4       	brcc	.+16     	; 0xaa6 <node+0xf4>
		{
			//sets flag to 1
			flag=1;
     a96:	81 e0       	ldi	r24, 0x01	; 1
     a98:	80 93 53 02 	sts	0x0253, r24
*Example call : void forward (void)
*/

void forward (void) 
{
  PORTA=0x06;
     a9c:	f2 b8       	out	0x02, r15	; 2
*Example call : velocity (unsigned char left_motor, unsigned char right_motor);
*/

void velocity (unsigned char left_motor, unsigned char right_motor)
{
OCR5AL = (unsigned char)left_motor;  //sets velocity of both motors
     a9e:	f8 01       	movw	r30, r16
     aa0:	10 82       	st	Z, r1
OCR5BL = (unsigned char)right_motor;
     aa2:	d8 82       	st	Y, r13
     aa4:	a2 cf       	rjmp	.-188    	; 0x9ea <node+0x38>
			forward();
			velocity(0,100);
			
		}
        //takes soft_right if right_WL is greater then thershold and flag is zero
		else if((Right_white_line>thershold) && (flag==0))
     aa6:	20 91 50 02 	lds	r18, 0x0250
     aaa:	82 17       	cp	r24, r18
     aac:	40 f4       	brcc	.+16     	; 0xabe <node+0x10c>
		{
			//sets flag to 1
			flag=1;
     aae:	81 e0       	ldi	r24, 0x01	; 1
     ab0:	80 93 53 02 	sts	0x0253, r24
*Example call : void forward (void)
*/

void forward (void) 
{
  PORTA=0x06;
     ab4:	f2 b8       	out	0x02, r15	; 2
*Example call : velocity (unsigned char left_motor, unsigned char right_motor);
*/

void velocity (unsigned char left_motor, unsigned char right_motor)
{
OCR5AL = (unsigned char)left_motor;  //sets velocity of both motors
     ab6:	f8 01       	movw	r30, r16
     ab8:	d0 82       	st	Z, r13
OCR5BL = (unsigned char)right_motor;
     aba:	18 82       	st	Y, r1
     abc:	96 cf       	rjmp	.-212    	; 0x9ea <node+0x38>
			//takes soft_right
			forward();
			velocity(100,0);
					}
		//when all three sensor are less then thershold and distance form wall is less than 300 mm
        else if (flag==0 && Right_white_line<thershold && Left_white_line<thershold && value_left<300 )
     abe:	28 17       	cp	r18, r24
     ac0:	08 f0       	brcs	.+2      	; 0xac4 <node+0x112>
     ac2:	93 cf       	rjmp	.-218    	; 0x9ea <node+0x38>
     ac4:	98 17       	cp	r25, r24
     ac6:	08 f0       	brcs	.+2      	; 0xaca <node+0x118>
     ac8:	90 cf       	rjmp	.-224    	; 0x9ea <node+0x38>
     aca:	80 91 fb 02 	lds	r24, 0x02FB
     ace:	90 91 fc 02 	lds	r25, 0x02FC
     ad2:	8c 32       	cpi	r24, 0x2C	; 44
     ad4:	f1 e0       	ldi	r31, 0x01	; 1
     ad6:	9f 07       	cpc	r25, r31
     ad8:	08 f0       	brcs	.+2      	; 0xadc <node+0x12a>
     ada:	87 cf       	rjmp	.-242    	; 0x9ea <node+0x38>
		{
			//NOTE:ONLY LEFT SHAPRE SENSOR DATA IS USED
			
			//distance less 80mm takes slight right turn
			if (value_left<80)
     adc:	80 35       	cpi	r24, 0x50	; 80
     ade:	91 05       	cpc	r25, r1
     ae0:	28 f4       	brcc	.+10     	; 0xaec <node+0x13a>
*Example call : void forward (void)
*/

void forward (void) 
{
  PORTA=0x06;
     ae2:	f2 b8       	out	0x02, r15	; 2
*Example call : velocity (unsigned char left_motor, unsigned char right_motor);
*/

void velocity (unsigned char left_motor, unsigned char right_motor)
{
OCR5AL = (unsigned char)left_motor;  //sets velocity of both motors
     ae4:	f8 01       	movw	r30, r16
     ae6:	d0 82       	st	Z, r13
OCR5BL = (unsigned char)right_motor;
     ae8:	c8 82       	st	Y, r12
     aea:	7f cf       	rjmp	.-258    	; 0x9ea <node+0x38>
				
				forward();
				velocity(100,80);
			}
			//distance between 80mm and 95mm moves forward
			else if ((value_left>=80) && (value_left<=95))
     aec:	9c 01       	movw	r18, r24
     aee:	20 55       	subi	r18, 0x50	; 80
     af0:	31 09       	sbc	r19, r1
     af2:	20 31       	cpi	r18, 0x10	; 16
     af4:	31 05       	cpc	r19, r1
     af6:	70 f4       	brcc	.+28     	; 0xb14 <node+0x162>
*Example call : void forward (void)
*/

void forward (void) 
{
  PORTA=0x06;
     af8:	f2 b8       	out	0x02, r15	; 2
*Example call : velocity (unsigned char left_motor, unsigned char right_motor);
*/

void velocity (unsigned char left_motor, unsigned char right_motor)
{
OCR5AL = (unsigned char)left_motor;  //sets velocity of both motors
     afa:	f8 01       	movw	r30, r16
     afc:	d0 82       	st	Z, r13
OCR5BL = (unsigned char)right_motor;
     afe:	d8 82       	st	Y, r13
     b00:	ff ef       	ldi	r31, 0xFF	; 255
     b02:	2f e3       	ldi	r18, 0x3F	; 63
     b04:	82 e0       	ldi	r24, 0x02	; 2
     b06:	f1 50       	subi	r31, 0x01	; 1
     b08:	20 40       	sbci	r18, 0x00	; 0
     b0a:	80 40       	sbci	r24, 0x00	; 0
     b0c:	e1 f7       	brne	.-8      	; 0xb06 <node+0x154>
     b0e:	00 c0       	rjmp	.+0      	; 0xb10 <node+0x15e>
     b10:	00 00       	nop
     b12:	6b cf       	rjmp	.-298    	; 0x9ea <node+0x38>
				forward();
				velocity(100,100);
				_delay_ms(50);
			}
			//distance above 95mm and below 150 takes slight left turn
			else if ((value_left>95)&&(value_left<=250))
     b14:	80 56       	subi	r24, 0x60	; 96
     b16:	91 09       	sbc	r25, r1
     b18:	8b 39       	cpi	r24, 0x9B	; 155
     b1a:	91 05       	cpc	r25, r1
     b1c:	28 f4       	brcc	.+10     	; 0xb28 <node+0x176>
*Example call : void forward (void)
*/

void forward (void) 
{
  PORTA=0x06;
     b1e:	f2 b8       	out	0x02, r15	; 2
*Example call : velocity (unsigned char left_motor, unsigned char right_motor);
*/

void velocity (unsigned char left_motor, unsigned char right_motor)
{
OCR5AL = (unsigned char)left_motor;  //sets velocity of both motors
     b20:	f8 01       	movw	r30, r16
     b22:	d0 82       	st	Z, r13
OCR5BL = (unsigned char)right_motor;
     b24:	c8 82       	st	Y, r12
     b26:	61 cf       	rjmp	.-318    	; 0x9ea <node+0x38>
*Example call : velocity (unsigned char left_motor, unsigned char right_motor);
*/

void velocity (unsigned char left_motor, unsigned char right_motor)
{
OCR5AL = (unsigned char)left_motor;  //sets velocity of both motors
     b28:	f8 01       	movw	r30, r16
     b2a:	c0 82       	st	Z, r12
OCR5BL = (unsigned char)right_motor;
     b2c:	d8 82       	st	Y, r13
     b2e:	5d cf       	rjmp	.-326    	; 0x9ea <node+0x38>
		
	}
	//stops 
   //	stop();
	
}
     b30:	df 91       	pop	r29
     b32:	cf 91       	pop	r28
     b34:	1f 91       	pop	r17
     b36:	0f 91       	pop	r16
     b38:	ff 90       	pop	r15
     b3a:	ef 90       	pop	r14
     b3c:	df 90       	pop	r13
     b3e:	cf 90       	pop	r12
     b40:	08 95       	ret

00000b42 <follow_black>:


void follow_black()
{
     b42:	ef 92       	push	r14
     b44:	ff 92       	push	r15
     b46:	0f 93       	push	r16
     b48:	1f 93       	push	r17
     b4a:	cf 93       	push	r28
     b4c:	df 93       	push	r29
*Example call : void forward (void)
*/

void forward (void) 
{
  PORTA=0x06;
     b4e:	0f 2e       	mov	r0, r31
     b50:	f6 e0       	ldi	r31, 0x06	; 6
     b52:	ef 2e       	mov	r14, r31
     b54:	f0 2d       	mov	r31, r0
*Example call : velocity (unsigned char left_motor, unsigned char right_motor);
*/

void velocity (unsigned char left_motor, unsigned char right_motor)
{
OCR5AL = (unsigned char)left_motor;  //sets velocity of both motors
     b56:	08 e2       	ldi	r16, 0x28	; 40
     b58:	11 e0       	ldi	r17, 0x01	; 1
     b5a:	0f 2e       	mov	r0, r31
     b5c:	f4 e6       	ldi	r31, 0x64	; 100
     b5e:	ff 2e       	mov	r15, r31
     b60:	f0 2d       	mov	r31, r0
OCR5BL = (unsigned char)right_motor;
     b62:	ca e2       	ldi	r28, 0x2A	; 42
     b64:	d1 e0       	ldi	r29, 0x01	; 1
	while(1)
	{

		Left_white_line = ADC_Conversion(1);	//Getting data of Left WL Sensor
     b66:	81 e0       	ldi	r24, 0x01	; 1
     b68:	08 de       	rcall	.-1008   	; 0x77a <ADC_Conversion>
     b6a:	80 93 52 02 	sts	0x0252, r24
		Center_white_line = ADC_Conversion(2);	//Getting data of Center WL Sensor
     b6e:	82 e0       	ldi	r24, 0x02	; 2
     b70:	04 de       	rcall	.-1016   	; 0x77a <ADC_Conversion>
     b72:	80 93 51 02 	sts	0x0251, r24
		Right_white_line = ADC_Conversion(3);	//Getting data of Right WL Sensor
     b76:	83 e0       	ldi	r24, 0x03	; 3
     b78:	00 de       	rcall	.-1024   	; 0x77a <ADC_Conversion>
     b7a:	80 93 50 02 	sts	0x0250, r24

		flag=0;
     b7e:	10 92 53 02 	sts	0x0253, r1

		print_sensor(1,1,3);	//Prints value of White Line Sensor1
     b82:	43 e0       	ldi	r20, 0x03	; 3
     b84:	61 e0       	ldi	r22, 0x01	; 1
     b86:	81 e0       	ldi	r24, 0x01	; 1
     b88:	3d de       	rcall	.-902    	; 0x804 <print_sensor>
		print_sensor(1,5,2);	//Prints Value of White Line Sensor2
     b8a:	42 e0       	ldi	r20, 0x02	; 2
     b8c:	65 e0       	ldi	r22, 0x05	; 5
     b8e:	81 e0       	ldi	r24, 0x01	; 1
     b90:	39 de       	rcall	.-910    	; 0x804 <print_sensor>
		print_sensor(1,9,1);	//Prints Value of White Line Sensor3
     b92:	41 e0       	ldi	r20, 0x01	; 1
     b94:	69 e0       	ldi	r22, 0x09	; 9
     b96:	81 e0       	ldi	r24, 0x01	; 1
     b98:	35 de       	rcall	.-918    	; 0x804 <print_sensor>
		
		unsigned char thershold1=0x78;

		if(Center_white_line<thershold1)
     b9a:	80 91 51 02 	lds	r24, 0x0251
     b9e:	88 37       	cpi	r24, 0x78	; 120
     ba0:	38 f4       	brcc	.+14     	; 0xbb0 <follow_black+0x6e>
		{
			flag=1;
     ba2:	81 e0       	ldi	r24, 0x01	; 1
     ba4:	80 93 53 02 	sts	0x0253, r24
*Example call : void forward (void)
*/

void forward (void) 
{
  PORTA=0x06;
     ba8:	e2 b8       	out	0x02, r14	; 2
*Example call : velocity (unsigned char left_motor, unsigned char right_motor);
*/

void velocity (unsigned char left_motor, unsigned char right_motor)
{
OCR5AL = (unsigned char)left_motor;  //sets velocity of both motors
     baa:	f8 01       	movw	r30, r16
     bac:	f0 82       	st	Z, r15
OCR5BL = (unsigned char)right_motor;
     bae:	f8 82       	st	Y, r15
			forward();
			velocity(100,100);
		}

		if((Left_white_line>thershold1) && (flag==0))
     bb0:	80 91 52 02 	lds	r24, 0x0252
     bb4:	89 37       	cpi	r24, 0x79	; 121
     bb6:	58 f0       	brcs	.+22     	; 0xbce <follow_black+0x8c>
     bb8:	80 91 53 02 	lds	r24, 0x0253
     bbc:	81 11       	cpse	r24, r1
     bbe:	07 c0       	rjmp	.+14     	; 0xbce <follow_black+0x8c>
		{
			flag=1;
     bc0:	81 e0       	ldi	r24, 0x01	; 1
     bc2:	80 93 53 02 	sts	0x0253, r24
*Example call : void forward (void)
*/

void forward (void) 
{
  PORTA=0x06;
     bc6:	e2 b8       	out	0x02, r14	; 2
*Example call : velocity (unsigned char left_motor, unsigned char right_motor);
*/

void velocity (unsigned char left_motor, unsigned char right_motor)
{
OCR5AL = (unsigned char)left_motor;  //sets velocity of both motors
     bc8:	f8 01       	movw	r30, r16
     bca:	f0 82       	st	Z, r15
OCR5BL = (unsigned char)right_motor;
     bcc:	18 82       	st	Y, r1
			forward();
			velocity(100,0);
		}

		if((Right_white_line>thershold1) && (flag==0))
     bce:	80 91 50 02 	lds	r24, 0x0250
     bd2:	89 37       	cpi	r24, 0x79	; 121
     bd4:	58 f0       	brcs	.+22     	; 0xbec <follow_black+0xaa>
     bd6:	80 91 53 02 	lds	r24, 0x0253
     bda:	81 11       	cpse	r24, r1
     bdc:	07 c0       	rjmp	.+14     	; 0xbec <follow_black+0xaa>
		{
			flag=1;
     bde:	81 e0       	ldi	r24, 0x01	; 1
     be0:	80 93 53 02 	sts	0x0253, r24
*Example call : void forward (void)
*/

void forward (void) 
{
  PORTA=0x06;
     be4:	e2 b8       	out	0x02, r14	; 2
*Example call : velocity (unsigned char left_motor, unsigned char right_motor);
*/

void velocity (unsigned char left_motor, unsigned char right_motor)
{
OCR5AL = (unsigned char)left_motor;  //sets velocity of both motors
     be6:	f8 01       	movw	r30, r16
     be8:	10 82       	st	Z, r1
OCR5BL = (unsigned char)right_motor;
     bea:	f8 82       	st	Y, r15
			forward();
			velocity(0,100);
		}
		
		if((Center_white_line< thershold1&& Left_white_line<thershold1)||( Center_white_line< thershold1&& Right_white_line<thershold1))
     bec:	80 91 51 02 	lds	r24, 0x0251
     bf0:	88 37       	cpi	r24, 0x78	; 120
     bf2:	08 f0       	brcs	.+2      	; 0xbf6 <follow_black+0xb4>
     bf4:	b8 cf       	rjmp	.-144    	; 0xb66 <follow_black+0x24>
     bf6:	80 91 52 02 	lds	r24, 0x0252
     bfa:	88 37       	cpi	r24, 0x78	; 120
     bfc:	28 f0       	brcs	.+10     	; 0xc08 <follow_black+0xc6>
     bfe:	80 91 50 02 	lds	r24, 0x0250
     c02:	88 37       	cpi	r24, 0x78	; 120
     c04:	08 f0       	brcs	.+2      	; 0xc08 <follow_black+0xc6>
     c06:	af cf       	rjmp	.-162    	; 0xb66 <follow_black+0x24>
		{
			forward_by_count(100,100,100);
     c08:	24 e6       	ldi	r18, 0x64	; 100
     c0a:	30 e0       	ldi	r19, 0x00	; 0
     c0c:	44 e6       	ldi	r20, 0x64	; 100
     c0e:	50 e0       	ldi	r21, 0x00	; 0
     c10:	64 e6       	ldi	r22, 0x64	; 100
     c12:	70 e0       	ldi	r23, 0x00	; 0
     c14:	80 e0       	ldi	r24, 0x00	; 0
     c16:	90 e0       	ldi	r25, 0x00	; 0
     c18:	25 de       	rcall	.-950    	; 0x864 <forward_by_count>
*Example call : void forward (void)
*/

void forward (void) 
{
  PORTA=0x06;
     c1a:	86 e0       	ldi	r24, 0x06	; 6
     c1c:	82 b9       	out	0x02, r24	; 2
*Example call : velocity (unsigned char left_motor, unsigned char right_motor);
*/

void velocity (unsigned char left_motor, unsigned char right_motor)
{
OCR5AL = (unsigned char)left_motor;  //sets velocity of both motors
     c1e:	10 92 28 01 	sts	0x0128, r1
OCR5BL = (unsigned char)right_motor;
     c22:	10 92 2a 01 	sts	0x012A, r1
		}
		
		
		
	}
}
     c26:	df 91       	pop	r29
     c28:	cf 91       	pop	r28
     c2a:	1f 91       	pop	r17
     c2c:	0f 91       	pop	r16
     c2e:	ff 90       	pop	r15
     c30:	ef 90       	pop	r14
     c32:	08 95       	ret

00000c34 <turn_left>:
*Logic        : function to turn towards left until black is found,robot is moved out line initially then turned left until left_WL is greater than thershold  
*Example call : turn_left(100,100);
*/

void turn_left(int left_velocity,int right_velocity)
{
     c34:	df 92       	push	r13
     c36:	ef 92       	push	r14
     c38:	ff 92       	push	r15
     c3a:	0f 93       	push	r16
     c3c:	1f 93       	push	r17
     c3e:	cf 93       	push	r28
     c40:	df 93       	push	r29
     c42:	d8 2e       	mov	r13, r24
     c44:	e6 2e       	mov	r14, r22
*Example call : void left(void)
*/

void left(void)
{
	PORTA=0x0A;
     c46:	8a e0       	ldi	r24, 0x0A	; 10
     c48:	82 b9       	out	0x02, r24	; 2
*Example call : velocity (unsigned char left_motor, unsigned char right_motor);
*/

void velocity (unsigned char left_motor, unsigned char right_motor)
{
OCR5AL = (unsigned char)left_motor;  //sets velocity of both motors
     c4a:	84 e6       	ldi	r24, 0x64	; 100
     c4c:	80 93 28 01 	sts	0x0128, r24
OCR5BL = (unsigned char)right_motor;
     c50:	80 93 2a 01 	sts	0x012A, r24
     c54:	2f ef       	ldi	r18, 0xFF	; 255
     c56:	8f e7       	ldi	r24, 0x7F	; 127
     c58:	9d e0       	ldi	r25, 0x0D	; 13
     c5a:	21 50       	subi	r18, 0x01	; 1
     c5c:	80 40       	sbci	r24, 0x00	; 0
     c5e:	90 40       	sbci	r25, 0x00	; 0
     c60:	e1 f7       	brne	.-8      	; 0xc5a <turn_left+0x26>
     c62:	00 c0       	rjmp	.+0      	; 0xc64 <turn_left+0x30>
     c64:	00 00       	nop
*Example call : void left(void)
*/

void left(void)
{
	PORTA=0x0A;
     c66:	0f 2e       	mov	r0, r31
     c68:	fa e0       	ldi	r31, 0x0A	; 10
     c6a:	ff 2e       	mov	r15, r31
     c6c:	f0 2d       	mov	r31, r0
*Example call : velocity (unsigned char left_motor, unsigned char right_motor);
*/

void velocity (unsigned char left_motor, unsigned char right_motor)
{
OCR5AL = (unsigned char)left_motor;  //sets velocity of both motors
     c6e:	08 e2       	ldi	r16, 0x28	; 40
     c70:	11 e0       	ldi	r17, 0x01	; 1
OCR5BL = (unsigned char)right_motor;
     c72:	ca e2       	ldi	r28, 0x2A	; 42
     c74:	d1 e0       	ldi	r29, 0x01	; 1
	
	//starting infinite loop
	while(1)
	{
		
		Left_white_line=ADC_Conversion(1);         //Getting data of Left WL Sensor 
     c76:	81 e0       	ldi	r24, 0x01	; 1
     c78:	80 dd       	rcall	.-1280   	; 0x77a <ADC_Conversion>
     c7a:	80 93 52 02 	sts	0x0252, r24
		Center_white_line=ADC_Conversion(2);       //Getting data of Center WL Sensor
     c7e:	82 e0       	ldi	r24, 0x02	; 2
     c80:	7c dd       	rcall	.-1288   	; 0x77a <ADC_Conversion>
     c82:	80 93 51 02 	sts	0x0251, r24
		Right_white_line=ADC_Conversion(3);        //Getting data of Right WL Sensor
     c86:	83 e0       	ldi	r24, 0x03	; 3
     c88:	78 dd       	rcall	.-1296   	; 0x77a <ADC_Conversion>
     c8a:	80 93 50 02 	sts	0x0250, r24
		
		//terminates if left_WL is greater then thershold
		if(Left_white_line>thershold)
     c8e:	20 91 52 02 	lds	r18, 0x0252
     c92:	90 91 4d 02 	lds	r25, 0x024D
     c96:	92 17       	cp	r25, r18
     c98:	28 f0       	brcs	.+10     	; 0xca4 <turn_left+0x70>
*Example call : void left(void)
*/

void left(void)
{
	PORTA=0x0A;
     c9a:	f2 b8       	out	0x02, r15	; 2
*Example call : velocity (unsigned char left_motor, unsigned char right_motor);
*/

void velocity (unsigned char left_motor, unsigned char right_motor)
{
OCR5AL = (unsigned char)left_motor;  //sets velocity of both motors
     c9c:	f8 01       	movw	r30, r16
     c9e:	d0 82       	st	Z, r13
OCR5BL = (unsigned char)right_motor;
     ca0:	e8 82       	st	Y, r14
     ca2:	e9 cf       	rjmp	.-46     	; 0xc76 <turn_left+0x42>
*Example call : void stop (void)
*/

void stop (void)
{
  PORTA =0x00;
     ca4:	12 b8       	out	0x02, r1	; 2
			left();
			velocity(left_velocity,right_velocity);
		}
	}
	stop();
}
     ca6:	df 91       	pop	r29
     ca8:	cf 91       	pop	r28
     caa:	1f 91       	pop	r17
     cac:	0f 91       	pop	r16
     cae:	ff 90       	pop	r15
     cb0:	ef 90       	pop	r14
     cb2:	df 90       	pop	r13
     cb4:	08 95       	ret

00000cb6 <turn_right>:
*Output       : void
*Example call : turn_right(100,100);
*/

void turn_right(int left_velocity,int right_velocity)
{
     cb6:	df 92       	push	r13
     cb8:	ef 92       	push	r14
     cba:	ff 92       	push	r15
     cbc:	0f 93       	push	r16
     cbe:	1f 93       	push	r17
     cc0:	cf 93       	push	r28
     cc2:	df 93       	push	r29
     cc4:	d8 2e       	mov	r13, r24
     cc6:	e6 2e       	mov	r14, r22
*Example call : void right (void)
*/

void right(void)
{
	PORTA=0x05;
     cc8:	85 e0       	ldi	r24, 0x05	; 5
     cca:	82 b9       	out	0x02, r24	; 2
*Example call : velocity (unsigned char left_motor, unsigned char right_motor);
*/

void velocity (unsigned char left_motor, unsigned char right_motor)
{
OCR5AL = (unsigned char)left_motor;  //sets velocity of both motors
     ccc:	84 e6       	ldi	r24, 0x64	; 100
     cce:	80 93 28 01 	sts	0x0128, r24
OCR5BL = (unsigned char)right_motor;
     cd2:	80 93 2a 01 	sts	0x012A, r24
     cd6:	2f ef       	ldi	r18, 0xFF	; 255
     cd8:	8f e7       	ldi	r24, 0x7F	; 127
     cda:	9d e0       	ldi	r25, 0x0D	; 13
     cdc:	21 50       	subi	r18, 0x01	; 1
     cde:	80 40       	sbci	r24, 0x00	; 0
     ce0:	90 40       	sbci	r25, 0x00	; 0
     ce2:	e1 f7       	brne	.-8      	; 0xcdc <turn_right+0x26>
     ce4:	00 c0       	rjmp	.+0      	; 0xce6 <turn_right+0x30>
     ce6:	00 00       	nop
*Example call : void right (void)
*/

void right(void)
{
	PORTA=0x05;
     ce8:	0f 2e       	mov	r0, r31
     cea:	f5 e0       	ldi	r31, 0x05	; 5
     cec:	ff 2e       	mov	r15, r31
     cee:	f0 2d       	mov	r31, r0
*Example call : velocity (unsigned char left_motor, unsigned char right_motor);
*/

void velocity (unsigned char left_motor, unsigned char right_motor)
{
OCR5AL = (unsigned char)left_motor;  //sets velocity of both motors
     cf0:	08 e2       	ldi	r16, 0x28	; 40
     cf2:	11 e0       	ldi	r17, 0x01	; 1
OCR5BL = (unsigned char)right_motor;
     cf4:	ca e2       	ldi	r28, 0x2A	; 42
     cf6:	d1 e0       	ldi	r29, 0x01	; 1
	_delay_ms(300);
	
	//starting infinite loop
	while(1)
	{
		Left_white_line=ADC_Conversion(1);            //Getting data of Left WL Sensor
     cf8:	81 e0       	ldi	r24, 0x01	; 1
     cfa:	3f dd       	rcall	.-1410   	; 0x77a <ADC_Conversion>
     cfc:	80 93 52 02 	sts	0x0252, r24
		Center_white_line=ADC_Conversion(2);          //Getting data of center WL Sensor
     d00:	82 e0       	ldi	r24, 0x02	; 2
     d02:	3b dd       	rcall	.-1418   	; 0x77a <ADC_Conversion>
     d04:	80 93 51 02 	sts	0x0251, r24
		Right_white_line=ADC_Conversion(3);           //Getting data of right WL Sensor
     d08:	83 e0       	ldi	r24, 0x03	; 3
     d0a:	37 dd       	rcall	.-1426   	; 0x77a <ADC_Conversion>
     d0c:	80 93 50 02 	sts	0x0250, r24
		
		//terminates if right_WL is greater then thershold
		if(Right_white_line>thershold)
     d10:	90 91 4d 02 	lds	r25, 0x024D
     d14:	98 17       	cp	r25, r24
     d16:	28 f0       	brcs	.+10     	; 0xd22 <turn_right+0x6c>
*Example call : void right (void)
*/

void right(void)
{
	PORTA=0x05;
     d18:	f2 b8       	out	0x02, r15	; 2
*Example call : velocity (unsigned char left_motor, unsigned char right_motor);
*/

void velocity (unsigned char left_motor, unsigned char right_motor)
{
OCR5AL = (unsigned char)left_motor;  //sets velocity of both motors
     d1a:	f8 01       	movw	r30, r16
     d1c:	d0 82       	st	Z, r13
OCR5BL = (unsigned char)right_motor;
     d1e:	e8 82       	st	Y, r14
     d20:	eb cf       	rjmp	.-42     	; 0xcf8 <turn_right+0x42>
*Example call : void stop (void)
*/

void stop (void)
{
  PORTA =0x00;
     d22:	12 b8       	out	0x02, r1	; 2
			right();
			velocity(left_velocity,right_velocity);
		}
	}
	stop();
}
     d24:	df 91       	pop	r29
     d26:	cf 91       	pop	r28
     d28:	1f 91       	pop	r17
     d2a:	0f 91       	pop	r16
     d2c:	ff 90       	pop	r15
     d2e:	ef 90       	pop	r14
     d30:	df 90       	pop	r13
     d32:	08 95       	ret

00000d34 <find_left>:
*Output       : void
*Example call : turn_left(100,100);
*/

void find_left(int left_velocity,int right_velocity)
{
     d34:	df 92       	push	r13
     d36:	ef 92       	push	r14
     d38:	ff 92       	push	r15
     d3a:	0f 93       	push	r16
     d3c:	1f 93       	push	r17
     d3e:	cf 93       	push	r28
     d40:	df 93       	push	r29
     d42:	d8 2e       	mov	r13, r24
     d44:	e6 2e       	mov	r14, r22
*Example call : void left(void)
*/

void left(void)
{
	PORTA=0x0A;
     d46:	0f 2e       	mov	r0, r31
     d48:	fa e0       	ldi	r31, 0x0A	; 10
     d4a:	ff 2e       	mov	r15, r31
     d4c:	f0 2d       	mov	r31, r0
*Example call : velocity (unsigned char left_motor, unsigned char right_motor);
*/

void velocity (unsigned char left_motor, unsigned char right_motor)
{
OCR5AL = (unsigned char)left_motor;  //sets velocity of both motors
     d4e:	08 e2       	ldi	r16, 0x28	; 40
     d50:	11 e0       	ldi	r17, 0x01	; 1
OCR5BL = (unsigned char)right_motor;
     d52:	ca e2       	ldi	r28, 0x2A	; 42
     d54:	d1 e0       	ldi	r29, 0x01	; 1
	//starts infinite loop
	while(1)
	{ 
		
		Left_white_line=ADC_Conversion(1);                //Getting data of Left WL Sensor
     d56:	81 e0       	ldi	r24, 0x01	; 1
     d58:	10 dd       	rcall	.-1504   	; 0x77a <ADC_Conversion>
     d5a:	80 93 52 02 	sts	0x0252, r24
		Center_white_line=ADC_Conversion(2);              //Getting data of center WL Sensor   
     d5e:	82 e0       	ldi	r24, 0x02	; 2
     d60:	0c dd       	rcall	.-1512   	; 0x77a <ADC_Conversion>
     d62:	80 93 51 02 	sts	0x0251, r24
		Right_white_line=ADC_Conversion(3);               //Getting data of right WL Sensor
     d66:	83 e0       	ldi	r24, 0x03	; 3
     d68:	08 dd       	rcall	.-1520   	; 0x77a <ADC_Conversion>
     d6a:	80 93 50 02 	sts	0x0250, r24
		
		//if left_Wl less than thershold 
		if(Left_white_line<thershold)
     d6e:	20 91 52 02 	lds	r18, 0x0252
     d72:	90 91 4d 02 	lds	r25, 0x024D
     d76:	29 17       	cp	r18, r25
     d78:	28 f0       	brcs	.+10     	; 0xd84 <find_left+0x50>
*Example call : void left(void)
*/

void left(void)
{
	PORTA=0x0A;
     d7a:	f2 b8       	out	0x02, r15	; 2
*Example call : velocity (unsigned char left_motor, unsigned char right_motor);
*/

void velocity (unsigned char left_motor, unsigned char right_motor)
{
OCR5AL = (unsigned char)left_motor;  //sets velocity of both motors
     d7c:	f8 01       	movw	r30, r16
     d7e:	d0 82       	st	Z, r13
OCR5BL = (unsigned char)right_motor;
     d80:	e8 82       	st	Y, r14
     d82:	e9 cf       	rjmp	.-46     	; 0xd56 <find_left+0x22>
			left();
			velocity(left_velocity,right_velocity);
		}
	}
	
}
     d84:	df 91       	pop	r29
     d86:	cf 91       	pop	r28
     d88:	1f 91       	pop	r17
     d8a:	0f 91       	pop	r16
     d8c:	ff 90       	pop	r15
     d8e:	ef 90       	pop	r14
     d90:	df 90       	pop	r13
     d92:	08 95       	ret

00000d94 <left_pick>:
*Output       : void
*Example call : left_pick();
*/

void left_pick(void)
{
     d94:	cf 93       	push	r28
	//iteration variable 
	int i=0;
	forward_by_count(150,110,110);
     d96:	2e e6       	ldi	r18, 0x6E	; 110
     d98:	30 e0       	ldi	r19, 0x00	; 0
     d9a:	4e e6       	ldi	r20, 0x6E	; 110
     d9c:	50 e0       	ldi	r21, 0x00	; 0
     d9e:	66 e9       	ldi	r22, 0x96	; 150
     da0:	70 e0       	ldi	r23, 0x00	; 0
     da2:	80 e0       	ldi	r24, 0x00	; 0
     da4:	90 e0       	ldi	r25, 0x00	; 0
     da6:	5e dd       	rcall	.-1348   	; 0x864 <forward_by_count>
*Example call : void stop (void)
*/

void stop (void)
{
  PORTA =0x00;
     da8:	12 b8       	out	0x02, r1	; 2
	//stops 
	stop();
	
   //moves gripper to zero position 
	servo_1(0);
     daa:	80 e0       	ldi	r24, 0x00	; 0
     dac:	99 dc       	rcall	.-1742   	; 0x6e0 <servo_1>
     dae:	c0 e0       	ldi	r28, 0x00	; 0
	
	//moves arm down
	for(i=0;i<140;i++)
	{   
		servo_2(i);
     db0:	8c 2f       	mov	r24, r28
     db2:	af dc       	rcall	.-1698   	; 0x712 <servo_2>
     db4:	8f ef       	ldi	r24, 0xFF	; 255
     db6:	9f e8       	ldi	r25, 0x8F	; 143
     db8:	01 97       	sbiw	r24, 0x01	; 1
     dba:	f1 f7       	brne	.-4      	; 0xdb8 <left_pick+0x24>
     dbc:	00 c0       	rjmp	.+0      	; 0xdbe <left_pick+0x2a>
     dbe:	00 00       	nop
     dc0:	cf 5f       	subi	r28, 0xFF	; 255
	
   //moves gripper to zero position 
	servo_1(0);
	
	//moves arm down
	for(i=0;i<140;i++)
     dc2:	cc 38       	cpi	r28, 0x8C	; 140
     dc4:	a9 f7       	brne	.-22     	; 0xdb0 <left_pick+0x1c>
		servo_2(i);
		_delay_ms(10);
	}
	
	//turns left
	turn_left(150,150);
     dc6:	66 e9       	ldi	r22, 0x96	; 150
     dc8:	70 e0       	ldi	r23, 0x00	; 0
     dca:	86 e9       	ldi	r24, 0x96	; 150
     dcc:	90 e0       	ldi	r25, 0x00	; 0
     dce:	32 df       	rcall	.-412    	; 0xc34 <turn_left>
     dd0:	12 b8       	out	0x02, r1	; 2
	
    //stops 
	stop();
	
	//moves forward by 180 counts 
	forward_by_count(150,150,100);
     dd2:	24 e6       	ldi	r18, 0x64	; 100
     dd4:	30 e0       	ldi	r19, 0x00	; 0
     dd6:	46 e9       	ldi	r20, 0x96	; 150
     dd8:	50 e0       	ldi	r21, 0x00	; 0
     dda:	66 e9       	ldi	r22, 0x96	; 150
     ddc:	70 e0       	ldi	r23, 0x00	; 0
     dde:	80 e0       	ldi	r24, 0x00	; 0
     de0:	90 e0       	ldi	r25, 0x00	; 0
     de2:	40 dd       	rcall	.-1408   	; 0x864 <forward_by_count>
     de4:	12 b8       	out	0x02, r1	; 2
     de6:	c0 e0       	ldi	r28, 0x00	; 0
	stop();
	
	//gripper holds the CM
	for (i=0;i<120;i++)
	{
		servo_1(i);
     de8:	8c 2f       	mov	r24, r28
     dea:	7a dc       	rcall	.-1804   	; 0x6e0 <servo_1>
     dec:	8f ef       	ldi	r24, 0xFF	; 255
     dee:	9f e8       	ldi	r25, 0x8F	; 143
     df0:	01 97       	sbiw	r24, 0x01	; 1
     df2:	f1 f7       	brne	.-4      	; 0xdf0 <left_pick+0x5c>
     df4:	00 c0       	rjmp	.+0      	; 0xdf6 <left_pick+0x62>
     df6:	00 00       	nop
     df8:	cf 5f       	subi	r28, 0xFF	; 255
	//moves forward by 180 counts 
	forward_by_count(150,150,100);
	stop();
	
	//gripper holds the CM
	for (i=0;i<120;i++)
     dfa:	c8 37       	cpi	r28, 0x78	; 120
     dfc:	a9 f7       	brne	.-22     	; 0xde8 <left_pick+0x54>
     dfe:	cc e8       	ldi	r28, 0x8C	; 140
	}
 
    //moves arm upward 
	for(i=140;i>=0;i--)
	{
		servo_2(i);
     e00:	8c 2f       	mov	r24, r28
     e02:	87 dc       	rcall	.-1778   	; 0x712 <servo_2>
     e04:	8f ef       	ldi	r24, 0xFF	; 255
     e06:	9f e8       	ldi	r25, 0x8F	; 143
     e08:	01 97       	sbiw	r24, 0x01	; 1
     e0a:	f1 f7       	brne	.-4      	; 0xe08 <left_pick+0x74>
     e0c:	00 c0       	rjmp	.+0      	; 0xe0e <left_pick+0x7a>
     e0e:	00 00       	nop
     e10:	c1 50       	subi	r28, 0x01	; 1
     e12:	b0 f7       	brcc	.-20     	; 0xe00 <left_pick+0x6c>
		_delay_ms(10);
	}
	
	//sets servo free
	servo_1_free();
     e14:	97 dc       	rcall	.-1746   	; 0x744 <servo_1_free>
	servo_2_free();
     e16:	9d dc       	rcall	.-1734   	; 0x752 <servo_2_free>
	
	//moves backward
	backward_by_count(100,110,110);
     e18:	4e e6       	ldi	r20, 0x6E	; 110
     e1a:	50 e0       	ldi	r21, 0x00	; 0
     e1c:	6e e6       	ldi	r22, 0x6E	; 110
     e1e:	70 e0       	ldi	r23, 0x00	; 0
     e20:	84 e6       	ldi	r24, 0x64	; 100
     e22:	90 e0       	ldi	r25, 0x00	; 0
     e24:	8f dd       	rcall	.-1250   	; 0x944 <backward_by_count>
	//turn right
	turn_right(100,100);
     e26:	64 e6       	ldi	r22, 0x64	; 100
     e28:	70 e0       	ldi	r23, 0x00	; 0
     e2a:	84 e6       	ldi	r24, 0x64	; 100
     e2c:	90 e0       	ldi	r25, 0x00	; 0
     e2e:	43 df       	rcall	.-378    	; 0xcb6 <turn_right>
     e30:	12 b8       	out	0x02, r1	; 2
	stop();

}
     e32:	cf 91       	pop	r28
     e34:	08 95       	ret

00000e36 <right_pick>:
*Logic        : function to pick CM form right warehouse, bot turns right and gets aligned to pick CM ,then turns left in order be in the same direction
*Example call : right_pick();
*/

void right_pick(void)
{
     e36:	cf 93       	push	r28
	//iteration variable
	int i=0;
	
	forward_by_count(100,110,110);
     e38:	2e e6       	ldi	r18, 0x6E	; 110
     e3a:	30 e0       	ldi	r19, 0x00	; 0
     e3c:	4e e6       	ldi	r20, 0x6E	; 110
     e3e:	50 e0       	ldi	r21, 0x00	; 0
     e40:	64 e6       	ldi	r22, 0x64	; 100
     e42:	70 e0       	ldi	r23, 0x00	; 0
     e44:	80 e0       	ldi	r24, 0x00	; 0
     e46:	90 e0       	ldi	r25, 0x00	; 0
     e48:	0d dd       	rcall	.-1510   	; 0x864 <forward_by_count>
     e4a:	12 b8       	out	0x02, r1	; 2
	//stops 
	stop();
    
	//moves gripper to zero position 
	servo_1(0);
     e4c:	80 e0       	ldi	r24, 0x00	; 0
     e4e:	48 dc       	rcall	.-1904   	; 0x6e0 <servo_1>
     e50:	c0 e0       	ldi	r28, 0x00	; 0
	
	//moves arm down
	for(i=0;i<140;i++)
	{  
		servo_2(i);
     e52:	8c 2f       	mov	r24, r28
     e54:	5e dc       	rcall	.-1860   	; 0x712 <servo_2>
     e56:	8f ef       	ldi	r24, 0xFF	; 255
     e58:	9f e8       	ldi	r25, 0x8F	; 143
     e5a:	01 97       	sbiw	r24, 0x01	; 1
     e5c:	f1 f7       	brne	.-4      	; 0xe5a <right_pick+0x24>
     e5e:	00 c0       	rjmp	.+0      	; 0xe60 <right_pick+0x2a>
     e60:	00 00       	nop
     e62:	cf 5f       	subi	r28, 0xFF	; 255
    
	//moves gripper to zero position 
	servo_1(0);
	
	//moves arm down
	for(i=0;i<140;i++)
     e64:	cc 38       	cpi	r28, 0x8C	; 140
     e66:	a9 f7       	brne	.-22     	; 0xe52 <right_pick+0x1c>
		servo_2(i);
		_delay_ms(10);
	}

    //turn right 
	turn_right(150,150);
     e68:	66 e9       	ldi	r22, 0x96	; 150
     e6a:	70 e0       	ldi	r23, 0x00	; 0
     e6c:	86 e9       	ldi	r24, 0x96	; 150
     e6e:	90 e0       	ldi	r25, 0x00	; 0
     e70:	22 df       	rcall	.-444    	; 0xcb6 <turn_right>
     e72:	12 b8       	out	0x02, r1	; 2
	stop();
	
	//moves forward 
	forward_by_count(150,100,150);
     e74:	26 e9       	ldi	r18, 0x96	; 150
     e76:	30 e0       	ldi	r19, 0x00	; 0
     e78:	44 e6       	ldi	r20, 0x64	; 100
     e7a:	50 e0       	ldi	r21, 0x00	; 0
     e7c:	66 e9       	ldi	r22, 0x96	; 150
     e7e:	70 e0       	ldi	r23, 0x00	; 0
     e80:	80 e0       	ldi	r24, 0x00	; 0
     e82:	90 e0       	ldi	r25, 0x00	; 0
     e84:	ef dc       	rcall	.-1570   	; 0x864 <forward_by_count>
     e86:	12 b8       	out	0x02, r1	; 2
     e88:	c0 e0       	ldi	r28, 0x00	; 0
	stop();
	
	//gripper holds the CM
	for (i=0;i<120;i++)
	{
		servo_1(i);
     e8a:	8c 2f       	mov	r24, r28
     e8c:	29 dc       	rcall	.-1966   	; 0x6e0 <servo_1>
     e8e:	8f ef       	ldi	r24, 0xFF	; 255
     e90:	9f e8       	ldi	r25, 0x8F	; 143
     e92:	01 97       	sbiw	r24, 0x01	; 1
     e94:	f1 f7       	brne	.-4      	; 0xe92 <right_pick+0x5c>
     e96:	00 c0       	rjmp	.+0      	; 0xe98 <right_pick+0x62>
     e98:	00 00       	nop
     e9a:	cf 5f       	subi	r28, 0xFF	; 255
	//moves forward 
	forward_by_count(150,100,150);
	stop();
	
	//gripper holds the CM
	for (i=0;i<120;i++)
     e9c:	c8 37       	cpi	r28, 0x78	; 120
     e9e:	a9 f7       	brne	.-22     	; 0xe8a <right_pick+0x54>
     ea0:	cc e8       	ldi	r28, 0x8C	; 140
	}
	
	//arm moves upward
	for(i=140;i>=0;i--)
	{
		servo_2(i);
     ea2:	8c 2f       	mov	r24, r28
     ea4:	36 dc       	rcall	.-1940   	; 0x712 <servo_2>
     ea6:	8f ef       	ldi	r24, 0xFF	; 255
     ea8:	9f e8       	ldi	r25, 0x8F	; 143
     eaa:	01 97       	sbiw	r24, 0x01	; 1
     eac:	f1 f7       	brne	.-4      	; 0xeaa <right_pick+0x74>
     eae:	00 c0       	rjmp	.+0      	; 0xeb0 <right_pick+0x7a>
     eb0:	00 00       	nop
     eb2:	c1 50       	subi	r28, 0x01	; 1
     eb4:	b0 f7       	brcc	.-20     	; 0xea2 <right_pick+0x6c>
		_delay_ms(10);
	}
	
	//sets servo free
	servo_1_free();
     eb6:	46 dc       	rcall	.-1908   	; 0x744 <servo_1_free>
	servo_2_free();
     eb8:	4c dc       	rcall	.-1896   	; 0x752 <servo_2_free>
	
	//moves backward
	backward_by_count(100,110,110);
     eba:	4e e6       	ldi	r20, 0x6E	; 110
     ebc:	50 e0       	ldi	r21, 0x00	; 0
     ebe:	6e e6       	ldi	r22, 0x6E	; 110
     ec0:	70 e0       	ldi	r23, 0x00	; 0
     ec2:	84 e6       	ldi	r24, 0x64	; 100
     ec4:	90 e0       	ldi	r25, 0x00	; 0
     ec6:	3e dd       	rcall	.-1412   	; 0x944 <backward_by_count>
	
    //turn right
	turn_left(100,100);
     ec8:	64 e6       	ldi	r22, 0x64	; 100
     eca:	70 e0       	ldi	r23, 0x00	; 0
     ecc:	84 e6       	ldi	r24, 0x64	; 100
     ece:	90 e0       	ldi	r25, 0x00	; 0
     ed0:	b1 de       	rcall	.-670    	; 0xc34 <turn_left>
     ed2:	12 b8       	out	0x02, r1	; 2


	stop();

}
     ed4:	cf 91       	pop	r28
     ed6:	08 95       	ret

00000ed8 <right_place>:
                by check whether high rise or low rise ,takes left turn to be in current direction 
*Example call : right_place(1); for high rise ,right_place(0); for low rise 
*/

void right_place( int type_floor)
{  
     ed8:	cf 93       	push	r28
     eda:	df 93       	push	r29
     edc:	ec 01       	movw	r28, r24
	
	forward_by_count(100,110,110);
     ede:	2e e6       	ldi	r18, 0x6E	; 110
     ee0:	30 e0       	ldi	r19, 0x00	; 0
     ee2:	4e e6       	ldi	r20, 0x6E	; 110
     ee4:	50 e0       	ldi	r21, 0x00	; 0
     ee6:	64 e6       	ldi	r22, 0x64	; 100
     ee8:	70 e0       	ldi	r23, 0x00	; 0
     eea:	80 e0       	ldi	r24, 0x00	; 0
     eec:	90 e0       	ldi	r25, 0x00	; 0
     eee:	ba dc       	rcall	.-1676   	; 0x864 <forward_by_count>
	//takes right
   	turn_right(130,130);
     ef0:	62 e8       	ldi	r22, 0x82	; 130
     ef2:	70 e0       	ldi	r23, 0x00	; 0
     ef4:	82 e8       	ldi	r24, 0x82	; 130
     ef6:	90 e0       	ldi	r25, 0x00	; 0
     ef8:	de de       	rcall	.-580    	; 0xcb6 <turn_right>
     efa:	12 b8       	out	0x02, r1	; 2
	stop();
	
	
	//checks for high rise or lower rise 
	if (type_floor==0)
     efc:	cd 2b       	or	r28, r29
     efe:	09 f0       	breq	.+2      	; 0xf02 <right_place+0x2a>
     f00:	4b c0       	rjmp	.+150    	; 0xf98 <right_place+0xc0>
	{
		//lower rise
		
		  
		  //arms moves
		  for (i=0;i<=100;i++)
     f02:	10 92 7e 02 	sts	0x027E, r1
     f06:	10 92 7d 02 	sts	0x027D, r1
     f0a:	80 e0       	ldi	r24, 0x00	; 0
		  {
			  servo_2(i);
     f0c:	02 dc       	rcall	.-2044   	; 0x712 <servo_2>
     f0e:	8f ef       	ldi	r24, 0xFF	; 255
     f10:	9f e8       	ldi	r25, 0x8F	; 143
     f12:	01 97       	sbiw	r24, 0x01	; 1
     f14:	f1 f7       	brne	.-4      	; 0xf12 <right_place+0x3a>
     f16:	00 c0       	rjmp	.+0      	; 0xf18 <right_place+0x40>
     f18:	00 00       	nop
	{
		//lower rise
		
		  
		  //arms moves
		  for (i=0;i<=100;i++)
     f1a:	80 91 7d 02 	lds	r24, 0x027D
     f1e:	90 91 7e 02 	lds	r25, 0x027E
     f22:	01 96       	adiw	r24, 0x01	; 1
     f24:	90 93 7e 02 	sts	0x027E, r25
     f28:	80 93 7d 02 	sts	0x027D, r24
     f2c:	85 36       	cpi	r24, 0x65	; 101
     f2e:	91 05       	cpc	r25, r1
     f30:	6c f3       	brlt	.-38     	; 0xf0c <right_place+0x34>
		  {
			  servo_2(i);
			  _delay_ms(10);
		  }
		  //gripper open slowly
		  for (i=120;i>=0;i--)
     f32:	88 e7       	ldi	r24, 0x78	; 120
     f34:	90 e0       	ldi	r25, 0x00	; 0
     f36:	90 93 7e 02 	sts	0x027E, r25
     f3a:	80 93 7d 02 	sts	0x027D, r24
		  {
			  servo_1(0);
     f3e:	80 e0       	ldi	r24, 0x00	; 0
     f40:	cf db       	rcall	.-2146   	; 0x6e0 <servo_1>
     f42:	8f ef       	ldi	r24, 0xFF	; 255
     f44:	9f e8       	ldi	r25, 0x8F	; 143
     f46:	01 97       	sbiw	r24, 0x01	; 1
     f48:	f1 f7       	brne	.-4      	; 0xf46 <right_place+0x6e>
     f4a:	00 c0       	rjmp	.+0      	; 0xf4c <right_place+0x74>
     f4c:	00 00       	nop
		  {
			  servo_2(i);
			  _delay_ms(10);
		  }
		  //gripper open slowly
		  for (i=120;i>=0;i--)
     f4e:	80 91 7d 02 	lds	r24, 0x027D
     f52:	90 91 7e 02 	lds	r25, 0x027E
     f56:	01 97       	sbiw	r24, 0x01	; 1
     f58:	90 93 7e 02 	sts	0x027E, r25
     f5c:	80 93 7d 02 	sts	0x027D, r24
     f60:	99 23       	and	r25, r25
     f62:	6c f7       	brge	.-38     	; 0xf3e <right_place+0x66>
		  {
			  servo_1(0);
			  _delay_ms(10);
		  }
		  //arms moves back to initial position
		  for (i=100;i>=0;i--)
     f64:	84 e6       	ldi	r24, 0x64	; 100
     f66:	90 e0       	ldi	r25, 0x00	; 0
     f68:	90 93 7e 02 	sts	0x027E, r25
     f6c:	80 93 7d 02 	sts	0x027D, r24
		  {
			  servo_2(i);
     f70:	d0 db       	rcall	.-2144   	; 0x712 <servo_2>
     f72:	8f ef       	ldi	r24, 0xFF	; 255
     f74:	9f e8       	ldi	r25, 0x8F	; 143
     f76:	01 97       	sbiw	r24, 0x01	; 1
     f78:	f1 f7       	brne	.-4      	; 0xf76 <right_place+0x9e>
     f7a:	00 c0       	rjmp	.+0      	; 0xf7c <right_place+0xa4>
     f7c:	00 00       	nop
		  {
			  servo_1(0);
			  _delay_ms(10);
		  }
		  //arms moves back to initial position
		  for (i=100;i>=0;i--)
     f7e:	80 91 7d 02 	lds	r24, 0x027D
     f82:	90 91 7e 02 	lds	r25, 0x027E
     f86:	01 97       	sbiw	r24, 0x01	; 1
     f88:	90 93 7e 02 	sts	0x027E, r25
     f8c:	80 93 7d 02 	sts	0x027D, r24
     f90:	99 23       	and	r25, r25
     f92:	0c f4       	brge	.+2      	; 0xf96 <right_place+0xbe>
     f94:	4a c0       	rjmp	.+148    	; 0x102a <right_place+0x152>
     f96:	ec cf       	rjmp	.-40     	; 0xf70 <right_place+0x98>
	} 
	else
	{  //high rise 
		
		//arm moves 
		for (i=0;i<=50;i++)
     f98:	10 92 7e 02 	sts	0x027E, r1
     f9c:	10 92 7d 02 	sts	0x027D, r1
     fa0:	80 e0       	ldi	r24, 0x00	; 0
		{
			servo_2(i);
     fa2:	b7 db       	rcall	.-2194   	; 0x712 <servo_2>
     fa4:	8f ef       	ldi	r24, 0xFF	; 255
     fa6:	9f e8       	ldi	r25, 0x8F	; 143
     fa8:	01 97       	sbiw	r24, 0x01	; 1
     faa:	f1 f7       	brne	.-4      	; 0xfa8 <right_place+0xd0>
     fac:	00 c0       	rjmp	.+0      	; 0xfae <right_place+0xd6>
     fae:	00 00       	nop
	} 
	else
	{  //high rise 
		
		//arm moves 
		for (i=0;i<=50;i++)
     fb0:	80 91 7d 02 	lds	r24, 0x027D
     fb4:	90 91 7e 02 	lds	r25, 0x027E
     fb8:	01 96       	adiw	r24, 0x01	; 1
     fba:	90 93 7e 02 	sts	0x027E, r25
     fbe:	80 93 7d 02 	sts	0x027D, r24
     fc2:	83 33       	cpi	r24, 0x33	; 51
     fc4:	91 05       	cpc	r25, r1
     fc6:	6c f3       	brlt	.-38     	; 0xfa2 <right_place+0xca>
		{
			servo_2(i);
			_delay_ms(10);
		}
		//gripper opens 
		 for (i=120;i>=0;i--)
     fc8:	88 e7       	ldi	r24, 0x78	; 120
     fca:	90 e0       	ldi	r25, 0x00	; 0
     fcc:	90 93 7e 02 	sts	0x027E, r25
     fd0:	80 93 7d 02 	sts	0x027D, r24
		 {
			 servo_1(0);
     fd4:	80 e0       	ldi	r24, 0x00	; 0
     fd6:	84 db       	rcall	.-2296   	; 0x6e0 <servo_1>
     fd8:	8f ef       	ldi	r24, 0xFF	; 255
     fda:	9f e8       	ldi	r25, 0x8F	; 143
     fdc:	01 97       	sbiw	r24, 0x01	; 1
     fde:	f1 f7       	brne	.-4      	; 0xfdc <right_place+0x104>
     fe0:	00 c0       	rjmp	.+0      	; 0xfe2 <right_place+0x10a>
     fe2:	00 00       	nop
		{
			servo_2(i);
			_delay_ms(10);
		}
		//gripper opens 
		 for (i=120;i>=0;i--)
     fe4:	80 91 7d 02 	lds	r24, 0x027D
     fe8:	90 91 7e 02 	lds	r25, 0x027E
     fec:	01 97       	sbiw	r24, 0x01	; 1
     fee:	90 93 7e 02 	sts	0x027E, r25
     ff2:	80 93 7d 02 	sts	0x027D, r24
     ff6:	99 23       	and	r25, r25
     ff8:	6c f7       	brge	.-38     	; 0xfd4 <right_place+0xfc>
		 {
			 servo_1(0);
			 _delay_ms(10);
		 }
		//arm back to initial position  
		for (i=50;i>=0;i--)
     ffa:	82 e3       	ldi	r24, 0x32	; 50
     ffc:	90 e0       	ldi	r25, 0x00	; 0
     ffe:	90 93 7e 02 	sts	0x027E, r25
    1002:	80 93 7d 02 	sts	0x027D, r24
		{
			servo_2(i);
    1006:	85 db       	rcall	.-2294   	; 0x712 <servo_2>
    1008:	8f ef       	ldi	r24, 0xFF	; 255
    100a:	9f e8       	ldi	r25, 0x8F	; 143
    100c:	01 97       	sbiw	r24, 0x01	; 1
    100e:	f1 f7       	brne	.-4      	; 0x100c <right_place+0x134>
    1010:	00 c0       	rjmp	.+0      	; 0x1012 <right_place+0x13a>
    1012:	00 00       	nop
		 {
			 servo_1(0);
			 _delay_ms(10);
		 }
		//arm back to initial position  
		for (i=50;i>=0;i--)
    1014:	80 91 7d 02 	lds	r24, 0x027D
    1018:	90 91 7e 02 	lds	r25, 0x027E
    101c:	01 97       	sbiw	r24, 0x01	; 1
    101e:	90 93 7e 02 	sts	0x027E, r25
    1022:	80 93 7d 02 	sts	0x027D, r24
    1026:	99 23       	and	r25, r25
    1028:	74 f7       	brge	.-36     	; 0x1006 <right_place+0x12e>
			_delay_ms(10);
		}
	}
	 
	//sets servo free 
	servo_1_free();
    102a:	8c db       	rcall	.-2280   	; 0x744 <servo_1_free>
	servo_2_free();
    102c:	92 db       	rcall	.-2268   	; 0x752 <servo_2_free>
	
	//moves out of black line 
	backward_by_count(100,130,100);
    102e:	44 e6       	ldi	r20, 0x64	; 100
    1030:	50 e0       	ldi	r21, 0x00	; 0
    1032:	62 e8       	ldi	r22, 0x82	; 130
    1034:	70 e0       	ldi	r23, 0x00	; 0
    1036:	84 e6       	ldi	r24, 0x64	; 100
    1038:	90 e0       	ldi	r25, 0x00	; 0
    103a:	84 dc       	rcall	.-1784   	; 0x944 <backward_by_count>
	//turn right
	turn_left(130,130);
    103c:	62 e8       	ldi	r22, 0x82	; 130
    103e:	70 e0       	ldi	r23, 0x00	; 0
    1040:	82 e8       	ldi	r24, 0x82	; 130
    1042:	90 e0       	ldi	r25, 0x00	; 0
    1044:	f7 dd       	rcall	.-1042   	; 0xc34 <turn_left>

}
    1046:	df 91       	pop	r29
    1048:	cf 91       	pop	r28
    104a:	08 95       	ret

0000104c <left_place>:
                by check whether high rise or low rise ,takes right turn to be in current direction 
*Example call : left_place(1); for high rise ,left_place(0); for low rise
*/

void left_place( int type_floor)
{
    104c:	cf 93       	push	r28
    104e:	df 93       	push	r29
    1050:	ec 01       	movw	r28, r24
	forward_by_count(100,110,110);
    1052:	2e e6       	ldi	r18, 0x6E	; 110
    1054:	30 e0       	ldi	r19, 0x00	; 0
    1056:	4e e6       	ldi	r20, 0x6E	; 110
    1058:	50 e0       	ldi	r21, 0x00	; 0
    105a:	64 e6       	ldi	r22, 0x64	; 100
    105c:	70 e0       	ldi	r23, 0x00	; 0
    105e:	80 e0       	ldi	r24, 0x00	; 0
    1060:	90 e0       	ldi	r25, 0x00	; 0
    1062:	00 dc       	rcall	.-2048   	; 0x864 <forward_by_count>
	//takes left
	turn_left(130,130);
    1064:	62 e8       	ldi	r22, 0x82	; 130
    1066:	70 e0       	ldi	r23, 0x00	; 0
    1068:	82 e8       	ldi	r24, 0x82	; 130
    106a:	90 e0       	ldi	r25, 0x00	; 0
    106c:	e3 dd       	rcall	.-1082   	; 0xc34 <turn_left>
    106e:	12 b8       	out	0x02, r1	; 2
	stop();
	 
	
	//checks for high rise or lower rise
	if (type_floor==0)
    1070:	cd 2b       	or	r28, r29
    1072:	09 f0       	breq	.+2      	; 0x1076 <left_place+0x2a>
    1074:	4b c0       	rjmp	.+150    	; 0x110c <left_place+0xc0>
	{
		//lower rise
		
		//arms moves 
		for (i=0;i<=100;i++)
    1076:	10 92 7e 02 	sts	0x027E, r1
    107a:	10 92 7d 02 	sts	0x027D, r1
    107e:	80 e0       	ldi	r24, 0x00	; 0
		{
			servo_2(i);
    1080:	48 db       	rcall	.-2416   	; 0x712 <servo_2>
    1082:	8f ef       	ldi	r24, 0xFF	; 255
    1084:	9f e8       	ldi	r25, 0x8F	; 143
    1086:	01 97       	sbiw	r24, 0x01	; 1
    1088:	f1 f7       	brne	.-4      	; 0x1086 <left_place+0x3a>
    108a:	00 c0       	rjmp	.+0      	; 0x108c <left_place+0x40>
    108c:	00 00       	nop
	if (type_floor==0)
	{
		//lower rise
		
		//arms moves 
		for (i=0;i<=100;i++)
    108e:	80 91 7d 02 	lds	r24, 0x027D
    1092:	90 91 7e 02 	lds	r25, 0x027E
    1096:	01 96       	adiw	r24, 0x01	; 1
    1098:	90 93 7e 02 	sts	0x027E, r25
    109c:	80 93 7d 02 	sts	0x027D, r24
    10a0:	85 36       	cpi	r24, 0x65	; 101
    10a2:	91 05       	cpc	r25, r1
    10a4:	6c f3       	brlt	.-38     	; 0x1080 <left_place+0x34>
		{
			servo_2(i);
			_delay_ms(10);
		}
		//gripper open slowly 
		for (i=120;i>=0;i--)
    10a6:	88 e7       	ldi	r24, 0x78	; 120
    10a8:	90 e0       	ldi	r25, 0x00	; 0
    10aa:	90 93 7e 02 	sts	0x027E, r25
    10ae:	80 93 7d 02 	sts	0x027D, r24
		{
			servo_1(0);
    10b2:	80 e0       	ldi	r24, 0x00	; 0
    10b4:	15 db       	rcall	.-2518   	; 0x6e0 <servo_1>
    10b6:	8f ef       	ldi	r24, 0xFF	; 255
    10b8:	9f e8       	ldi	r25, 0x8F	; 143
    10ba:	01 97       	sbiw	r24, 0x01	; 1
    10bc:	f1 f7       	brne	.-4      	; 0x10ba <left_place+0x6e>
    10be:	00 c0       	rjmp	.+0      	; 0x10c0 <left_place+0x74>
    10c0:	00 00       	nop
		{
			servo_2(i);
			_delay_ms(10);
		}
		//gripper open slowly 
		for (i=120;i>=0;i--)
    10c2:	80 91 7d 02 	lds	r24, 0x027D
    10c6:	90 91 7e 02 	lds	r25, 0x027E
    10ca:	01 97       	sbiw	r24, 0x01	; 1
    10cc:	90 93 7e 02 	sts	0x027E, r25
    10d0:	80 93 7d 02 	sts	0x027D, r24
    10d4:	99 23       	and	r25, r25
    10d6:	6c f7       	brge	.-38     	; 0x10b2 <left_place+0x66>
		{
			servo_1(0);
			_delay_ms(10);
		}
		//arms moves back to initial position 
		for (i=100;i>=0;i--)
    10d8:	84 e6       	ldi	r24, 0x64	; 100
    10da:	90 e0       	ldi	r25, 0x00	; 0
    10dc:	90 93 7e 02 	sts	0x027E, r25
    10e0:	80 93 7d 02 	sts	0x027D, r24
		{
			servo_2(i);
    10e4:	16 db       	rcall	.-2516   	; 0x712 <servo_2>
    10e6:	8f ef       	ldi	r24, 0xFF	; 255
    10e8:	9f e8       	ldi	r25, 0x8F	; 143
    10ea:	01 97       	sbiw	r24, 0x01	; 1
    10ec:	f1 f7       	brne	.-4      	; 0x10ea <left_place+0x9e>
    10ee:	00 c0       	rjmp	.+0      	; 0x10f0 <left_place+0xa4>
    10f0:	00 00       	nop
		{
			servo_1(0);
			_delay_ms(10);
		}
		//arms moves back to initial position 
		for (i=100;i>=0;i--)
    10f2:	80 91 7d 02 	lds	r24, 0x027D
    10f6:	90 91 7e 02 	lds	r25, 0x027E
    10fa:	01 97       	sbiw	r24, 0x01	; 1
    10fc:	90 93 7e 02 	sts	0x027E, r25
    1100:	80 93 7d 02 	sts	0x027D, r24
    1104:	99 23       	and	r25, r25
    1106:	0c f4       	brge	.+2      	; 0x110a <left_place+0xbe>
    1108:	4a c0       	rjmp	.+148    	; 0x119e <left_place+0x152>
    110a:	ec cf       	rjmp	.-40     	; 0x10e4 <left_place+0x98>
	}
	else
	{  //high rise
		
		//arm moves
		for (i=0;i<=50;i++)
    110c:	10 92 7e 02 	sts	0x027E, r1
    1110:	10 92 7d 02 	sts	0x027D, r1
    1114:	80 e0       	ldi	r24, 0x00	; 0
		{
			servo_2(i);
    1116:	fd da       	rcall	.-2566   	; 0x712 <servo_2>
    1118:	8f ef       	ldi	r24, 0xFF	; 255
    111a:	9f e8       	ldi	r25, 0x8F	; 143
    111c:	01 97       	sbiw	r24, 0x01	; 1
    111e:	f1 f7       	brne	.-4      	; 0x111c <left_place+0xd0>
    1120:	00 c0       	rjmp	.+0      	; 0x1122 <left_place+0xd6>
    1122:	00 00       	nop
	}
	else
	{  //high rise
		
		//arm moves
		for (i=0;i<=50;i++)
    1124:	80 91 7d 02 	lds	r24, 0x027D
    1128:	90 91 7e 02 	lds	r25, 0x027E
    112c:	01 96       	adiw	r24, 0x01	; 1
    112e:	90 93 7e 02 	sts	0x027E, r25
    1132:	80 93 7d 02 	sts	0x027D, r24
    1136:	83 33       	cpi	r24, 0x33	; 51
    1138:	91 05       	cpc	r25, r1
    113a:	6c f3       	brlt	.-38     	; 0x1116 <left_place+0xca>
		{
			servo_2(i);
			_delay_ms(10);
		}
		//gripper opens
		 for (i=120;i>=0;i--)
    113c:	88 e7       	ldi	r24, 0x78	; 120
    113e:	90 e0       	ldi	r25, 0x00	; 0
    1140:	90 93 7e 02 	sts	0x027E, r25
    1144:	80 93 7d 02 	sts	0x027D, r24
		 {
			 servo_1(0);
    1148:	80 e0       	ldi	r24, 0x00	; 0
    114a:	ca da       	rcall	.-2668   	; 0x6e0 <servo_1>
    114c:	8f ef       	ldi	r24, 0xFF	; 255
    114e:	9f e8       	ldi	r25, 0x8F	; 143
    1150:	01 97       	sbiw	r24, 0x01	; 1
    1152:	f1 f7       	brne	.-4      	; 0x1150 <left_place+0x104>
    1154:	00 c0       	rjmp	.+0      	; 0x1156 <left_place+0x10a>
    1156:	00 00       	nop
		{
			servo_2(i);
			_delay_ms(10);
		}
		//gripper opens
		 for (i=120;i>=0;i--)
    1158:	80 91 7d 02 	lds	r24, 0x027D
    115c:	90 91 7e 02 	lds	r25, 0x027E
    1160:	01 97       	sbiw	r24, 0x01	; 1
    1162:	90 93 7e 02 	sts	0x027E, r25
    1166:	80 93 7d 02 	sts	0x027D, r24
    116a:	99 23       	and	r25, r25
    116c:	6c f7       	brge	.-38     	; 0x1148 <left_place+0xfc>
		 {
			 servo_1(0);
			 _delay_ms(10);
		 }
		//arm back to initial position
		for (i=50;i>=0;i--)
    116e:	82 e3       	ldi	r24, 0x32	; 50
    1170:	90 e0       	ldi	r25, 0x00	; 0
    1172:	90 93 7e 02 	sts	0x027E, r25
    1176:	80 93 7d 02 	sts	0x027D, r24
		{
			servo_2(i);
    117a:	cb da       	rcall	.-2666   	; 0x712 <servo_2>
    117c:	8f ef       	ldi	r24, 0xFF	; 255
    117e:	9f e8       	ldi	r25, 0x8F	; 143
    1180:	01 97       	sbiw	r24, 0x01	; 1
    1182:	f1 f7       	brne	.-4      	; 0x1180 <left_place+0x134>
    1184:	00 c0       	rjmp	.+0      	; 0x1186 <left_place+0x13a>
    1186:	00 00       	nop
		 {
			 servo_1(0);
			 _delay_ms(10);
		 }
		//arm back to initial position
		for (i=50;i>=0;i--)
    1188:	80 91 7d 02 	lds	r24, 0x027D
    118c:	90 91 7e 02 	lds	r25, 0x027E
    1190:	01 97       	sbiw	r24, 0x01	; 1
    1192:	90 93 7e 02 	sts	0x027E, r25
    1196:	80 93 7d 02 	sts	0x027D, r24
    119a:	99 23       	and	r25, r25
    119c:	74 f7       	brge	.-36     	; 0x117a <left_place+0x12e>
			_delay_ms(10);
		}
	}
	
	//sets servo free
	servo_1_free();
    119e:	d2 da       	rcall	.-2652   	; 0x744 <servo_1_free>
	servo_2_free();
    11a0:	d8 da       	rcall	.-2640   	; 0x752 <servo_2_free>
	
	//turn left
	turn_right(130,130);
    11a2:	62 e8       	ldi	r22, 0x82	; 130
    11a4:	70 e0       	ldi	r23, 0x00	; 0
    11a6:	82 e8       	ldi	r24, 0x82	; 130
    11a8:	90 e0       	ldi	r25, 0x00	; 0
    11aa:	85 dd       	rcall	.-1270   	; 0xcb6 <turn_right>
	
}
    11ac:	df 91       	pop	r29
    11ae:	cf 91       	pop	r28
    11b0:	08 95       	ret

000011b2 <staright_place>:
*Logic        : function to place  CM  house when bot is at same direction to that of house
*Example call : staright_place(1); for high rise ,starigh_place(0);for low rise 
*/

void staright_place(int floor_type)
{   
    11b2:	cf 93       	push	r28
    11b4:	df 93       	push	r29
    11b6:	ec 01       	movw	r28, r24
	//moves forward 
   	forward_by_count(50,150,150);
    11b8:	26 e9       	ldi	r18, 0x96	; 150
    11ba:	30 e0       	ldi	r19, 0x00	; 0
    11bc:	46 e9       	ldi	r20, 0x96	; 150
    11be:	50 e0       	ldi	r21, 0x00	; 0
    11c0:	62 e3       	ldi	r22, 0x32	; 50
    11c2:	70 e0       	ldi	r23, 0x00	; 0
    11c4:	80 e0       	ldi	r24, 0x00	; 0
    11c6:	90 e0       	ldi	r25, 0x00	; 0
    11c8:	4d db       	rcall	.-2406   	; 0x864 <forward_by_count>
	
	if (floor_type==0)
    11ca:	cd 2b       	or	r28, r29
    11cc:	09 f0       	breq	.+2      	; 0x11d0 <staright_place+0x1e>
    11ce:	54 c0       	rjmp	.+168    	; 0x1278 <staright_place+0xc6>
	{   
		//lower rise 
		
		 // moves forward
		forward_by_count(100,150,150);
    11d0:	26 e9       	ldi	r18, 0x96	; 150
    11d2:	30 e0       	ldi	r19, 0x00	; 0
    11d4:	46 e9       	ldi	r20, 0x96	; 150
    11d6:	50 e0       	ldi	r21, 0x00	; 0
    11d8:	64 e6       	ldi	r22, 0x64	; 100
    11da:	70 e0       	ldi	r23, 0x00	; 0
    11dc:	80 e0       	ldi	r24, 0x00	; 0
    11de:	90 e0       	ldi	r25, 0x00	; 0
    11e0:	41 db       	rcall	.-2430   	; 0x864 <forward_by_count>
		
		//arms moves
		for (i=0;i<=100;i++)
    11e2:	10 92 7e 02 	sts	0x027E, r1
    11e6:	10 92 7d 02 	sts	0x027D, r1
    11ea:	80 e0       	ldi	r24, 0x00	; 0
		{
			servo_2(i);
    11ec:	92 da       	rcall	.-2780   	; 0x712 <servo_2>
    11ee:	8f ef       	ldi	r24, 0xFF	; 255
    11f0:	9f e8       	ldi	r25, 0x8F	; 143
    11f2:	01 97       	sbiw	r24, 0x01	; 1
    11f4:	f1 f7       	brne	.-4      	; 0x11f2 <staright_place+0x40>
    11f6:	00 c0       	rjmp	.+0      	; 0x11f8 <staright_place+0x46>
    11f8:	00 00       	nop
		
		 // moves forward
		forward_by_count(100,150,150);
		
		//arms moves
		for (i=0;i<=100;i++)
    11fa:	80 91 7d 02 	lds	r24, 0x027D
    11fe:	90 91 7e 02 	lds	r25, 0x027E
    1202:	01 96       	adiw	r24, 0x01	; 1
    1204:	90 93 7e 02 	sts	0x027E, r25
    1208:	80 93 7d 02 	sts	0x027D, r24
    120c:	85 36       	cpi	r24, 0x65	; 101
    120e:	91 05       	cpc	r25, r1
    1210:	6c f3       	brlt	.-38     	; 0x11ec <staright_place+0x3a>
		{
			servo_2(i);
			_delay_ms(10);
		}
		//gripper open slowly
		for (i=120;i>=0;i--)
    1212:	88 e7       	ldi	r24, 0x78	; 120
    1214:	90 e0       	ldi	r25, 0x00	; 0
    1216:	90 93 7e 02 	sts	0x027E, r25
    121a:	80 93 7d 02 	sts	0x027D, r24
		{
			servo_1(0);
    121e:	80 e0       	ldi	r24, 0x00	; 0
    1220:	5f da       	rcall	.-2882   	; 0x6e0 <servo_1>
    1222:	8f ef       	ldi	r24, 0xFF	; 255
    1224:	9f e8       	ldi	r25, 0x8F	; 143
    1226:	01 97       	sbiw	r24, 0x01	; 1
    1228:	f1 f7       	brne	.-4      	; 0x1226 <staright_place+0x74>
    122a:	00 c0       	rjmp	.+0      	; 0x122c <staright_place+0x7a>
    122c:	00 00       	nop
		{
			servo_2(i);
			_delay_ms(10);
		}
		//gripper open slowly
		for (i=120;i>=0;i--)
    122e:	80 91 7d 02 	lds	r24, 0x027D
    1232:	90 91 7e 02 	lds	r25, 0x027E
    1236:	01 97       	sbiw	r24, 0x01	; 1
    1238:	90 93 7e 02 	sts	0x027E, r25
    123c:	80 93 7d 02 	sts	0x027D, r24
    1240:	99 23       	and	r25, r25
    1242:	6c f7       	brge	.-38     	; 0x121e <staright_place+0x6c>
		{
			servo_1(0);
			_delay_ms(10);
		}
		//arms moves back to initial position
		for (i=100;i>=0;i--)
    1244:	84 e6       	ldi	r24, 0x64	; 100
    1246:	90 e0       	ldi	r25, 0x00	; 0
    1248:	90 93 7e 02 	sts	0x027E, r25
    124c:	80 93 7d 02 	sts	0x027D, r24
		{
			servo_2(i);
    1250:	60 da       	rcall	.-2880   	; 0x712 <servo_2>
    1252:	8f ef       	ldi	r24, 0xFF	; 255
    1254:	9f e8       	ldi	r25, 0x8F	; 143
    1256:	01 97       	sbiw	r24, 0x01	; 1
    1258:	f1 f7       	brne	.-4      	; 0x1256 <staright_place+0xa4>
    125a:	00 c0       	rjmp	.+0      	; 0x125c <staright_place+0xaa>
    125c:	00 00       	nop
		{
			servo_1(0);
			_delay_ms(10);
		}
		//arms moves back to initial position
		for (i=100;i>=0;i--)
    125e:	80 91 7d 02 	lds	r24, 0x027D
    1262:	90 91 7e 02 	lds	r25, 0x027E
    1266:	01 97       	sbiw	r24, 0x01	; 1
    1268:	90 93 7e 02 	sts	0x027E, r25
    126c:	80 93 7d 02 	sts	0x027D, r24
    1270:	99 23       	and	r25, r25
    1272:	0c f4       	brge	.+2      	; 0x1276 <staright_place+0xc4>
    1274:	4a c0       	rjmp	.+148    	; 0x130a <staright_place+0x158>
    1276:	ec cf       	rjmp	.-40     	; 0x1250 <staright_place+0x9e>
	}
	else 
	{
		//high rise 
		//arm moves 
	   for (i=0;i<=60;i++)
    1278:	10 92 7e 02 	sts	0x027E, r1
    127c:	10 92 7d 02 	sts	0x027D, r1
    1280:	80 e0       	ldi	r24, 0x00	; 0
	   {
		   servo_2(i);
    1282:	47 da       	rcall	.-2930   	; 0x712 <servo_2>
    1284:	8f ef       	ldi	r24, 0xFF	; 255
    1286:	9f e8       	ldi	r25, 0x8F	; 143
    1288:	01 97       	sbiw	r24, 0x01	; 1
    128a:	f1 f7       	brne	.-4      	; 0x1288 <staright_place+0xd6>
    128c:	00 c0       	rjmp	.+0      	; 0x128e <staright_place+0xdc>
    128e:	00 00       	nop
	}
	else 
	{
		//high rise 
		//arm moves 
	   for (i=0;i<=60;i++)
    1290:	80 91 7d 02 	lds	r24, 0x027D
    1294:	90 91 7e 02 	lds	r25, 0x027E
    1298:	01 96       	adiw	r24, 0x01	; 1
    129a:	90 93 7e 02 	sts	0x027E, r25
    129e:	80 93 7d 02 	sts	0x027D, r24
    12a2:	8d 33       	cpi	r24, 0x3D	; 61
    12a4:	91 05       	cpc	r25, r1
    12a6:	6c f3       	brlt	.-38     	; 0x1282 <staright_place+0xd0>
	   {
		   servo_2(i);
		   _delay_ms(10);
	   }
	   //gripper opens 
	    for (i=120;i>=0;i--)
    12a8:	88 e7       	ldi	r24, 0x78	; 120
    12aa:	90 e0       	ldi	r25, 0x00	; 0
    12ac:	90 93 7e 02 	sts	0x027E, r25
    12b0:	80 93 7d 02 	sts	0x027D, r24
	    {
		    servo_1(0);
    12b4:	80 e0       	ldi	r24, 0x00	; 0
    12b6:	14 da       	rcall	.-3032   	; 0x6e0 <servo_1>
    12b8:	8f ef       	ldi	r24, 0xFF	; 255
    12ba:	9f e8       	ldi	r25, 0x8F	; 143
    12bc:	01 97       	sbiw	r24, 0x01	; 1
    12be:	f1 f7       	brne	.-4      	; 0x12bc <staright_place+0x10a>
    12c0:	00 c0       	rjmp	.+0      	; 0x12c2 <staright_place+0x110>
    12c2:	00 00       	nop
	   {
		   servo_2(i);
		   _delay_ms(10);
	   }
	   //gripper opens 
	    for (i=120;i>=0;i--)
    12c4:	80 91 7d 02 	lds	r24, 0x027D
    12c8:	90 91 7e 02 	lds	r25, 0x027E
    12cc:	01 97       	sbiw	r24, 0x01	; 1
    12ce:	90 93 7e 02 	sts	0x027E, r25
    12d2:	80 93 7d 02 	sts	0x027D, r24
    12d6:	99 23       	and	r25, r25
    12d8:	6c f7       	brge	.-38     	; 0x12b4 <staright_place+0x102>
		    servo_1(0);
		    _delay_ms(10);
	    }
	   
	   //arm moves to initial position 
	   for (i=60;i>=0;i--)
    12da:	8c e3       	ldi	r24, 0x3C	; 60
    12dc:	90 e0       	ldi	r25, 0x00	; 0
    12de:	90 93 7e 02 	sts	0x027E, r25
    12e2:	80 93 7d 02 	sts	0x027D, r24
	   {
		   servo_2(i);
    12e6:	15 da       	rcall	.-3030   	; 0x712 <servo_2>
    12e8:	8f ef       	ldi	r24, 0xFF	; 255
    12ea:	9f e8       	ldi	r25, 0x8F	; 143
    12ec:	01 97       	sbiw	r24, 0x01	; 1
    12ee:	f1 f7       	brne	.-4      	; 0x12ec <staright_place+0x13a>
    12f0:	00 c0       	rjmp	.+0      	; 0x12f2 <staright_place+0x140>
    12f2:	00 00       	nop
		    servo_1(0);
		    _delay_ms(10);
	    }
	   
	   //arm moves to initial position 
	   for (i=60;i>=0;i--)
    12f4:	80 91 7d 02 	lds	r24, 0x027D
    12f8:	90 91 7e 02 	lds	r25, 0x027E
    12fc:	01 97       	sbiw	r24, 0x01	; 1
    12fe:	90 93 7e 02 	sts	0x027E, r25
    1302:	80 93 7d 02 	sts	0x027D, r24
    1306:	99 23       	and	r25, r25
    1308:	74 f7       	brge	.-36     	; 0x12e6 <staright_place+0x134>
		   _delay_ms(10);
	   }
	}
	
	//sets servo free
	servo_1_free();
    130a:	1c da       	rcall	.-3016   	; 0x744 <servo_1_free>
	servo_2_free();
    130c:	22 da       	rcall	.-3004   	; 0x752 <servo_2_free>
	
	//moves out of line 
	backward_by_count(30,100,100);
    130e:	44 e6       	ldi	r20, 0x64	; 100
    1310:	50 e0       	ldi	r21, 0x00	; 0
    1312:	64 e6       	ldi	r22, 0x64	; 100
    1314:	70 e0       	ldi	r23, 0x00	; 0
    1316:	8e e1       	ldi	r24, 0x1E	; 30
    1318:	90 e0       	ldi	r25, 0x00	; 0
    131a:	14 db       	rcall	.-2520   	; 0x944 <backward_by_count>
	
} 
    131c:	df 91       	pop	r29
    131e:	cf 91       	pop	r28
    1320:	08 95       	ret

00001322 <place_h5>:
                 every time function is called bot moves from east to west ,place the cm then returns back.  
*Example call : void place_h5(0)
*/

void place_h5(int floor_type)
{
    1322:	cf 93       	push	r28
    1324:	df 93       	push	r29
    1326:	ec 01       	movw	r28, r24
	//turns sharp left
	turn_left(0,100);
    1328:	64 e6       	ldi	r22, 0x64	; 100
    132a:	70 e0       	ldi	r23, 0x00	; 0
    132c:	80 e0       	ldi	r24, 0x00	; 0
    132e:	90 e0       	ldi	r25, 0x00	; 0
    1330:	81 dc       	rcall	.-1790   	; 0xc34 <turn_left>
    1332:	12 b8       	out	0x02, r1	; 2
	stop();
	
	//bot is on black part moves left to find white line 
	find_left(0,100);
    1334:	64 e6       	ldi	r22, 0x64	; 100
    1336:	70 e0       	ldi	r23, 0x00	; 0
    1338:	80 e0       	ldi	r24, 0x00	; 0
    133a:	90 e0       	ldi	r25, 0x00	; 0
    133c:	fb dc       	rcall	.-1546   	; 0xd34 <find_left>
    133e:	12 b8       	out	0x02, r1	; 2
    1340:	2f ef       	ldi	r18, 0xFF	; 255
    1342:	8f e7       	ldi	r24, 0x7F	; 127
    1344:	94 e0       	ldi	r25, 0x04	; 4
    1346:	21 50       	subi	r18, 0x01	; 1
    1348:	80 40       	sbci	r24, 0x00	; 0
    134a:	90 40       	sbci	r25, 0x00	; 0
    134c:	e1 f7       	brne	.-8      	; 0x1346 <place_h5+0x24>
    134e:	00 c0       	rjmp	.+0      	; 0x1350 <place_h5+0x2e>
    1350:	00 00       	nop
	stop();
	_delay_ms(100);
	
	//follows white line  
	follow_black();
    1352:	f7 db       	rcall	.-2066   	; 0xb42 <follow_black>
    1354:	12 b8       	out	0x02, r1	; 2
	stop();
	//moves forward by 150 counts 
	forward_by_count(150,100,100);
    1356:	24 e6       	ldi	r18, 0x64	; 100
    1358:	30 e0       	ldi	r19, 0x00	; 0
    135a:	44 e6       	ldi	r20, 0x64	; 100
    135c:	50 e0       	ldi	r21, 0x00	; 0
    135e:	66 e9       	ldi	r22, 0x96	; 150
    1360:	70 e0       	ldi	r23, 0x00	; 0
    1362:	80 e0       	ldi	r24, 0x00	; 0
    1364:	90 e0       	ldi	r25, 0x00	; 0
    1366:	7e da       	rcall	.-2820   	; 0x864 <forward_by_count>
	
	//turns left 
	left_by_count(800,100,100);
    1368:	24 e6       	ldi	r18, 0x64	; 100
    136a:	30 e0       	ldi	r19, 0x00	; 0
    136c:	44 e6       	ldi	r20, 0x64	; 100
    136e:	50 e0       	ldi	r21, 0x00	; 0
    1370:	60 e2       	ldi	r22, 0x20	; 32
    1372:	73 e0       	ldi	r23, 0x03	; 3
    1374:	80 e0       	ldi	r24, 0x00	; 0
    1376:	90 e0       	ldi	r25, 0x00	; 0
    1378:	ad da       	rcall	.-2726   	; 0x8d4 <left_by_count>
	
	//moves back 
	backward_by_count(300,100,100);
    137a:	44 e6       	ldi	r20, 0x64	; 100
    137c:	50 e0       	ldi	r21, 0x00	; 0
    137e:	64 e6       	ldi	r22, 0x64	; 100
    1380:	70 e0       	ldi	r23, 0x00	; 0
    1382:	8c e2       	ldi	r24, 0x2C	; 44
    1384:	91 e0       	ldi	r25, 0x01	; 1
    1386:	de da       	rcall	.-2628   	; 0x944 <backward_by_count>
      
	  //place the cm 
	  if (floor_type==0)
    1388:	cd 2b       	or	r28, r29
    138a:	09 f0       	breq	.+2      	; 0x138e <place_h5+0x6c>
    138c:	4b c0       	rjmp	.+150    	; 0x1424 <place_h5+0x102>
      {
	      //lower rise
	      
	      //arms moves
	      for (i=0;i<=100;i++)
    138e:	10 92 7e 02 	sts	0x027E, r1
    1392:	10 92 7d 02 	sts	0x027D, r1
    1396:	80 e0       	ldi	r24, 0x00	; 0
	      {
		      servo_2(i);
    1398:	bc d9       	rcall	.-3208   	; 0x712 <servo_2>
    139a:	8f ef       	ldi	r24, 0xFF	; 255
    139c:	9f e8       	ldi	r25, 0x8F	; 143
    139e:	01 97       	sbiw	r24, 0x01	; 1
    13a0:	f1 f7       	brne	.-4      	; 0x139e <place_h5+0x7c>
    13a2:	00 c0       	rjmp	.+0      	; 0x13a4 <place_h5+0x82>
    13a4:	00 00       	nop
	  if (floor_type==0)
      {
	      //lower rise
	      
	      //arms moves
	      for (i=0;i<=100;i++)
    13a6:	80 91 7d 02 	lds	r24, 0x027D
    13aa:	90 91 7e 02 	lds	r25, 0x027E
    13ae:	01 96       	adiw	r24, 0x01	; 1
    13b0:	90 93 7e 02 	sts	0x027E, r25
    13b4:	80 93 7d 02 	sts	0x027D, r24
    13b8:	85 36       	cpi	r24, 0x65	; 101
    13ba:	91 05       	cpc	r25, r1
    13bc:	6c f3       	brlt	.-38     	; 0x1398 <place_h5+0x76>
	      {
		      servo_2(i);
		      _delay_ms(10);
	      }
	      //gripper open slowly
	      for (i=120;i>=0;i--)
    13be:	88 e7       	ldi	r24, 0x78	; 120
    13c0:	90 e0       	ldi	r25, 0x00	; 0
    13c2:	90 93 7e 02 	sts	0x027E, r25
    13c6:	80 93 7d 02 	sts	0x027D, r24
	      {
		      servo_1(0);
    13ca:	80 e0       	ldi	r24, 0x00	; 0
    13cc:	89 d9       	rcall	.-3310   	; 0x6e0 <servo_1>
    13ce:	8f ef       	ldi	r24, 0xFF	; 255
    13d0:	9f e8       	ldi	r25, 0x8F	; 143
    13d2:	01 97       	sbiw	r24, 0x01	; 1
    13d4:	f1 f7       	brne	.-4      	; 0x13d2 <place_h5+0xb0>
    13d6:	00 c0       	rjmp	.+0      	; 0x13d8 <place_h5+0xb6>
    13d8:	00 00       	nop
	      {
		      servo_2(i);
		      _delay_ms(10);
	      }
	      //gripper open slowly
	      for (i=120;i>=0;i--)
    13da:	80 91 7d 02 	lds	r24, 0x027D
    13de:	90 91 7e 02 	lds	r25, 0x027E
    13e2:	01 97       	sbiw	r24, 0x01	; 1
    13e4:	90 93 7e 02 	sts	0x027E, r25
    13e8:	80 93 7d 02 	sts	0x027D, r24
    13ec:	99 23       	and	r25, r25
    13ee:	6c f7       	brge	.-38     	; 0x13ca <place_h5+0xa8>
	      {
		      servo_1(0);
		      _delay_ms(10);
	      }
	      //arms moves back to initial position
	      for (i=100;i>=0;i--)
    13f0:	84 e6       	ldi	r24, 0x64	; 100
    13f2:	90 e0       	ldi	r25, 0x00	; 0
    13f4:	90 93 7e 02 	sts	0x027E, r25
    13f8:	80 93 7d 02 	sts	0x027D, r24
	      {
		      servo_2(i);
    13fc:	8a d9       	rcall	.-3308   	; 0x712 <servo_2>
    13fe:	8f ef       	ldi	r24, 0xFF	; 255
    1400:	9f e8       	ldi	r25, 0x8F	; 143
    1402:	01 97       	sbiw	r24, 0x01	; 1
    1404:	f1 f7       	brne	.-4      	; 0x1402 <place_h5+0xe0>
    1406:	00 c0       	rjmp	.+0      	; 0x1408 <place_h5+0xe6>
    1408:	00 00       	nop
	      {
		      servo_1(0);
		      _delay_ms(10);
	      }
	      //arms moves back to initial position
	      for (i=100;i>=0;i--)
    140a:	80 91 7d 02 	lds	r24, 0x027D
    140e:	90 91 7e 02 	lds	r25, 0x027E
    1412:	01 97       	sbiw	r24, 0x01	; 1
    1414:	90 93 7e 02 	sts	0x027E, r25
    1418:	80 93 7d 02 	sts	0x027D, r24
    141c:	99 23       	and	r25, r25
    141e:	0c f4       	brge	.+2      	; 0x1422 <place_h5+0x100>
    1420:	4a c0       	rjmp	.+148    	; 0x14b6 <place_h5+0x194>
    1422:	ec cf       	rjmp	.-40     	; 0x13fc <place_h5+0xda>
      }
      else
      {
	      //high rise
	      //arm moves
	      for (i=0;i<=60;i++)
    1424:	10 92 7e 02 	sts	0x027E, r1
    1428:	10 92 7d 02 	sts	0x027D, r1
    142c:	80 e0       	ldi	r24, 0x00	; 0
	      {
		      servo_2(i);
    142e:	71 d9       	rcall	.-3358   	; 0x712 <servo_2>
    1430:	8f ef       	ldi	r24, 0xFF	; 255
    1432:	9f e8       	ldi	r25, 0x8F	; 143
    1434:	01 97       	sbiw	r24, 0x01	; 1
    1436:	f1 f7       	brne	.-4      	; 0x1434 <place_h5+0x112>
    1438:	00 c0       	rjmp	.+0      	; 0x143a <place_h5+0x118>
    143a:	00 00       	nop
      }
      else
      {
	      //high rise
	      //arm moves
	      for (i=0;i<=60;i++)
    143c:	80 91 7d 02 	lds	r24, 0x027D
    1440:	90 91 7e 02 	lds	r25, 0x027E
    1444:	01 96       	adiw	r24, 0x01	; 1
    1446:	90 93 7e 02 	sts	0x027E, r25
    144a:	80 93 7d 02 	sts	0x027D, r24
    144e:	8d 33       	cpi	r24, 0x3D	; 61
    1450:	91 05       	cpc	r25, r1
    1452:	6c f3       	brlt	.-38     	; 0x142e <place_h5+0x10c>
	      {
		      servo_2(i);
		      _delay_ms(10);
	      }
	      //gripper opens
	      for (i=120;i>=0;i--)
    1454:	88 e7       	ldi	r24, 0x78	; 120
    1456:	90 e0       	ldi	r25, 0x00	; 0
    1458:	90 93 7e 02 	sts	0x027E, r25
    145c:	80 93 7d 02 	sts	0x027D, r24
	      {
		      servo_1(0);
    1460:	80 e0       	ldi	r24, 0x00	; 0
    1462:	3e d9       	rcall	.-3460   	; 0x6e0 <servo_1>
    1464:	8f ef       	ldi	r24, 0xFF	; 255
    1466:	9f e8       	ldi	r25, 0x8F	; 143
    1468:	01 97       	sbiw	r24, 0x01	; 1
    146a:	f1 f7       	brne	.-4      	; 0x1468 <place_h5+0x146>
    146c:	00 c0       	rjmp	.+0      	; 0x146e <place_h5+0x14c>
    146e:	00 00       	nop
	      {
		      servo_2(i);
		      _delay_ms(10);
	      }
	      //gripper opens
	      for (i=120;i>=0;i--)
    1470:	80 91 7d 02 	lds	r24, 0x027D
    1474:	90 91 7e 02 	lds	r25, 0x027E
    1478:	01 97       	sbiw	r24, 0x01	; 1
    147a:	90 93 7e 02 	sts	0x027E, r25
    147e:	80 93 7d 02 	sts	0x027D, r24
    1482:	99 23       	and	r25, r25
    1484:	6c f7       	brge	.-38     	; 0x1460 <place_h5+0x13e>
		      servo_1(0);
		      _delay_ms(10);
	      }
	      
	      //arm moves to initial position
	      for (i=60;i>=0;i--)
    1486:	8c e3       	ldi	r24, 0x3C	; 60
    1488:	90 e0       	ldi	r25, 0x00	; 0
    148a:	90 93 7e 02 	sts	0x027E, r25
    148e:	80 93 7d 02 	sts	0x027D, r24
	      {
		      servo_2(i);
    1492:	3f d9       	rcall	.-3458   	; 0x712 <servo_2>
    1494:	8f ef       	ldi	r24, 0xFF	; 255
    1496:	9f e8       	ldi	r25, 0x8F	; 143
    1498:	01 97       	sbiw	r24, 0x01	; 1
    149a:	f1 f7       	brne	.-4      	; 0x1498 <place_h5+0x176>
    149c:	00 c0       	rjmp	.+0      	; 0x149e <place_h5+0x17c>
    149e:	00 00       	nop
		      servo_1(0);
		      _delay_ms(10);
	      }
	      
	      //arm moves to initial position
	      for (i=60;i>=0;i--)
    14a0:	80 91 7d 02 	lds	r24, 0x027D
    14a4:	90 91 7e 02 	lds	r25, 0x027E
    14a8:	01 97       	sbiw	r24, 0x01	; 1
    14aa:	90 93 7e 02 	sts	0x027E, r25
    14ae:	80 93 7d 02 	sts	0x027D, r24
    14b2:	99 23       	and	r25, r25
    14b4:	74 f7       	brge	.-36     	; 0x1492 <place_h5+0x170>
		      _delay_ms(10);
	      }
      }

	//sets servo free
	servo_1_free();
    14b6:	46 d9       	rcall	.-3444   	; 0x744 <servo_1_free>
	servo_2_free();
    14b8:	4c d9       	rcall	.-3432   	; 0x752 <servo_2_free>
	  	
	//finds white line 
	find_left(100,100);
    14ba:	64 e6       	ldi	r22, 0x64	; 100
    14bc:	70 e0       	ldi	r23, 0x00	; 0
    14be:	84 e6       	ldi	r24, 0x64	; 100
    14c0:	90 e0       	ldi	r25, 0x00	; 0
    14c2:	38 dc       	rcall	.-1936   	; 0xd34 <find_left>
    14c4:	12 b8       	out	0x02, r1	; 2
	stop();
	
	//follow white line 
	follow_black();
    14c6:	3d db       	rcall	.-2438   	; 0xb42 <follow_black>
	
	//moves forward by 400 counts 
	forward_by_count(400,100,100);
    14c8:	24 e6       	ldi	r18, 0x64	; 100
    14ca:	30 e0       	ldi	r19, 0x00	; 0
    14cc:	44 e6       	ldi	r20, 0x64	; 100
    14ce:	50 e0       	ldi	r21, 0x00	; 0
    14d0:	60 e9       	ldi	r22, 0x90	; 144
    14d2:	71 e0       	ldi	r23, 0x01	; 1
    14d4:	80 e0       	ldi	r24, 0x00	; 0
    14d6:	90 e0       	ldi	r25, 0x00	; 0
    14d8:	c5 d9       	rcall	.-3190   	; 0x864 <forward_by_count>
	
	//turns right 
	turn_right(100,100);
    14da:	64 e6       	ldi	r22, 0x64	; 100
    14dc:	70 e0       	ldi	r23, 0x00	; 0
    14de:	84 e6       	ldi	r24, 0x64	; 100
    14e0:	90 e0       	ldi	r25, 0x00	; 0
    14e2:	e9 db       	rcall	.-2094   	; 0xcb6 <turn_right>
    14e4:	12 b8       	out	0x02, r1	; 2
	stop();
    
    14e6:	df 91       	pop	r29
    14e8:	cf 91       	pop	r28
    14ea:	08 95       	ret

000014ec <get_postion>:
*Logic        : searches for the pos in the arena array ,when found stores its index values in cordinates[] array
*Example call : get_postion('i');
*/

void get_postion (char pos)
{
    14ec:	cf 92       	push	r12
    14ee:	df 92       	push	r13
    14f0:	ef 92       	push	r14
    14f2:	ff 92       	push	r15
    14f4:	0f 93       	push	r16
    14f6:	1f 93       	push	r17
    14f8:	cf 93       	push	r28
    14fa:	df 93       	push	r29
    14fc:	e0 90 70 02 	lds	r14, 0x0270
    1500:	f0 90 71 02 	lds	r15, 0x0271
    1504:	00 91 72 02 	lds	r16, 0x0272
    1508:	10 91 73 02 	lds	r17, 0x0273
    150c:	61 e2       	ldi	r22, 0x21	; 33
    150e:	72 e0       	ldi	r23, 0x02	; 2
    1510:	40 e0       	ldi	r20, 0x00	; 0
    1512:	50 e0       	ldi	r21, 0x00	; 0
	//starts iterations 
	for(i=0;i<9;i++)
	{
		for(j=0;j<5;j++)
    1514:	d1 e0       	ldi	r29, 0x01	; 1
    1516:	c0 e0       	ldi	r28, 0x00	; 0
    1518:	c1 2c       	mov	r12, r1
    151a:	d1 2c       	mov	r13, r1
    151c:	a4 2f       	mov	r26, r20
    151e:	b5 2f       	mov	r27, r21
    1520:	fb 01       	movw	r30, r22
    1522:	31 97       	sbiw	r30, 0x01	; 1
		{   
			//if match is found
			if(pos==arena[i][j])
    1524:	90 81       	ld	r25, Z
    1526:	98 13       	cpse	r25, r24
    1528:	2d c0       	rjmp	.+90     	; 0x1584 <get_postion+0x98>
    152a:	05 c0       	rjmp	.+10     	; 0x1536 <get_postion+0x4a>
    152c:	91 91       	ld	r25, Z+
    152e:	98 13       	cpse	r25, r24
    1530:	09 c0       	rjmp	.+18     	; 0x1544 <get_postion+0x58>
    1532:	93 2f       	mov	r25, r19
    1534:	02 c0       	rjmp	.+4      	; 0x153a <get_postion+0x4e>
void get_postion (char pos)
{
	//starts iterations 
	for(i=0;i<9;i++)
	{
		for(j=0;j<5;j++)
    1536:	2c 2d       	mov	r18, r12
    1538:	9d 2d       	mov	r25, r13
			//if match is found
			if(pos==arena[i][j])
			{   
				//stores index values
				cordinates[0]=i;
				cordinates[1]=j;
    153a:	02 2f       	mov	r16, r18
    153c:	19 2f       	mov	r17, r25
		{   
			//if match is found
			if(pos==arena[i][j])
			{   
				//stores index values
				cordinates[0]=i;
    153e:	ea 2e       	mov	r14, r26
    1540:	fb 2e       	mov	r15, r27
				cordinates[1]=j;
				//terminates
				break;
    1542:	06 c0       	rjmp	.+12     	; 0x1550 <get_postion+0x64>
void get_postion (char pos)
{
	//starts iterations 
	for(i=0;i<9;i++)
	{
		for(j=0;j<5;j++)
    1544:	2f 5f       	subi	r18, 0xFF	; 255
    1546:	3f 4f       	sbci	r19, 0xFF	; 255
    1548:	25 30       	cpi	r18, 0x05	; 5
    154a:	31 05       	cpc	r19, r1
    154c:	79 f7       	brne	.-34     	; 0x152c <get_postion+0x40>
    154e:	93 2f       	mov	r25, r19
    1550:	4f 5f       	subi	r20, 0xFF	; 255
    1552:	5f 4f       	sbci	r21, 0xFF	; 255
    1554:	6b 5f       	subi	r22, 0xFB	; 251
    1556:	7f 4f       	sbci	r23, 0xFF	; 255
*/

void get_postion (char pos)
{
	//starts iterations 
	for(i=0;i<9;i++)
    1558:	49 30       	cpi	r20, 0x09	; 9
    155a:	51 05       	cpc	r21, r1
    155c:	f9 f6       	brne	.-66     	; 0x151c <get_postion+0x30>
    155e:	20 93 74 02 	sts	0x0274, r18
    1562:	90 93 75 02 	sts	0x0275, r25
    1566:	e0 92 70 02 	sts	0x0270, r14
    156a:	f0 92 71 02 	sts	0x0271, r15
    156e:	00 93 72 02 	sts	0x0272, r16
    1572:	10 93 73 02 	sts	0x0273, r17
    1576:	89 e0       	ldi	r24, 0x09	; 9
    1578:	90 e0       	ldi	r25, 0x00	; 0
    157a:	90 93 7e 02 	sts	0x027E, r25
    157e:	80 93 7d 02 	sts	0x027D, r24
    1582:	04 c0       	rjmp	.+8      	; 0x158c <get_postion+0xa0>
	{
		for(j=0;j<5;j++)
		{   
			//if match is found
			if(pos==arena[i][j])
    1584:	fb 01       	movw	r30, r22
void get_postion (char pos)
{
	//starts iterations 
	for(i=0;i<9;i++)
	{
		for(j=0;j<5;j++)
    1586:	2d 2f       	mov	r18, r29
    1588:	3c 2f       	mov	r19, r28
    158a:	d0 cf       	rjmp	.-96     	; 0x152c <get_postion+0x40>
				//terminates
				break;
			}
		}
	}
}
    158c:	df 91       	pop	r29
    158e:	cf 91       	pop	r28
    1590:	1f 91       	pop	r17
    1592:	0f 91       	pop	r16
    1594:	ff 90       	pop	r15
    1596:	ef 90       	pop	r14
    1598:	df 90       	pop	r13
    159a:	cf 90       	pop	r12
    159c:	08 95       	ret

0000159e <cal_herustic>:
                   
*/


void cal_herustic(char des)
 {
    159e:	2f 92       	push	r2
    15a0:	3f 92       	push	r3
    15a2:	4f 92       	push	r4
    15a4:	5f 92       	push	r5
    15a6:	6f 92       	push	r6
    15a8:	7f 92       	push	r7
    15aa:	8f 92       	push	r8
    15ac:	9f 92       	push	r9
    15ae:	af 92       	push	r10
    15b0:	bf 92       	push	r11
    15b2:	cf 92       	push	r12
    15b4:	df 92       	push	r13
    15b6:	ef 92       	push	r14
    15b8:	ff 92       	push	r15
    15ba:	0f 93       	push	r16
    15bc:	1f 93       	push	r17
    15be:	cf 93       	push	r28
    15c0:	df 93       	push	r29
    15c2:	00 d0       	rcall	.+0      	; 0x15c4 <cal_herustic+0x26>
    15c4:	1f 92       	push	r1
    15c6:	cd b7       	in	r28, 0x3d	; 61
    15c8:	de b7       	in	r29, 0x3e	; 62
	  int x,y;                     //stores index
	  get_postion(des);            //function call of get_postion(),to get index of goal node
    15ca:	90 df       	rcall	.-224    	; 0x14ec <get_postion>
	  x=cordinates[0];             //stores x index 
    15cc:	40 90 70 02 	lds	r4, 0x0270
    15d0:	50 90 71 02 	lds	r5, 0x0271
	  y=cordinates[1];             //stores y index
    15d4:	00 91 72 02 	lds	r16, 0x0272
    15d8:	10 91 73 02 	lds	r17, 0x0273
    15dc:	0f 2e       	mov	r0, r31
    15de:	fb e8       	ldi	r31, 0x8B	; 139
    15e0:	af 2e       	mov	r10, r31
    15e2:	f2 e0       	ldi	r31, 0x02	; 2
    15e4:	bf 2e       	mov	r11, r31
    15e6:	f0 2d       	mov	r31, r0
        
	  //starts iterations 	
	  for(i=0;i<9;i++)
    15e8:	c1 2c       	mov	r12, r1
    15ea:	d1 2c       	mov	r13, r1
	   {
		 for(j=0;j<5;j++)
    15ec:	31 2c       	mov	r3, r1
    15ee:	21 2c       	mov	r2, r1
		  {
			  //sets values of (1,2),(2,2),(4,2),(6,2) to high vales 
			 if((i==1&&j==2)||(i==2&&j==2)||(i==4&&j==2)||(i==6&&j==2))
			  {
			      herustic[i][j]=1000;
    15f0:	0f 2e       	mov	r0, r31
    15f2:	f8 ee       	ldi	r31, 0xE8	; 232
    15f4:	6f 2e       	mov	r6, r31
    15f6:	f3 e0       	ldi	r31, 0x03	; 3
    15f8:	7f 2e       	mov	r7, r31
    15fa:	f0 2d       	mov	r31, r0
	  get_postion(des);            //function call of get_postion(),to get index of goal node
	  x=cordinates[0];             //stores x index 
	  y=cordinates[1];             //stores y index
        
	  //starts iterations 	
	  for(i=0;i<9;i++)
    15fc:	f5 01       	movw	r30, r10
	   {
		 for(j=0;j<5;j++)
    15fe:	83 2d       	mov	r24, r3
    1600:	92 2d       	mov	r25, r2
    1602:	96 01       	movw	r18, r12
    1604:	21 50       	subi	r18, 0x01	; 1
    1606:	31 09       	sbc	r19, r1
    1608:	3a 83       	std	Y+2, r19	; 0x02
    160a:	29 83       	std	Y+1, r18	; 0x01
    160c:	42 01       	movw	r8, r4
    160e:	8c 18       	sub	r8, r12
    1610:	9d 08       	sbc	r9, r13
			      herustic[i][j]=1000;
			  }
			  //gets Manhattan distance of every node
			  else
			  {
			      herustic[i][j]=abs(x-i)+abs(y-j);
    1612:	9c 82       	std	Y+4, r9	; 0x04
    1614:	8b 82       	std	Y+3, r8	; 0x03
    1616:	91 94       	neg	r9
    1618:	81 94       	neg	r8
    161a:	91 08       	sbc	r9, r1
	  for(i=0;i<9;i++)
	   {
		 for(j=0;j<5;j++)
		  {
			  //sets values of (1,2),(2,2),(4,2),(6,2) to high vales 
			 if((i==1&&j==2)||(i==2&&j==2)||(i==4&&j==2)||(i==6&&j==2))
    161c:	76 01       	movw	r14, r12
    161e:	e8 94       	clt
    1620:	e1 f8       	bld	r14, 1
    1622:	a9 81       	ldd	r26, Y+1	; 0x01
    1624:	ba 81       	ldd	r27, Y+2	; 0x02
    1626:	12 97       	sbiw	r26, 0x02	; 2
    1628:	20 f0       	brcs	.+8      	; 0x1632 <cal_herustic+0x94>
    162a:	b4 e0       	ldi	r27, 0x04	; 4
    162c:	eb 16       	cp	r14, r27
    162e:	f1 04       	cpc	r15, r1
    1630:	59 f4       	brne	.+22     	; 0x1648 <cal_herustic+0xaa>
    1632:	82 30       	cpi	r24, 0x02	; 2
    1634:	91 05       	cpc	r25, r1
    1636:	41 f4       	brne	.+16     	; 0x1648 <cal_herustic+0xaa>
			  {
			      herustic[i][j]=1000;
    1638:	d5 01       	movw	r26, r10
    163a:	15 96       	adiw	r26, 0x05	; 5
    163c:	7c 92       	st	X, r7
    163e:	6e 92       	st	-X, r6
    1640:	14 97       	sbiw	r26, 0x04	; 4
	  y=cordinates[1];             //stores y index
        
	  //starts iterations 	
	  for(i=0;i<9;i++)
	   {
		 for(j=0;j<5;j++)
    1642:	01 96       	adiw	r24, 0x01	; 1
    1644:	32 96       	adiw	r30, 0x02	; 2
    1646:	ed cf       	rjmp	.-38     	; 0x1622 <cal_herustic+0x84>
			      herustic[i][j]=1000;
			  }
			  //gets Manhattan distance of every node
			  else
			  {
			      herustic[i][j]=abs(x-i)+abs(y-j);
    1648:	4b 81       	ldd	r20, Y+3	; 0x03
    164a:	5c 81       	ldd	r21, Y+4	; 0x04
    164c:	55 23       	and	r21, r21
    164e:	0c f4       	brge	.+2      	; 0x1652 <cal_herustic+0xb4>
    1650:	a4 01       	movw	r20, r8
    1652:	b8 01       	movw	r22, r16
    1654:	68 1b       	sub	r22, r24
    1656:	79 0b       	sbc	r23, r25
    1658:	9b 01       	movw	r18, r22
    165a:	22 f4       	brpl	.+8      	; 0x1664 <cal_herustic+0xc6>
    165c:	22 27       	eor	r18, r18
    165e:	33 27       	eor	r19, r19
    1660:	26 1b       	sub	r18, r22
    1662:	37 0b       	sbc	r19, r23
    1664:	24 0f       	add	r18, r20
    1666:	35 1f       	adc	r19, r21
    1668:	21 93       	st	Z+, r18
    166a:	31 93       	st	Z+, r19
	  y=cordinates[1];             //stores y index
        
	  //starts iterations 	
	  for(i=0;i<9;i++)
	   {
		 for(j=0;j<5;j++)
    166c:	01 96       	adiw	r24, 0x01	; 1
    166e:	85 30       	cpi	r24, 0x05	; 5
    1670:	91 05       	cpc	r25, r1
    1672:	b9 f6       	brne	.-82     	; 0x1622 <cal_herustic+0x84>
	  get_postion(des);            //function call of get_postion(),to get index of goal node
	  x=cordinates[0];             //stores x index 
	  y=cordinates[1];             //stores y index
        
	  //starts iterations 	
	  for(i=0;i<9;i++)
    1674:	bf ef       	ldi	r27, 0xFF	; 255
    1676:	cb 1a       	sub	r12, r27
    1678:	db 0a       	sbc	r13, r27
    167a:	2a e0       	ldi	r18, 0x0A	; 10
    167c:	a2 0e       	add	r10, r18
    167e:	b1 1c       	adc	r11, r1
    1680:	39 e0       	ldi	r19, 0x09	; 9
    1682:	c3 16       	cp	r12, r19
    1684:	d1 04       	cpc	r13, r1
    1686:	09 f0       	breq	.+2      	; 0x168a <cal_herustic+0xec>
    1688:	b9 cf       	rjmp	.-142    	; 0x15fc <cal_herustic+0x5e>
    168a:	85 e0       	ldi	r24, 0x05	; 5
    168c:	90 e0       	ldi	r25, 0x00	; 0
    168e:	90 93 75 02 	sts	0x0275, r25
    1692:	80 93 74 02 	sts	0x0274, r24
    1696:	89 e0       	ldi	r24, 0x09	; 9
    1698:	90 e0       	ldi	r25, 0x00	; 0
    169a:	90 93 7e 02 	sts	0x027E, r25
    169e:	80 93 7d 02 	sts	0x027D, r24
			  {
			      herustic[i][j]=abs(x-i)+abs(y-j);
			  }
 		  }
	   }
 }
    16a2:	0f 90       	pop	r0
    16a4:	0f 90       	pop	r0
    16a6:	0f 90       	pop	r0
    16a8:	0f 90       	pop	r0
    16aa:	df 91       	pop	r29
    16ac:	cf 91       	pop	r28
    16ae:	1f 91       	pop	r17
    16b0:	0f 91       	pop	r16
    16b2:	ff 90       	pop	r15
    16b4:	ef 90       	pop	r14
    16b6:	df 90       	pop	r13
    16b8:	cf 90       	pop	r12
    16ba:	bf 90       	pop	r11
    16bc:	af 90       	pop	r10
    16be:	9f 90       	pop	r9
    16c0:	8f 90       	pop	r8
    16c2:	7f 90       	pop	r7
    16c4:	6f 90       	pop	r6
    16c6:	5f 90       	pop	r5
    16c8:	4f 90       	pop	r4
    16ca:	3f 90       	pop	r3
    16cc:	2f 90       	pop	r2
    16ce:	08 95       	ret

000016d0 <find_openlist>:

void find_openlist(int ox,int oy)
 {
	  //this function execute only if next nearest node to goal is persent hence the parmeters are the present nearest ones 
	              
      x_cor[m]=ox;      //stores cordinates of next nodes
    16d0:	20 91 4e 02 	lds	r18, 0x024E
    16d4:	30 91 4f 02 	lds	r19, 0x024F
    16d8:	a9 01       	movw	r20, r18
    16da:	44 0f       	add	r20, r20
    16dc:	55 1f       	adc	r21, r21
    16de:	fa 01       	movw	r30, r20
    16e0:	eb 51       	subi	r30, 0x1B	; 27
    16e2:	fd 4f       	sbci	r31, 0xFD	; 253
    16e4:	91 83       	std	Z+1, r25	; 0x01
    16e6:	80 83       	st	Z, r24
      y_cor[m]=oy;
    16e8:	fa 01       	movw	r30, r20
    16ea:	e4 5a       	subi	r30, 0xA4	; 164
    16ec:	fd 4f       	sbci	r31, 0xFD	; 253
    16ee:	71 83       	std	Z+1, r23	; 0x01
    16f0:	60 83       	st	Z, r22
      m++;              //increments index
    16f2:	2f 5f       	subi	r18, 0xFF	; 255
    16f4:	3f 4f       	sbci	r19, 0xFF	; 255
    16f6:	30 93 4f 02 	sts	0x024F, r19
    16fa:	20 93 4e 02 	sts	0x024E, r18
      
	  //stores open_list values
      open_list[0] = herustic[ox][oy-1];       //west
    16fe:	9c 01       	movw	r18, r24
    1700:	22 0f       	add	r18, r18
    1702:	33 1f       	adc	r19, r19
    1704:	22 0f       	add	r18, r18
    1706:	33 1f       	adc	r19, r19
    1708:	28 0f       	add	r18, r24
    170a:	39 1f       	adc	r19, r25
    170c:	26 0f       	add	r18, r22
    170e:	37 1f       	adc	r19, r23
    1710:	f9 01       	movw	r30, r18
    1712:	ee 0f       	add	r30, r30
    1714:	ff 1f       	adc	r31, r31
    1716:	e7 57       	subi	r30, 0x77	; 119
    1718:	fd 4f       	sbci	r31, 0xFD	; 253
    171a:	40 81       	ld	r20, Z
    171c:	51 81       	ldd	r21, Z+1	; 0x01
    171e:	50 93 82 02 	sts	0x0282, r21
    1722:	40 93 81 02 	sts	0x0281, r20
	  open_list[1] = herustic[ox][oy+1];       //east
    1726:	f9 01       	movw	r30, r18
    1728:	ee 0f       	add	r30, r30
    172a:	ff 1f       	adc	r31, r31
    172c:	e3 57       	subi	r30, 0x73	; 115
    172e:	fd 4f       	sbci	r31, 0xFD	; 253
    1730:	20 81       	ld	r18, Z
    1732:	31 81       	ldd	r19, Z+1	; 0x01
    1734:	30 93 84 02 	sts	0x0284, r19
    1738:	20 93 83 02 	sts	0x0283, r18
	  open_list[2] = herustic[ox-1][oy];       //north
    173c:	9c 01       	movw	r18, r24
    173e:	21 50       	subi	r18, 0x01	; 1
    1740:	31 09       	sbc	r19, r1
    1742:	f9 01       	movw	r30, r18
    1744:	ee 0f       	add	r30, r30
    1746:	ff 1f       	adc	r31, r31
    1748:	ee 0f       	add	r30, r30
    174a:	ff 1f       	adc	r31, r31
    174c:	2e 0f       	add	r18, r30
    174e:	3f 1f       	adc	r19, r31
    1750:	26 0f       	add	r18, r22
    1752:	37 1f       	adc	r19, r23
    1754:	f9 01       	movw	r30, r18
    1756:	ee 0f       	add	r30, r30
    1758:	ff 1f       	adc	r31, r31
    175a:	e5 57       	subi	r30, 0x75	; 117
    175c:	fd 4f       	sbci	r31, 0xFD	; 253
    175e:	20 81       	ld	r18, Z
    1760:	31 81       	ldd	r19, Z+1	; 0x01
    1762:	30 93 86 02 	sts	0x0286, r19
    1766:	20 93 85 02 	sts	0x0285, r18
	  open_list[3] = herustic[ox+1][oy];       //south
    176a:	01 96       	adiw	r24, 0x01	; 1
    176c:	fc 01       	movw	r30, r24
    176e:	ee 0f       	add	r30, r30
    1770:	ff 1f       	adc	r31, r31
    1772:	ee 0f       	add	r30, r30
    1774:	ff 1f       	adc	r31, r31
    1776:	8e 0f       	add	r24, r30
    1778:	9f 1f       	adc	r25, r31
    177a:	68 0f       	add	r22, r24
    177c:	79 1f       	adc	r23, r25
    177e:	fb 01       	movw	r30, r22
    1780:	ee 0f       	add	r30, r30
    1782:	ff 1f       	adc	r31, r31
    1784:	e5 57       	subi	r30, 0x75	; 117
    1786:	fd 4f       	sbci	r31, 0xFD	; 253
    1788:	80 81       	ld	r24, Z
    178a:	91 81       	ldd	r25, Z+1	; 0x01
    178c:	90 93 88 02 	sts	0x0288, r25
    1790:	80 93 87 02 	sts	0x0287, r24
    1794:	08 95       	ret

00001796 <change_direction>:

void change_direction (unsigned char desired_direction)
{
	
	   //current direction is same as desired direction then gets terminates  
    	if (current_direction == desired_direction)
    1796:	90 91 1f 02 	lds	r25, 0x021F
    179a:	98 17       	cp	r25, r24
    179c:	09 f4       	brne	.+2      	; 0x17a0 <change_direction+0xa>
    179e:	a1 c0       	rjmp	.+322    	; 0x18e2 <change_direction+0x14c>
		   return 0;
     	}
	   
	   /*if current direction is north*/
	    
	   if (current_direction == 'N' && desired_direction == 'W')
    17a0:	9e 34       	cpi	r25, 0x4E	; 78
    17a2:	39 f5       	brne	.+78     	; 0x17f2 <change_direction+0x5c>
    17a4:	87 35       	cpi	r24, 0x57	; 87
    17a6:	49 f4       	brne	.+18     	; 0x17ba <change_direction+0x24>
	   {  
		  turn_left(100,100);
    17a8:	64 e6       	ldi	r22, 0x64	; 100
    17aa:	70 e0       	ldi	r23, 0x00	; 0
    17ac:	84 e6       	ldi	r24, 0x64	; 100
    17ae:	90 e0       	ldi	r25, 0x00	; 0
    17b0:	41 da       	rcall	.-2942   	; 0xc34 <turn_left>
		  current_direction = 'W';
    17b2:	87 e5       	ldi	r24, 0x57	; 87
    17b4:	80 93 1f 02 	sts	0x021F, r24
    17b8:	08 95       	ret
	   }
	   else if (current_direction == 'N' && desired_direction == 'E')
    17ba:	85 34       	cpi	r24, 0x45	; 69
    17bc:	49 f4       	brne	.+18     	; 0x17d0 <change_direction+0x3a>
	   {  
		 turn_right(100,100);
    17be:	64 e6       	ldi	r22, 0x64	; 100
    17c0:	70 e0       	ldi	r23, 0x00	; 0
    17c2:	84 e6       	ldi	r24, 0x64	; 100
    17c4:	90 e0       	ldi	r25, 0x00	; 0
    17c6:	77 da       	rcall	.-2834   	; 0xcb6 <turn_right>
		 current_direction = 'E';
    17c8:	85 e4       	ldi	r24, 0x45	; 69
    17ca:	80 93 1f 02 	sts	0x021F, r24
    17ce:	08 95       	ret
	   }
	   else if (current_direction == 'N' && desired_direction == 'S')
    17d0:	83 35       	cpi	r24, 0x53	; 83
    17d2:	09 f0       	breq	.+2      	; 0x17d6 <change_direction+0x40>
    17d4:	5f c0       	rjmp	.+190    	; 0x1894 <change_direction+0xfe>
	   {  
		 turn_right(100,100);
    17d6:	64 e6       	ldi	r22, 0x64	; 100
    17d8:	70 e0       	ldi	r23, 0x00	; 0
    17da:	84 e6       	ldi	r24, 0x64	; 100
    17dc:	90 e0       	ldi	r25, 0x00	; 0
    17de:	6b da       	rcall	.-2858   	; 0xcb6 <turn_right>
		 turn_right(100,100);
    17e0:	64 e6       	ldi	r22, 0x64	; 100
    17e2:	70 e0       	ldi	r23, 0x00	; 0
    17e4:	84 e6       	ldi	r24, 0x64	; 100
    17e6:	90 e0       	ldi	r25, 0x00	; 0
    17e8:	66 da       	rcall	.-2868   	; 0xcb6 <turn_right>
		current_direction = 'S';
    17ea:	83 e5       	ldi	r24, 0x53	; 83
    17ec:	80 93 1f 02 	sts	0x021F, r24
    17f0:	08 95       	ret
	   }
	   /*if current direction is south*/
	   else if (current_direction == 'S' && desired_direction == 'N')
    17f2:	93 35       	cpi	r25, 0x53	; 83
    17f4:	39 f5       	brne	.+78     	; 0x1844 <change_direction+0xae>
    17f6:	8e 34       	cpi	r24, 0x4E	; 78
    17f8:	71 f4       	brne	.+28     	; 0x1816 <change_direction+0x80>
	   {		
		turn_right(100,100);
    17fa:	64 e6       	ldi	r22, 0x64	; 100
    17fc:	70 e0       	ldi	r23, 0x00	; 0
    17fe:	84 e6       	ldi	r24, 0x64	; 100
    1800:	90 e0       	ldi	r25, 0x00	; 0
    1802:	59 da       	rcall	.-2894   	; 0xcb6 <turn_right>
		turn_right(100,100);
    1804:	64 e6       	ldi	r22, 0x64	; 100
    1806:	70 e0       	ldi	r23, 0x00	; 0
    1808:	84 e6       	ldi	r24, 0x64	; 100
    180a:	90 e0       	ldi	r25, 0x00	; 0
    180c:	54 da       	rcall	.-2904   	; 0xcb6 <turn_right>
		current_direction = 'N';
    180e:	8e e4       	ldi	r24, 0x4E	; 78
    1810:	80 93 1f 02 	sts	0x021F, r24
    1814:	08 95       	ret
	   }
	   else if (current_direction == 'S' && desired_direction == 'E')
    1816:	85 34       	cpi	r24, 0x45	; 69
    1818:	49 f4       	brne	.+18     	; 0x182c <change_direction+0x96>
	   {
		turn_left(100,100);
    181a:	64 e6       	ldi	r22, 0x64	; 100
    181c:	70 e0       	ldi	r23, 0x00	; 0
    181e:	84 e6       	ldi	r24, 0x64	; 100
    1820:	90 e0       	ldi	r25, 0x00	; 0
    1822:	08 da       	rcall	.-3056   	; 0xc34 <turn_left>
		current_direction = 'E';
    1824:	85 e4       	ldi	r24, 0x45	; 69
    1826:	80 93 1f 02 	sts	0x021F, r24
    182a:	08 95       	ret
	   }
	   else if (current_direction == 'S' && desired_direction == 'W')
    182c:	87 35       	cpi	r24, 0x57	; 87
    182e:	09 f0       	breq	.+2      	; 0x1832 <change_direction+0x9c>
    1830:	58 c0       	rjmp	.+176    	; 0x18e2 <change_direction+0x14c>
	   {
		turn_right(100,100);
    1832:	64 e6       	ldi	r22, 0x64	; 100
    1834:	70 e0       	ldi	r23, 0x00	; 0
    1836:	84 e6       	ldi	r24, 0x64	; 100
    1838:	90 e0       	ldi	r25, 0x00	; 0
    183a:	3d da       	rcall	.-2950   	; 0xcb6 <turn_right>
		current_direction = 'W';
    183c:	87 e5       	ldi	r24, 0x57	; 87
    183e:	80 93 1f 02 	sts	0x021F, r24
    1842:	08 95       	ret
	   }
	   
	   /*if current direction is east */
	   else if (current_direction == 'E' && desired_direction == 'N')
    1844:	95 34       	cpi	r25, 0x45	; 69
    1846:	31 f5       	brne	.+76     	; 0x1894 <change_direction+0xfe>
    1848:	8e 34       	cpi	r24, 0x4E	; 78
    184a:	49 f4       	brne	.+18     	; 0x185e <change_direction+0xc8>
	   {
		turn_left(100,100);
    184c:	64 e6       	ldi	r22, 0x64	; 100
    184e:	70 e0       	ldi	r23, 0x00	; 0
    1850:	84 e6       	ldi	r24, 0x64	; 100
    1852:	90 e0       	ldi	r25, 0x00	; 0
    1854:	ef d9       	rcall	.-3106   	; 0xc34 <turn_left>
		current_direction = 'N';
    1856:	8e e4       	ldi	r24, 0x4E	; 78
    1858:	80 93 1f 02 	sts	0x021F, r24
    185c:	08 95       	ret
	   }
    	else if (current_direction == 'E' && desired_direction == 'W')
    185e:	87 35       	cpi	r24, 0x57	; 87
    1860:	71 f4       	brne	.+28     	; 0x187e <change_direction+0xe8>
	   {
		turn_right(100,100);
    1862:	64 e6       	ldi	r22, 0x64	; 100
    1864:	70 e0       	ldi	r23, 0x00	; 0
    1866:	84 e6       	ldi	r24, 0x64	; 100
    1868:	90 e0       	ldi	r25, 0x00	; 0
    186a:	25 da       	rcall	.-2998   	; 0xcb6 <turn_right>
		turn_right(100,100);
    186c:	64 e6       	ldi	r22, 0x64	; 100
    186e:	70 e0       	ldi	r23, 0x00	; 0
    1870:	84 e6       	ldi	r24, 0x64	; 100
    1872:	90 e0       	ldi	r25, 0x00	; 0
    1874:	20 da       	rcall	.-3008   	; 0xcb6 <turn_right>
		current_direction = 'W';
    1876:	87 e5       	ldi	r24, 0x57	; 87
    1878:	80 93 1f 02 	sts	0x021F, r24
    187c:	08 95       	ret
	   }
	   else if (current_direction == 'E' && desired_direction == 'S')
    187e:	83 35       	cpi	r24, 0x53	; 83
    1880:	81 f5       	brne	.+96     	; 0x18e2 <change_direction+0x14c>
	   { 
		turn_right(100,100);
    1882:	64 e6       	ldi	r22, 0x64	; 100
    1884:	70 e0       	ldi	r23, 0x00	; 0
    1886:	84 e6       	ldi	r24, 0x64	; 100
    1888:	90 e0       	ldi	r25, 0x00	; 0
    188a:	15 da       	rcall	.-3030   	; 0xcb6 <turn_right>
		current_direction = 'S';
    188c:	83 e5       	ldi	r24, 0x53	; 83
    188e:	80 93 1f 02 	sts	0x021F, r24
    1892:	08 95       	ret
	   }
	   
	   /*if current direction is west*/
	   else if (current_direction == 'W' && desired_direction == 'N')
    1894:	97 35       	cpi	r25, 0x57	; 87
    1896:	29 f5       	brne	.+74     	; 0x18e2 <change_direction+0x14c>
    1898:	8e 34       	cpi	r24, 0x4E	; 78
    189a:	49 f4       	brne	.+18     	; 0x18ae <change_direction+0x118>
	   { 
		turn_right(100,100);
    189c:	64 e6       	ldi	r22, 0x64	; 100
    189e:	70 e0       	ldi	r23, 0x00	; 0
    18a0:	84 e6       	ldi	r24, 0x64	; 100
    18a2:	90 e0       	ldi	r25, 0x00	; 0
    18a4:	08 da       	rcall	.-3056   	; 0xcb6 <turn_right>
		current_direction = 'N';
    18a6:	8e e4       	ldi	r24, 0x4E	; 78
    18a8:	80 93 1f 02 	sts	0x021F, r24
    18ac:	08 95       	ret
	   }
	  else if (current_direction == 'W' && desired_direction == 'E')
    18ae:	85 34       	cpi	r24, 0x45	; 69
    18b0:	71 f4       	brne	.+28     	; 0x18ce <change_direction+0x138>
	  { 
		turn_right(100,100);
    18b2:	64 e6       	ldi	r22, 0x64	; 100
    18b4:	70 e0       	ldi	r23, 0x00	; 0
    18b6:	84 e6       	ldi	r24, 0x64	; 100
    18b8:	90 e0       	ldi	r25, 0x00	; 0
    18ba:	fd d9       	rcall	.-3078   	; 0xcb6 <turn_right>
		turn_right(100,100);
    18bc:	64 e6       	ldi	r22, 0x64	; 100
    18be:	70 e0       	ldi	r23, 0x00	; 0
    18c0:	84 e6       	ldi	r24, 0x64	; 100
    18c2:	90 e0       	ldi	r25, 0x00	; 0
    18c4:	f8 d9       	rcall	.-3088   	; 0xcb6 <turn_right>
		current_direction = 'E';
    18c6:	85 e4       	ldi	r24, 0x45	; 69
    18c8:	80 93 1f 02 	sts	0x021F, r24
    18cc:	08 95       	ret
	  }
	  else if (current_direction == 'W' && desired_direction == 'S')
    18ce:	83 35       	cpi	r24, 0x53	; 83
    18d0:	41 f4       	brne	.+16     	; 0x18e2 <change_direction+0x14c>
	  { 
		turn_left(100,100);
    18d2:	64 e6       	ldi	r22, 0x64	; 100
    18d4:	70 e0       	ldi	r23, 0x00	; 0
    18d6:	84 e6       	ldi	r24, 0x64	; 100
    18d8:	90 e0       	ldi	r25, 0x00	; 0
    18da:	ac d9       	rcall	.-3240   	; 0xc34 <turn_left>
		current_direction = 'S';
    18dc:	83 e5       	ldi	r24, 0x53	; 83
    18de:	80 93 1f 02 	sts	0x021F, r24
    18e2:	08 95       	ret

000018e4 <call_astar>:
*Example call : call_astar('b','i')
*/


void call_astar(char des,char source)
{   
    18e4:	6f 92       	push	r6
    18e6:	7f 92       	push	r7
    18e8:	8f 92       	push	r8
    18ea:	9f 92       	push	r9
    18ec:	af 92       	push	r10
    18ee:	bf 92       	push	r11
    18f0:	cf 92       	push	r12
    18f2:	df 92       	push	r13
    18f4:	ef 92       	push	r14
    18f6:	ff 92       	push	r15
    18f8:	0f 93       	push	r16
    18fa:	1f 93       	push	r17
    18fc:	cf 93       	push	r28
    18fe:	df 93       	push	r29
    1900:	d8 2e       	mov	r13, r24
    1902:	c6 2f       	mov	r28, r22
	    element stores index of minimum value  
	   */
    	int sx, sy, dx,dy,smin, element = 0;  
	
	
	     cal_herustic(des);      //herustic array of destination node is defined 
    1904:	4c de       	rcall	.-872    	; 0x159e <cal_herustic>
	     
		 //source index are taken
		 get_postion(source);
    1906:	8c 2f       	mov	r24, r28
    1908:	f1 dd       	rcall	.-1054   	; 0x14ec <get_postion>
	     sx = cordinates[0];
    190a:	0f 2e       	mov	r0, r31
    190c:	f0 e7       	ldi	r31, 0x70	; 112
    190e:	ef 2e       	mov	r14, r31
    1910:	f2 e0       	ldi	r31, 0x02	; 2
    1912:	ff 2e       	mov	r15, r31
    1914:	f0 2d       	mov	r31, r0
    1916:	f7 01       	movw	r30, r14
    1918:	00 81       	ld	r16, Z
    191a:	11 81       	ldd	r17, Z+1	; 0x01
	     sy = cordinates[1];
    191c:	c2 e7       	ldi	r28, 0x72	; 114
    191e:	d2 e0       	ldi	r29, 0x02	; 2
    1920:	88 80       	ld	r8, Y
    1922:	99 80       	ldd	r9, Y+1	; 0x01
		 
		 //destination index are taken 
       	 get_postion(des);
    1924:	8d 2d       	mov	r24, r13
    1926:	e2 dd       	rcall	.-1084   	; 0x14ec <get_postion>
	     dx=cordinates[0];
    1928:	f7 01       	movw	r30, r14
    192a:	80 81       	ld	r24, Z
    192c:	91 81       	ldd	r25, Z+1	; 0x01
	     dy=cordinates[1];
    192e:	28 81       	ld	r18, Y
    1930:	39 81       	ldd	r19, Y+1	; 0x01
	    sx and sy stores vertex of source node 
	    dx and dy stores vertex of destination node 
	    smin stores minimum value in open_list 
	    element stores index of minimum value  
	   */
    	int sx, sy, dx,dy,smin, element = 0;  
    1932:	c0 e0       	ldi	r28, 0x00	; 0
    1934:	d0 e0       	ldi	r29, 0x00	; 0
	     dx=cordinates[0];
	     dy=cordinates[1];

           //repeats until the herustic of source and destination are same 
	
	    while (herustic[sx][sy]!= herustic[dx][dy])
    1936:	ac 01       	movw	r20, r24
    1938:	44 0f       	add	r20, r20
    193a:	55 1f       	adc	r21, r21
    193c:	44 0f       	add	r20, r20
    193e:	55 1f       	adc	r21, r21
    1940:	84 0f       	add	r24, r20
    1942:	95 1f       	adc	r25, r21
    1944:	82 0f       	add	r24, r18
    1946:	93 1f       	adc	r25, r19
    1948:	88 0f       	add	r24, r24
    194a:	99 1f       	adc	r25, r25
    194c:	9c 01       	movw	r18, r24
    194e:	25 57       	subi	r18, 0x75	; 117
    1950:	3d 4f       	sbci	r19, 0xFD	; 253
    1952:	69 01       	movw	r12, r18
	     {
                //find out the open_list 
        		find_openlist(sx, sy);
				
				//to find minimum value smin is initialized to 1st element
	        	smin = open_list[0];
    1954:	0f 2e       	mov	r0, r31
    1956:	f1 e8       	ldi	r31, 0x81	; 129
    1958:	ef 2e       	mov	r14, r31
    195a:	f2 e0       	ldi	r31, 0x02	; 2
    195c:	ff 2e       	mov	r15, r31
    195e:	f0 2d       	mov	r31, r0
				//finds out the minimum value
		        for (i = 0; i < 4; i++)
    1960:	61 2c       	mov	r6, r1
    1962:	71 2c       	mov	r7, r1
    1964:	68 94       	set
    1966:	aa 24       	eor	r10, r10
    1968:	a2 f8       	bld	r10, 2
    196a:	b1 2c       	mov	r11, r1
	     dx=cordinates[0];
	     dy=cordinates[1];

           //repeats until the herustic of source and destination are same 
	
	    while (herustic[sx][sy]!= herustic[dx][dy])
    196c:	43 c0       	rjmp	.+134    	; 0x19f4 <call_astar+0x110>
	     {
                //find out the open_list 
        		find_openlist(sx, sy);
    196e:	b4 01       	movw	r22, r8
    1970:	c8 01       	movw	r24, r16
    1972:	ae de       	rcall	.-676    	; 0x16d0 <find_openlist>
				
				//to find minimum value smin is initialized to 1st element
	        	smin = open_list[0];
    1974:	f7 01       	movw	r30, r14
    1976:	40 81       	ld	r20, Z
    1978:	51 81       	ldd	r21, Z+1	; 0x01
				//finds out the minimum value
		        for (i = 0; i < 4; i++)
    197a:	86 2d       	mov	r24, r6
    197c:	97 2d       	mov	r25, r7
		        {
                      
		     	    if (open_list[i]<smin )
    197e:	21 91       	ld	r18, Z+
    1980:	31 91       	ld	r19, Z+
    1982:	24 17       	cp	r18, r20
    1984:	35 07       	cpc	r19, r21
    1986:	14 f4       	brge	.+4      	; 0x198c <call_astar+0xa8>
    1988:	ec 01       	movw	r28, r24
        			{ 
						    smin = open_list[i];
    198a:	a9 01       	movw	r20, r18
        		find_openlist(sx, sy);
				
				//to find minimum value smin is initialized to 1st element
	        	smin = open_list[0];
				//finds out the minimum value
		        for (i = 0; i < 4; i++)
    198c:	01 96       	adiw	r24, 0x01	; 1
    198e:	84 30       	cpi	r24, 0x04	; 4
    1990:	91 05       	cpc	r25, r1
    1992:	a9 f7       	brne	.-22     	; 0x197e <call_astar+0x9a>
    1994:	ce 01       	movw	r24, r28
    1996:	b0 92 7e 02 	sts	0x027E, r11
    199a:	a0 92 7d 02 	sts	0x027D, r10
                //by the end as a index value of minimum herustic 
				
				//following codes to reduce the error between source and node 
		        
				//if element equal to zero then next nearest node is west node  
				if(element==0)
    199e:	20 97       	sbiw	r28, 0x00	; 0
    19a0:	71 f4       	brne	.+28     	; 0x19be <call_astar+0xda>
		        {
                      //west cell has same x coordinate ,y coordinate reduces by 1 
			           sx=sx;
					   
					  //if x coordinate is 5 or 3 then wall and zig_zag are present each two node are present as per the arena array hence one node is bypassed
			         if(sx==5||sx==3)
    19a2:	05 30       	cpi	r16, 0x05	; 5
    19a4:	11 05       	cpc	r17, r1
    19a6:	19 f0       	breq	.+6      	; 0x19ae <call_astar+0xca>
    19a8:	03 30       	cpi	r16, 0x03	; 3
    19aa:	11 05       	cpc	r17, r1
    19ac:	21 f4       	brne	.+8      	; 0x19b6 <call_astar+0xd2>
			          {
				          sy=sy-2;
    19ae:	f2 e0       	ldi	r31, 0x02	; 2
    19b0:	8f 1a       	sub	r8, r31
    19b2:	91 08       	sbc	r9, r1
    19b4:	1b c0       	rjmp	.+54     	; 0x19ec <call_astar+0x108>
			          }
					 //y value is reduce by 1
			         else
					 {
				       sy=sy-1;
    19b6:	21 e0       	ldi	r18, 0x01	; 1
    19b8:	82 1a       	sub	r8, r18
    19ba:	91 08       	sbc	r9, r1
    19bc:	17 c0       	rjmp	.+46     	; 0x19ec <call_astar+0x108>
			         }
		        }
				
			//if element equal to zero then next nearest node is east node  	
		       if(element==1)
    19be:	c1 30       	cpi	r28, 0x01	; 1
    19c0:	d1 05       	cpc	r29, r1
    19c2:	71 f4       	brne	.+28     	; 0x19e0 <call_astar+0xfc>
		       {
				     //east cell has same x coordinate ,y coordinate added by 1
			          sx=sx;
					 //if x coordinate is 5 or 3 then wall and zig_zag are present each two node are present as per the arena array hence one node is bypassed 
			        if(sx==5||sx==3)
    19c4:	05 30       	cpi	r16, 0x05	; 5
    19c6:	11 05       	cpc	r17, r1
    19c8:	19 f0       	breq	.+6      	; 0x19d0 <call_astar+0xec>
    19ca:	03 30       	cpi	r16, 0x03	; 3
    19cc:	11 05       	cpc	r17, r1
    19ce:	21 f4       	brne	.+8      	; 0x19d8 <call_astar+0xf4>
			         {
				        sy=sy+2;
    19d0:	32 e0       	ldi	r19, 0x02	; 2
    19d2:	83 0e       	add	r8, r19
    19d4:	91 1c       	adc	r9, r1
    19d6:	0e c0       	rjmp	.+28     	; 0x19f4 <call_astar+0x110>
			         }
					 
					 //y value gets added by 1
			        else
					{
				        sy=sy+1;
    19d8:	8f ef       	ldi	r24, 0xFF	; 255
    19da:	88 1a       	sub	r8, r24
    19dc:	98 0a       	sbc	r9, r24
    19de:	0a c0       	rjmp	.+20     	; 0x19f4 <call_astar+0x110>
			        }
		        }
				
			 //if element equal to zero then next nearest node is north node  	
		      if(element==2)
    19e0:	c2 30       	cpi	r28, 0x02	; 2
    19e2:	d1 05       	cpc	r29, r1
    19e4:	19 f4       	brne	.+6      	; 0x19ec <call_astar+0x108>
		       {
				   //north cell has same y coordinate ,x coordinate reduces by 1
			       sx=sx-1;
    19e6:	01 50       	subi	r16, 0x01	; 1
    19e8:	11 09       	sbc	r17, r1
    19ea:	04 c0       	rjmp	.+8      	; 0x19f4 <call_astar+0x110>
			       sy=sy;
		       }
			   
			  //if element equal to zero then next nearest node is south node  	
		      if(element==3)
    19ec:	03 97       	sbiw	r24, 0x03	; 3
    19ee:	11 f4       	brne	.+4      	; 0x19f4 <call_astar+0x110>
		       {
				   //south cell has same y coordinate ,x coordinate added by 1
			      sx=sx+1;
    19f0:	0f 5f       	subi	r16, 0xFF	; 255
    19f2:	1f 4f       	sbci	r17, 0xFF	; 255
	     dx=cordinates[0];
	     dy=cordinates[1];

           //repeats until the herustic of source and destination are same 
	
	    while (herustic[sx][sy]!= herustic[dx][dy])
    19f4:	f8 01       	movw	r30, r16
    19f6:	ee 0f       	add	r30, r30
    19f8:	ff 1f       	adc	r31, r31
    19fa:	ee 0f       	add	r30, r30
    19fc:	ff 1f       	adc	r31, r31
    19fe:	e0 0f       	add	r30, r16
    1a00:	f1 1f       	adc	r31, r17
    1a02:	e8 0d       	add	r30, r8
    1a04:	f9 1d       	adc	r31, r9
    1a06:	ee 0f       	add	r30, r30
    1a08:	ff 1f       	adc	r31, r31
    1a0a:	e5 57       	subi	r30, 0x75	; 117
    1a0c:	fd 4f       	sbci	r31, 0xFD	; 253
    1a0e:	20 81       	ld	r18, Z
    1a10:	31 81       	ldd	r19, Z+1	; 0x01
    1a12:	f6 01       	movw	r30, r12
    1a14:	80 81       	ld	r24, Z
    1a16:	91 81       	ldd	r25, Z+1	; 0x01
    1a18:	28 17       	cp	r18, r24
    1a1a:	39 07       	cpc	r19, r25
    1a1c:	09 f0       	breq	.+2      	; 0x1a20 <call_astar+0x13c>
    1a1e:	a7 cf       	rjmp	.-178    	; 0x196e <call_astar+0x8a>


	      }
	
	    //the final vertex to be traveled 
	     x_cor[m]=sx;
    1a20:	80 91 4e 02 	lds	r24, 0x024E
    1a24:	90 91 4f 02 	lds	r25, 0x024F
    1a28:	88 0f       	add	r24, r24
    1a2a:	99 1f       	adc	r25, r25
    1a2c:	fc 01       	movw	r30, r24
    1a2e:	eb 51       	subi	r30, 0x1B	; 27
    1a30:	fd 4f       	sbci	r31, 0xFD	; 253
    1a32:	11 83       	std	Z+1, r17	; 0x01
    1a34:	00 83       	st	Z, r16
	     y_cor[m]=sy;
    1a36:	fc 01       	movw	r30, r24
    1a38:	e4 5a       	subi	r30, 0xA4	; 164
    1a3a:	fd 4f       	sbci	r31, 0xFD	; 253
    1a3c:	91 82       	std	Z+1, r9	; 0x01
    1a3e:	80 82       	st	Z, r8

}
    1a40:	df 91       	pop	r29
    1a42:	cf 91       	pop	r28
    1a44:	1f 91       	pop	r17
    1a46:	0f 91       	pop	r16
    1a48:	ff 90       	pop	r15
    1a4a:	ef 90       	pop	r14
    1a4c:	df 90       	pop	r13
    1a4e:	cf 90       	pop	r12
    1a50:	bf 90       	pop	r11
    1a52:	af 90       	pop	r10
    1a54:	9f 90       	pop	r9
    1a56:	8f 90       	pop	r8
    1a58:	7f 90       	pop	r7
    1a5a:	6f 90       	pop	r6
    1a5c:	08 95       	ret

00001a5e <execute_path>:
*Example call : execute_path('g','i');
*/


void execute_path(char des,char source)
{
    1a5e:	ef 92       	push	r14
    1a60:	ff 92       	push	r15
    1a62:	0f 93       	push	r16
    1a64:	1f 93       	push	r17
    1a66:	cf 93       	push	r28
    1a68:	df 93       	push	r29
    1a6a:	96 2f       	mov	r25, r22
      //iteration variable 
      int n=0;
      
	  //check right to left approach 
	  if(source =='g'||source=='s'||source=='p'||source=='r'||source=='4'||source=='2')
    1a6c:	67 36       	cpi	r22, 0x67	; 103
    1a6e:	59 f0       	breq	.+22     	; 0x1a86 <execute_path+0x28>
    1a70:	60 37       	cpi	r22, 0x70	; 112
    1a72:	49 f0       	breq	.+18     	; 0x1a86 <execute_path+0x28>
    1a74:	2e e8       	ldi	r18, 0x8E	; 142
    1a76:	26 0f       	add	r18, r22
    1a78:	22 30       	cpi	r18, 0x02	; 2
    1a7a:	28 f0       	brcs	.+10     	; 0x1a86 <execute_path+0x28>
    1a7c:	64 33       	cpi	r22, 0x34	; 52
    1a7e:	19 f0       	breq	.+6      	; 0x1a86 <execute_path+0x28>
    1a80:	62 33       	cpi	r22, 0x32	; 50
    1a82:	09 f0       	breq	.+2      	; 0x1a86 <execute_path+0x28>
    1a84:	5c c0       	rjmp	.+184    	; 0x1b3e <execute_path+0xe0>
       {     
		    //source and destination are interchanged
            call_astar(source,des);
    1a86:	68 2f       	mov	r22, r24
    1a88:	89 2f       	mov	r24, r25
    1a8a:	2c df       	rcall	.-424    	; 0x18e4 <call_astar>
            
		   //cordinates are executed in reverse order 
           for(n=m-1;n>=0;n--)
    1a8c:	e0 90 4e 02 	lds	r14, 0x024E
    1a90:	f0 90 4f 02 	lds	r15, 0x024F
    1a94:	87 01       	movw	r16, r14
    1a96:	01 50       	subi	r16, 0x01	; 1
    1a98:	11 09       	sbc	r17, r1
    1a9a:	11 23       	and	r17, r17
    1a9c:	0c f4       	brge	.+2      	; 0x1aa0 <execute_path+0x42>
    1a9e:	a0 c0       	rjmp	.+320    	; 0x1be0 <execute_path+0x182>
    1aa0:	c7 01       	movw	r24, r14
    1aa2:	88 0f       	add	r24, r24
    1aa4:	99 1f       	adc	r25, r25
    1aa6:	9c 01       	movw	r18, r24
    1aa8:	2b 51       	subi	r18, 0x1B	; 27
    1aaa:	3d 4f       	sbci	r19, 0xFD	; 253
    1aac:	79 01       	movw	r14, r18
    1aae:	e8 01       	movw	r28, r16
    1ab0:	cc 0f       	add	r28, r28
    1ab2:	dd 1f       	adc	r29, r29
    1ab4:	c4 5a       	subi	r28, 0xA4	; 164
    1ab6:	dd 4f       	sbci	r29, 0xFD	; 253
           {
                // if x=x+1 and y>y+1 east direction   
              if(x_cor[n]==x_cor[n+1]&&y_cor[n]>y_cor[n+1])
    1ab8:	f7 01       	movw	r30, r14
    1aba:	32 91       	ld	r19, -Z
    1abc:	22 91       	ld	r18, -Z
    1abe:	7f 01       	movw	r14, r30
    1ac0:	82 81       	ldd	r24, Z+2	; 0x02
    1ac2:	93 81       	ldd	r25, Z+3	; 0x03
    1ac4:	28 17       	cp	r18, r24
    1ac6:	39 07       	cpc	r19, r25
    1ac8:	a1 f4       	brne	.+40     	; 0x1af2 <execute_path+0x94>
    1aca:	28 81       	ld	r18, Y
    1acc:	39 81       	ldd	r19, Y+1	; 0x01
    1ace:	8a 81       	ldd	r24, Y+2	; 0x02
    1ad0:	9b 81       	ldd	r25, Y+3	; 0x03
    1ad2:	82 17       	cp	r24, r18
    1ad4:	93 07       	cpc	r25, r19
    1ad6:	2c f4       	brge	.+10     	; 0x1ae2 <execute_path+0x84>
               {
                  change_direction('E');
    1ad8:	85 e4       	ldi	r24, 0x45	; 69
    1ada:	5d de       	rcall	.-838    	; 0x1796 <change_direction>
                   node();
    1adc:	0e 94 d9 04 	call	0x9b2	; 0x9b2 <node>
    1ae0:	25 c0       	rjmp	.+74     	; 0x1b2c <execute_path+0xce>
               }
			   // if x=x+1 and y<y+1 west direction 
              else if (x_cor[n]==x_cor[n+1]&&y_cor[n]<y_cor[n+1])
    1ae2:	28 17       	cp	r18, r24
    1ae4:	39 07       	cpc	r19, r25
    1ae6:	14 f5       	brge	.+68     	; 0x1b2c <execute_path+0xce>
              {
                  change_direction('W');
    1ae8:	87 e5       	ldi	r24, 0x57	; 87
    1aea:	55 de       	rcall	.-854    	; 0x1796 <change_direction>
                  node();  
    1aec:	0e 94 d9 04 	call	0x9b2	; 0x9b2 <node>
    1af0:	1d c0       	rjmp	.+58     	; 0x1b2c <execute_path+0xce>
			  }
			   //if x<x+1 and y=y+1 north direction 
              else if (x_cor[n]<x_cor[n+1]&&y_cor[n]==y_cor[n+1])
    1af2:	28 17       	cp	r18, r24
    1af4:	39 07       	cpc	r19, r25
    1af6:	64 f4       	brge	.+24     	; 0x1b10 <execute_path+0xb2>
    1af8:	68 81       	ld	r22, Y
    1afa:	79 81       	ldd	r23, Y+1	; 0x01
    1afc:	4a 81       	ldd	r20, Y+2	; 0x02
    1afe:	5b 81       	ldd	r21, Y+3	; 0x03
    1b00:	64 17       	cp	r22, r20
    1b02:	75 07       	cpc	r23, r21
    1b04:	29 f4       	brne	.+10     	; 0x1b10 <execute_path+0xb2>
              {
                 change_direction('N');
    1b06:	8e e4       	ldi	r24, 0x4E	; 78
    1b08:	46 de       	rcall	.-884    	; 0x1796 <change_direction>
                  node();
    1b0a:	0e 94 d9 04 	call	0x9b2	; 0x9b2 <node>
    1b0e:	0e c0       	rjmp	.+28     	; 0x1b2c <execute_path+0xce>
              }
			  //if x>x+1 and y=y+1 south direction 
             else if(x_cor[n]>x_cor[n+1]&&y_cor[n]==y_cor[n+1])
    1b10:	82 17       	cp	r24, r18
    1b12:	93 07       	cpc	r25, r19
    1b14:	5c f4       	brge	.+22     	; 0x1b2c <execute_path+0xce>
    1b16:	28 81       	ld	r18, Y
    1b18:	39 81       	ldd	r19, Y+1	; 0x01
    1b1a:	8a 81       	ldd	r24, Y+2	; 0x02
    1b1c:	9b 81       	ldd	r25, Y+3	; 0x03
    1b1e:	28 17       	cp	r18, r24
    1b20:	39 07       	cpc	r19, r25
    1b22:	21 f4       	brne	.+8      	; 0x1b2c <execute_path+0xce>
             {
               change_direction('S');
    1b24:	83 e5       	ldi	r24, 0x53	; 83
    1b26:	37 de       	rcall	.-914    	; 0x1796 <change_direction>
                node();
    1b28:	0e 94 d9 04 	call	0x9b2	; 0x9b2 <node>
       {     
		    //source and destination are interchanged
            call_astar(source,des);
            
		   //cordinates are executed in reverse order 
           for(n=m-1;n>=0;n--)
    1b2c:	01 50       	subi	r16, 0x01	; 1
    1b2e:	11 09       	sbc	r17, r1
    1b30:	22 97       	sbiw	r28, 0x02	; 2
    1b32:	0f 3f       	cpi	r16, 0xFF	; 255
    1b34:	ff ef       	ldi	r31, 0xFF	; 255
    1b36:	1f 07       	cpc	r17, r31
    1b38:	09 f0       	breq	.+2      	; 0x1b3c <execute_path+0xde>
    1b3a:	be cf       	rjmp	.-132    	; 0x1ab8 <execute_path+0x5a>
    1b3c:	51 c0       	rjmp	.+162    	; 0x1be0 <execute_path+0x182>
      }
	  //if left to right approach 
     else
      {
         //calls astar 
         call_astar(des,source);
    1b3e:	d2 de       	rcall	.-604    	; 0x18e4 <call_astar>
    1b40:	cc e5       	ldi	r28, 0x5C	; 92
    1b42:	d2 e0       	ldi	r29, 0x02	; 2
    1b44:	0f 2e       	mov	r0, r31
    1b46:	f5 ee       	ldi	r31, 0xE5	; 229
    1b48:	ef 2e       	mov	r14, r31
    1b4a:	f2 e0       	ldi	r31, 0x02	; 2
    1b4c:	ff 2e       	mov	r15, r31
    1b4e:	f0 2d       	mov	r31, r0
          
		  //executes in correct order
	       for(n=0;n<m;n++)
    1b50:	00 e0       	ldi	r16, 0x00	; 0
    1b52:	10 e0       	ldi	r17, 0x00	; 0
    1b54:	3d c0       	rjmp	.+122    	; 0x1bd0 <execute_path+0x172>
           {
			   //x=x+1 and y<y+1 east direction 
              if(x_cor[n]==x_cor[n+1]&&y_cor[n]<y_cor[n+1])
    1b56:	f7 01       	movw	r30, r14
    1b58:	21 91       	ld	r18, Z+
    1b5a:	31 91       	ld	r19, Z+
    1b5c:	7f 01       	movw	r14, r30
    1b5e:	0f 5f       	subi	r16, 0xFF	; 255
    1b60:	1f 4f       	sbci	r17, 0xFF	; 255
    1b62:	80 81       	ld	r24, Z
    1b64:	91 81       	ldd	r25, Z+1	; 0x01
    1b66:	28 17       	cp	r18, r24
    1b68:	39 07       	cpc	r19, r25
    1b6a:	a1 f4       	brne	.+40     	; 0x1b94 <execute_path+0x136>
    1b6c:	28 81       	ld	r18, Y
    1b6e:	39 81       	ldd	r19, Y+1	; 0x01
    1b70:	8a 81       	ldd	r24, Y+2	; 0x02
    1b72:	9b 81       	ldd	r25, Y+3	; 0x03
    1b74:	28 17       	cp	r18, r24
    1b76:	39 07       	cpc	r19, r25
    1b78:	2c f4       	brge	.+10     	; 0x1b84 <execute_path+0x126>
               {
                 change_direction('E');
    1b7a:	85 e4       	ldi	r24, 0x45	; 69
    1b7c:	0c de       	rcall	.-1000   	; 0x1796 <change_direction>
                   node();
    1b7e:	0e 94 d9 04 	call	0x9b2	; 0x9b2 <node>
    1b82:	25 c0       	rjmp	.+74     	; 0x1bce <execute_path+0x170>
               }
			   //x=x+1 and y>y+1 west direction
              else if (x_cor[n]==x_cor[n+1]&&y_cor[n]>y_cor[n+1])
    1b84:	82 17       	cp	r24, r18
    1b86:	93 07       	cpc	r25, r19
    1b88:	14 f5       	brge	.+68     	; 0x1bce <execute_path+0x170>
              {
               change_direction('W');
    1b8a:	87 e5       	ldi	r24, 0x57	; 87
    1b8c:	04 de       	rcall	.-1016   	; 0x1796 <change_direction>
               node();
    1b8e:	0e 94 d9 04 	call	0x9b2	; 0x9b2 <node>
    1b92:	1d c0       	rjmp	.+58     	; 0x1bce <execute_path+0x170>
			  }
			  //x>x+1 and y=y+1 north direction
             else if (x_cor[n]>x_cor[n+1]&&y_cor[n]==y_cor[n+1])
    1b94:	82 17       	cp	r24, r18
    1b96:	93 07       	cpc	r25, r19
    1b98:	64 f4       	brge	.+24     	; 0x1bb2 <execute_path+0x154>
    1b9a:	68 81       	ld	r22, Y
    1b9c:	79 81       	ldd	r23, Y+1	; 0x01
    1b9e:	4a 81       	ldd	r20, Y+2	; 0x02
    1ba0:	5b 81       	ldd	r21, Y+3	; 0x03
    1ba2:	64 17       	cp	r22, r20
    1ba4:	75 07       	cpc	r23, r21
    1ba6:	29 f4       	brne	.+10     	; 0x1bb2 <execute_path+0x154>
             {
              change_direction('N');
    1ba8:	8e e4       	ldi	r24, 0x4E	; 78
    1baa:	f5 dd       	rcall	.-1046   	; 0x1796 <change_direction>
               node();
    1bac:	0e 94 d9 04 	call	0x9b2	; 0x9b2 <node>
    1bb0:	0e c0       	rjmp	.+28     	; 0x1bce <execute_path+0x170>
             }
			 //x<x+1 and y=y+1 south direction
             else if(x_cor[n]<x_cor[n+1]&&y_cor[n]==y_cor[n+1])
    1bb2:	28 17       	cp	r18, r24
    1bb4:	39 07       	cpc	r19, r25
    1bb6:	5c f4       	brge	.+22     	; 0x1bce <execute_path+0x170>
    1bb8:	28 81       	ld	r18, Y
    1bba:	39 81       	ldd	r19, Y+1	; 0x01
    1bbc:	8a 81       	ldd	r24, Y+2	; 0x02
    1bbe:	9b 81       	ldd	r25, Y+3	; 0x03
    1bc0:	28 17       	cp	r18, r24
    1bc2:	39 07       	cpc	r19, r25
    1bc4:	21 f4       	brne	.+8      	; 0x1bce <execute_path+0x170>
             {
             change_direction('S');
    1bc6:	83 e5       	ldi	r24, 0x53	; 83
    1bc8:	e6 dd       	rcall	.-1076   	; 0x1796 <change_direction>
              node();
    1bca:	0e 94 d9 04 	call	0x9b2	; 0x9b2 <node>
    1bce:	22 96       	adiw	r28, 0x02	; 2
      {
         //calls astar 
         call_astar(des,source);
          
		  //executes in correct order
	       for(n=0;n<m;n++)
    1bd0:	80 91 4e 02 	lds	r24, 0x024E
    1bd4:	90 91 4f 02 	lds	r25, 0x024F
    1bd8:	08 17       	cp	r16, r24
    1bda:	19 07       	cpc	r17, r25
    1bdc:	0c f4       	brge	.+2      	; 0x1be0 <execute_path+0x182>
    1bde:	bb cf       	rjmp	.-138    	; 0x1b56 <execute_path+0xf8>
              node();
		     }
          }
       }
	 //sets index vales to zero 
	 m=0;	 
    1be0:	10 92 4f 02 	sts	0x024F, r1
    1be4:	10 92 4e 02 	sts	0x024E, r1
}
    1be8:	df 91       	pop	r29
    1bea:	cf 91       	pop	r28
    1bec:	1f 91       	pop	r17
    1bee:	0f 91       	pop	r16
    1bf0:	ff 90       	pop	r15
    1bf2:	ef 90       	pop	r14
    1bf4:	08 95       	ret

00001bf6 <guide_pick>:


void guide_pick(int ware_house)
{
    //executes the cases depending on warehouse  
	switch (ware_house)
    1bf6:	01 97       	sbiw	r24, 0x01	; 1
    1bf8:	8c 30       	cpi	r24, 0x0C	; 12
    1bfa:	91 05       	cpc	r25, r1
    1bfc:	08 f0       	brcs	.+2      	; 0x1c00 <guide_pick+0xa>
    1bfe:	d0 c0       	rjmp	.+416    	; 0x1da0 <guide_pick+0x1aa>
    1c00:	8e 58       	subi	r24, 0x8E	; 142
    1c02:	9f 4f       	sbci	r25, 0xFF	; 255
    1c04:	fc 01       	movw	r30, r24
    1c06:	4c c5       	rjmp	.+2712   	; 0x26a0 <__tablejump2__>
	{
              //for warehouse 1
	   case 1: execute_path('b',present);
    1c08:	60 91 1e 02 	lds	r22, 0x021E
    1c0c:	82 e6       	ldi	r24, 0x62	; 98
    1c0e:	27 df       	rcall	.-434    	; 0x1a5e <execute_path>
	           //depending on the current direction picking option are chosen 
	           if(current_direction=='N')
    1c10:	80 91 1f 02 	lds	r24, 0x021F
    1c14:	8e 34       	cpi	r24, 0x4E	; 78
    1c16:	11 f4       	brne	.+4      	; 0x1c1c <guide_pick+0x26>
			   {
				   left_pick();
    1c18:	bd d8       	rcall	.-3718   	; 0xd94 <left_pick>
    1c1a:	03 c0       	rjmp	.+6      	; 0x1c22 <guide_pick+0x2c>
			   }
			   else if (current_direction=='S')
    1c1c:	83 35       	cpi	r24, 0x53	; 83
    1c1e:	09 f4       	brne	.+2      	; 0x1c22 <guide_pick+0x2c>
			   {
				   right_pick();
    1c20:	0a d9       	rcall	.-3564   	; 0xe36 <right_pick>
			   }
			   //sets source node 
			   present='b';
    1c22:	82 e6       	ldi	r24, 0x62	; 98
    1c24:	80 93 1e 02 	sts	0x021E, r24
	           break;
    1c28:	08 95       	ret
			   //for warehouse 2
	   case 2: execute_path('b',present);
    1c2a:	60 91 1e 02 	lds	r22, 0x021E
    1c2e:	82 e6       	ldi	r24, 0x62	; 98
    1c30:	16 df       	rcall	.-468    	; 0x1a5e <execute_path>
	           //depending on the current direction picking option are chosen
	           if(current_direction=='N')
    1c32:	80 91 1f 02 	lds	r24, 0x021F
    1c36:	8e 34       	cpi	r24, 0x4E	; 78
    1c38:	11 f4       	brne	.+4      	; 0x1c3e <guide_pick+0x48>
			   {
				   right_pick();
    1c3a:	fd d8       	rcall	.-3590   	; 0xe36 <right_pick>
    1c3c:	03 c0       	rjmp	.+6      	; 0x1c44 <guide_pick+0x4e>
			   }
			   else if (current_direction=='S')
    1c3e:	83 35       	cpi	r24, 0x53	; 83
    1c40:	09 f4       	brne	.+2      	; 0x1c44 <guide_pick+0x4e>
			   {
				   left_pick();
    1c42:	a8 d8       	rcall	.-3760   	; 0xd94 <left_pick>
			   }
			   //sets source node
			   present='b';
    1c44:	82 e6       	ldi	r24, 0x62	; 98
    1c46:	80 93 1e 02 	sts	0x021E, r24
	           break;
    1c4a:	08 95       	ret
			   //for warehouse 3
        case 3: execute_path('g',present);
    1c4c:	60 91 1e 02 	lds	r22, 0x021E
    1c50:	87 e6       	ldi	r24, 0x67	; 103
    1c52:	05 df       	rcall	.-502    	; 0x1a5e <execute_path>
		      //depending on the current direction picking option are chosen
              if(current_direction=='N')
    1c54:	80 91 1f 02 	lds	r24, 0x021F
    1c58:	8e 34       	cpi	r24, 0x4E	; 78
    1c5a:	11 f4       	brne	.+4      	; 0x1c60 <guide_pick+0x6a>
              {
	              left_pick();
    1c5c:	9b d8       	rcall	.-3786   	; 0xd94 <left_pick>
    1c5e:	03 c0       	rjmp	.+6      	; 0x1c66 <guide_pick+0x70>
              }
              else if (current_direction=='S')
    1c60:	83 35       	cpi	r24, 0x53	; 83
    1c62:	09 f4       	brne	.+2      	; 0x1c66 <guide_pick+0x70>
              {
	              right_pick();
    1c64:	e8 d8       	rcall	.-3632   	; 0xe36 <right_pick>
              }
			  //sets source node
              present='g';
    1c66:	87 e6       	ldi	r24, 0x67	; 103
    1c68:	80 93 1e 02 	sts	0x021E, r24
              break;
    1c6c:	08 95       	ret
			  //for warehouse 4
		case 4: execute_path('g',present);
    1c6e:	60 91 1e 02 	lds	r22, 0x021E
    1c72:	87 e6       	ldi	r24, 0x67	; 103
    1c74:	f4 de       	rcall	.-536    	; 0x1a5e <execute_path>
		       //depending on the current direction picking option are chosen
		       if(current_direction=='N')
    1c76:	80 91 1f 02 	lds	r24, 0x021F
    1c7a:	8e 34       	cpi	r24, 0x4E	; 78
    1c7c:	11 f4       	brne	.+4      	; 0x1c82 <guide_pick+0x8c>
		       {
			       right_pick();
    1c7e:	db d8       	rcall	.-3658   	; 0xe36 <right_pick>
    1c80:	03 c0       	rjmp	.+6      	; 0x1c88 <guide_pick+0x92>
		       }
		       else if (current_direction=='S')
    1c82:	83 35       	cpi	r24, 0x53	; 83
    1c84:	09 f4       	brne	.+2      	; 0x1c88 <guide_pick+0x92>
		       {
			       left_pick();
    1c86:	86 d8       	rcall	.-3828   	; 0xd94 <left_pick>
		       }
			   //sets source node
		       present='g';
    1c88:	87 e6       	ldi	r24, 0x67	; 103
    1c8a:	80 93 1e 02 	sts	0x021E, r24
		       break;
    1c8e:	08 95       	ret
			   //for warehouse 5
		case 5: execute_path('c',present);
    1c90:	60 91 1e 02 	lds	r22, 0x021E
    1c94:	83 e6       	ldi	r24, 0x63	; 99
    1c96:	e3 de       	rcall	.-570    	; 0x1a5e <execute_path>
		       //depending on the current direction picking option are chosen
		       if(current_direction=='N')
    1c98:	80 91 1f 02 	lds	r24, 0x021F
    1c9c:	8e 34       	cpi	r24, 0x4E	; 78
    1c9e:	11 f4       	brne	.+4      	; 0x1ca4 <guide_pick+0xae>
		       {
			       left_pick();
    1ca0:	79 d8       	rcall	.-3854   	; 0xd94 <left_pick>
    1ca2:	03 c0       	rjmp	.+6      	; 0x1caa <guide_pick+0xb4>
		       }
		       else if (current_direction=='S')
    1ca4:	83 35       	cpi	r24, 0x53	; 83
    1ca6:	09 f4       	brne	.+2      	; 0x1caa <guide_pick+0xb4>
		       {
			       right_pick();
    1ca8:	c6 d8       	rcall	.-3700   	; 0xe36 <right_pick>
		       }
			   //sets source node
		       present='c';
    1caa:	83 e6       	ldi	r24, 0x63	; 99
    1cac:	80 93 1e 02 	sts	0x021E, r24
		       break;
    1cb0:	08 95       	ret
			   //for warehouse 6
		case 6 :execute_path('c',present);
    1cb2:	60 91 1e 02 	lds	r22, 0x021E
    1cb6:	83 e6       	ldi	r24, 0x63	; 99
    1cb8:	d2 de       	rcall	.-604    	; 0x1a5e <execute_path>
		        //depending on the current direction picking option are chosen
		        if(current_direction=='N')
    1cba:	80 91 1f 02 	lds	r24, 0x021F
    1cbe:	8e 34       	cpi	r24, 0x4E	; 78
    1cc0:	11 f4       	brne	.+4      	; 0x1cc6 <guide_pick+0xd0>
		        {
			        right_pick();
    1cc2:	b9 d8       	rcall	.-3726   	; 0xe36 <right_pick>
    1cc4:	03 c0       	rjmp	.+6      	; 0x1ccc <guide_pick+0xd6>
		        }
		        else if (current_direction=='S')
    1cc6:	83 35       	cpi	r24, 0x53	; 83
    1cc8:	09 f4       	brne	.+2      	; 0x1ccc <guide_pick+0xd6>
		        {
			        left_pick();
    1cca:	64 d8       	rcall	.-3896   	; 0xd94 <left_pick>
		        }
				//sets source node
		        present='c';
    1ccc:	83 e6       	ldi	r24, 0x63	; 99
    1cce:	80 93 1e 02 	sts	0x021E, r24
		        break;
    1cd2:	08 95       	ret
				//for warehouse 7
		case 7:	 execute_path('s',present);
    1cd4:	60 91 1e 02 	lds	r22, 0x021E
    1cd8:	83 e7       	ldi	r24, 0x73	; 115
    1cda:	c1 de       	rcall	.-638    	; 0x1a5e <execute_path>
		         //depending on the current direction picking option are chosen
			     if(current_direction=='N')
    1cdc:	80 91 1f 02 	lds	r24, 0x021F
    1ce0:	8e 34       	cpi	r24, 0x4E	; 78
    1ce2:	11 f4       	brne	.+4      	; 0x1ce8 <guide_pick+0xf2>
			     {
				     left_pick();
    1ce4:	57 d8       	rcall	.-3922   	; 0xd94 <left_pick>
    1ce6:	03 c0       	rjmp	.+6      	; 0x1cee <guide_pick+0xf8>
			     }
			     else if (current_direction=='S')
    1ce8:	83 35       	cpi	r24, 0x53	; 83
    1cea:	09 f4       	brne	.+2      	; 0x1cee <guide_pick+0xf8>
			     {
				     right_pick();
    1cec:	a4 d8       	rcall	.-3768   	; 0xe36 <right_pick>
			     }
				 //sets source node
			     present='s';
    1cee:	83 e7       	ldi	r24, 0x73	; 115
    1cf0:	80 93 1e 02 	sts	0x021E, r24
			     break;
    1cf4:	08 95       	ret
				 //for warehouse 8
		case 8: execute_path('s',present);
    1cf6:	60 91 1e 02 	lds	r22, 0x021E
    1cfa:	83 e7       	ldi	r24, 0x73	; 115
    1cfc:	b0 de       	rcall	.-672    	; 0x1a5e <execute_path>
		        //depending on the current direction picking option are chosen
		        if(current_direction=='N')
    1cfe:	80 91 1f 02 	lds	r24, 0x021F
    1d02:	8e 34       	cpi	r24, 0x4E	; 78
    1d04:	11 f4       	brne	.+4      	; 0x1d0a <guide_pick+0x114>
		        {
			        right_pick();
    1d06:	97 d8       	rcall	.-3794   	; 0xe36 <right_pick>
    1d08:	03 c0       	rjmp	.+6      	; 0x1d10 <guide_pick+0x11a>
		        }
		        else if (current_direction=='S')
    1d0a:	83 35       	cpi	r24, 0x53	; 83
    1d0c:	09 f4       	brne	.+2      	; 0x1d10 <guide_pick+0x11a>
		        {
			        left_pick();
    1d0e:	42 d8       	rcall	.-3964   	; 0xd94 <left_pick>
		        }
				//sets source node
		        present='s';
    1d10:	83 e7       	ldi	r24, 0x73	; 115
    1d12:	80 93 1e 02 	sts	0x021E, r24
		        break;
    1d16:	08 95       	ret
				//for warehouse 9
		case 9:execute_path('e',present);
    1d18:	60 91 1e 02 	lds	r22, 0x021E
    1d1c:	85 e6       	ldi	r24, 0x65	; 101
    1d1e:	9f de       	rcall	.-706    	; 0x1a5e <execute_path>
		        //depending on the current direction picking option are chosen
				if(current_direction=='N')
    1d20:	80 91 1f 02 	lds	r24, 0x021F
    1d24:	8e 34       	cpi	r24, 0x4E	; 78
    1d26:	11 f4       	brne	.+4      	; 0x1d2c <guide_pick+0x136>
		        {
			        left_pick();
    1d28:	35 d8       	rcall	.-3990   	; 0xd94 <left_pick>
    1d2a:	03 c0       	rjmp	.+6      	; 0x1d32 <guide_pick+0x13c>
		        }
		        else if (current_direction=='S')
    1d2c:	83 35       	cpi	r24, 0x53	; 83
    1d2e:	09 f4       	brne	.+2      	; 0x1d32 <guide_pick+0x13c>
		        {
			        right_pick();
    1d30:	82 d8       	rcall	.-3836   	; 0xe36 <right_pick>
		        }
				//sets source node
		        present='e';
    1d32:	85 e6       	ldi	r24, 0x65	; 101
    1d34:	80 93 1e 02 	sts	0x021E, r24
		        break;
    1d38:	08 95       	ret
				//for warehouse 10
		case 10:execute_path('e',present);
    1d3a:	60 91 1e 02 	lds	r22, 0x021E
    1d3e:	85 e6       	ldi	r24, 0x65	; 101
    1d40:	8e de       	rcall	.-740    	; 0x1a5e <execute_path>
		        //depending on the current direction picking option are chosen
                if(current_direction=='N')
    1d42:	80 91 1f 02 	lds	r24, 0x021F
    1d46:	8e 34       	cpi	r24, 0x4E	; 78
    1d48:	11 f4       	brne	.+4      	; 0x1d4e <guide_pick+0x158>
                {
	                right_pick();
    1d4a:	75 d8       	rcall	.-3862   	; 0xe36 <right_pick>
    1d4c:	03 c0       	rjmp	.+6      	; 0x1d54 <guide_pick+0x15e>
                }
                else if (current_direction=='S')
    1d4e:	83 35       	cpi	r24, 0x53	; 83
    1d50:	09 f4       	brne	.+2      	; 0x1d54 <guide_pick+0x15e>
                {
	                left_pick();
    1d52:	20 d8       	rcall	.-4032   	; 0xd94 <left_pick>
                }
				//sets source node
                present='e';
    1d54:	85 e6       	ldi	r24, 0x65	; 101
    1d56:	80 93 1e 02 	sts	0x021E, r24
                break;
    1d5a:	08 95       	ret
				//for warehouse 11
		case 11:execute_path('p',present);
    1d5c:	60 91 1e 02 	lds	r22, 0x021E
    1d60:	80 e7       	ldi	r24, 0x70	; 112
    1d62:	7d de       	rcall	.-774    	; 0x1a5e <execute_path>
		         //depending on the current direction picking option are chosen
		         if(current_direction=='N')
    1d64:	80 91 1f 02 	lds	r24, 0x021F
    1d68:	8e 34       	cpi	r24, 0x4E	; 78
    1d6a:	11 f4       	brne	.+4      	; 0x1d70 <guide_pick+0x17a>
		         {
			         left_pick();
    1d6c:	13 d8       	rcall	.-4058   	; 0xd94 <left_pick>
    1d6e:	03 c0       	rjmp	.+6      	; 0x1d76 <guide_pick+0x180>
		         }
		         else if (current_direction=='S')
    1d70:	83 35       	cpi	r24, 0x53	; 83
    1d72:	09 f4       	brne	.+2      	; 0x1d76 <guide_pick+0x180>
		         {
			         right_pick();
    1d74:	60 d8       	rcall	.-3904   	; 0xe36 <right_pick>
		         }
				 //sets source node
		         present='p';
    1d76:	80 e7       	ldi	r24, 0x70	; 112
    1d78:	80 93 1e 02 	sts	0x021E, r24
		         break;
    1d7c:	08 95       	ret
				 //for warehouse 12
		case 12:execute_path('p',present);
    1d7e:	60 91 1e 02 	lds	r22, 0x021E
    1d82:	80 e7       	ldi	r24, 0x70	; 112
    1d84:	6c de       	rcall	.-808    	; 0x1a5e <execute_path>
		        //depending on the current direction picking option are chosen
		        if(current_direction=='N')
    1d86:	80 91 1f 02 	lds	r24, 0x021F
    1d8a:	8e 34       	cpi	r24, 0x4E	; 78
    1d8c:	11 f4       	brne	.+4      	; 0x1d92 <guide_pick+0x19c>
		        {
			        right_pick();
    1d8e:	53 d8       	rcall	.-3930   	; 0xe36 <right_pick>
    1d90:	04 c0       	rjmp	.+8      	; 0x1d9a <guide_pick+0x1a4>
		        }
		        else if (current_direction=='S')
    1d92:	83 35       	cpi	r24, 0x53	; 83
    1d94:	11 f4       	brne	.+4      	; 0x1d9a <guide_pick+0x1a4>
		        {
			        left_pick();
    1d96:	0e 94 ca 06 	call	0xd94	; 0xd94 <left_pick>
		        }
				//sets source node
		        present='p';
    1d9a:	80 e7       	ldi	r24, 0x70	; 112
    1d9c:	80 93 1e 02 	sts	0x021E, r24
    1da0:	08 95       	ret

00001da2 <guide_place>:
*/

void guide_place(int house, int mat)
{
	//if material is zero terminates 
    if(mat==0)
    1da2:	67 2b       	or	r22, r23
    1da4:	09 f4       	brne	.+2      	; 0x1da8 <guide_place+0x6>
    1da6:	92 c0       	rjmp	.+292    	; 0x1ecc <guide_place+0x12a>
    {
        return 0;
    }
	
	//executes the cases depending on warehouse  
	switch(house)
    1da8:	82 30       	cpi	r24, 0x02	; 2
    1daa:	91 05       	cpc	r25, r1
    1dac:	69 f1       	breq	.+90     	; 0x1e08 <guide_place+0x66>
    1dae:	1c f4       	brge	.+6      	; 0x1db6 <guide_place+0x14>
    1db0:	01 97       	sbiw	r24, 0x01	; 1
    1db2:	49 f0       	breq	.+18     	; 0x1dc6 <guide_place+0x24>
    1db4:	08 95       	ret
    1db6:	83 30       	cpi	r24, 0x03	; 3
    1db8:	91 05       	cpc	r25, r1
    1dba:	09 f4       	brne	.+2      	; 0x1dbe <guide_place+0x1c>
    1dbc:	46 c0       	rjmp	.+140    	; 0x1e4a <guide_place+0xa8>
    1dbe:	04 97       	sbiw	r24, 0x04	; 4
    1dc0:	09 f4       	brne	.+2      	; 0x1dc4 <guide_place+0x22>
    1dc2:	64 c0       	rjmp	.+200    	; 0x1e8c <guide_place+0xea>
    1dc4:	08 95       	ret
	{
           //for house 1 
		case 1: execute_path('1',present);
    1dc6:	60 91 1e 02 	lds	r22, 0x021E
    1dca:	81 e3       	ldi	r24, 0x31	; 49
    1dcc:	48 de       	rcall	.-880    	; 0x1a5e <execute_path>
		         //depending on the current direction placing option are chosen
		        if (current_direction=='N')
    1dce:	80 91 1f 02 	lds	r24, 0x021F
    1dd2:	8e 34       	cpi	r24, 0x4E	; 78
    1dd4:	31 f4       	brne	.+12     	; 0x1de2 <guide_place+0x40>
		        {
					left_place(floor_array[0]);
    1dd6:	80 91 14 02 	lds	r24, 0x0214
    1dda:	90 91 15 02 	lds	r25, 0x0215
    1dde:	36 d9       	rcall	.-3476   	; 0x104c <left_place>
    1de0:	0f c0       	rjmp	.+30     	; 0x1e00 <guide_place+0x5e>
		        }
				else if (current_direction=='S')
    1de2:	83 35       	cpi	r24, 0x53	; 83
    1de4:	31 f4       	brne	.+12     	; 0x1df2 <guide_place+0x50>
				{
					right_place(floor_array[0]);
    1de6:	80 91 14 02 	lds	r24, 0x0214
    1dea:	90 91 15 02 	lds	r25, 0x0215
    1dee:	74 d8       	rcall	.-3864   	; 0xed8 <right_place>
    1df0:	07 c0       	rjmp	.+14     	; 0x1e00 <guide_place+0x5e>
				}
				else if (current_direction=='W')
    1df2:	87 35       	cpi	r24, 0x57	; 87
    1df4:	29 f4       	brne	.+10     	; 0x1e00 <guide_place+0x5e>
				{
					staright_place(floor_array[0]);
    1df6:	80 91 14 02 	lds	r24, 0x0214
    1dfa:	90 91 15 02 	lds	r25, 0x0215
    1dfe:	d9 d9       	rcall	.-3150   	; 0x11b2 <staright_place>
				}
				//sets source node
				present='1';
    1e00:	81 e3       	ldi	r24, 0x31	; 49
    1e02:	80 93 1e 02 	sts	0x021E, r24
				break;
    1e06:	08 95       	ret
	       //for house 2
	   case 2: execute_path('2',present);
    1e08:	60 91 1e 02 	lds	r22, 0x021E
    1e0c:	82 e3       	ldi	r24, 0x32	; 50
    1e0e:	27 de       	rcall	.-946    	; 0x1a5e <execute_path>
	           //depending on the current direction placing option are chosen
			   if (current_direction=='N')
    1e10:	80 91 1f 02 	lds	r24, 0x021F
    1e14:	8e 34       	cpi	r24, 0x4E	; 78
    1e16:	31 f4       	brne	.+12     	; 0x1e24 <guide_place+0x82>
	           {
		           right_place(floor_array[1]);
    1e18:	80 91 16 02 	lds	r24, 0x0216
    1e1c:	90 91 17 02 	lds	r25, 0x0217
    1e20:	5b d8       	rcall	.-3914   	; 0xed8 <right_place>
    1e22:	0f c0       	rjmp	.+30     	; 0x1e42 <guide_place+0xa0>
	           }
	           else if (current_direction=='S')
    1e24:	83 35       	cpi	r24, 0x53	; 83
    1e26:	31 f4       	brne	.+12     	; 0x1e34 <guide_place+0x92>
	           {
		           left_place(floor_array[1]);
    1e28:	80 91 16 02 	lds	r24, 0x0216
    1e2c:	90 91 17 02 	lds	r25, 0x0217
    1e30:	0d d9       	rcall	.-3558   	; 0x104c <left_place>
    1e32:	07 c0       	rjmp	.+14     	; 0x1e42 <guide_place+0xa0>
	           }
	           else if (current_direction=='E')
    1e34:	85 34       	cpi	r24, 0x45	; 69
    1e36:	29 f4       	brne	.+10     	; 0x1e42 <guide_place+0xa0>
	           {
		           staright_place(floor_array[1]);
    1e38:	80 91 16 02 	lds	r24, 0x0216
    1e3c:	90 91 17 02 	lds	r25, 0x0217
    1e40:	b8 d9       	rcall	.-3216   	; 0x11b2 <staright_place>
	           }
			   //sets source node
	           present='2';
    1e42:	82 e3       	ldi	r24, 0x32	; 50
    1e44:	80 93 1e 02 	sts	0x021E, r24
			   break;
    1e48:	08 95       	ret
			   //for house 3 
		case 3: execute_path('3',present);
    1e4a:	60 91 1e 02 	lds	r22, 0x021E
    1e4e:	83 e3       	ldi	r24, 0x33	; 51
    1e50:	06 de       	rcall	.-1012   	; 0x1a5e <execute_path>
		       //depending on the current direction placing option are chosen
			   if (current_direction=='N')
    1e52:	80 91 1f 02 	lds	r24, 0x021F
    1e56:	8e 34       	cpi	r24, 0x4E	; 78
    1e58:	31 f4       	brne	.+12     	; 0x1e66 <guide_place+0xc4>
		       {
			       left_place(floor_array[2]);
    1e5a:	80 91 18 02 	lds	r24, 0x0218
    1e5e:	90 91 19 02 	lds	r25, 0x0219
    1e62:	f4 d8       	rcall	.-3608   	; 0x104c <left_place>
    1e64:	0f c0       	rjmp	.+30     	; 0x1e84 <guide_place+0xe2>
		       }
		       else if (current_direction=='S')
    1e66:	83 35       	cpi	r24, 0x53	; 83
    1e68:	31 f4       	brne	.+12     	; 0x1e76 <guide_place+0xd4>
		       {
			       right_place(floor_array[2]);
    1e6a:	80 91 18 02 	lds	r24, 0x0218
    1e6e:	90 91 19 02 	lds	r25, 0x0219
    1e72:	32 d8       	rcall	.-3996   	; 0xed8 <right_place>
    1e74:	07 c0       	rjmp	.+14     	; 0x1e84 <guide_place+0xe2>
		       }
		       else if (current_direction=='W')
    1e76:	87 35       	cpi	r24, 0x57	; 87
    1e78:	29 f4       	brne	.+10     	; 0x1e84 <guide_place+0xe2>
		       {
			       staright_place(floor_array[2]);
    1e7a:	80 91 18 02 	lds	r24, 0x0218
    1e7e:	90 91 19 02 	lds	r25, 0x0219
    1e82:	97 d9       	rcall	.-3282   	; 0x11b2 <staright_place>
		       }
			   //sets source node
		       present='3';
    1e84:	83 e3       	ldi	r24, 0x33	; 51
    1e86:	80 93 1e 02 	sts	0x021E, r24
		       break;
    1e8a:	08 95       	ret
			   //for house 4
        case 4: execute_path('4',present);
    1e8c:	60 91 1e 02 	lds	r22, 0x021E
    1e90:	84 e3       	ldi	r24, 0x34	; 52
    1e92:	e5 dd       	rcall	.-1078   	; 0x1a5e <execute_path>
		         //depending on the current direction placing option are chosen
		        if (current_direction=='N')
    1e94:	80 91 1f 02 	lds	r24, 0x021F
    1e98:	8e 34       	cpi	r24, 0x4E	; 78
    1e9a:	31 f4       	brne	.+12     	; 0x1ea8 <guide_place+0x106>
		        {
			        right_place(floor_array[3]);
    1e9c:	80 91 1a 02 	lds	r24, 0x021A
    1ea0:	90 91 1b 02 	lds	r25, 0x021B
    1ea4:	19 d8       	rcall	.-4046   	; 0xed8 <right_place>
    1ea6:	0f c0       	rjmp	.+30     	; 0x1ec6 <guide_place+0x124>
		        }
		        else if (current_direction=='S')
    1ea8:	83 35       	cpi	r24, 0x53	; 83
    1eaa:	31 f4       	brne	.+12     	; 0x1eb8 <guide_place+0x116>
		        {
			        left_place(floor_array[3]);
    1eac:	80 91 1a 02 	lds	r24, 0x021A
    1eb0:	90 91 1b 02 	lds	r25, 0x021B
    1eb4:	cb d8       	rcall	.-3690   	; 0x104c <left_place>
    1eb6:	07 c0       	rjmp	.+14     	; 0x1ec6 <guide_place+0x124>
		        }
		        else if (current_direction=='E')
    1eb8:	85 34       	cpi	r24, 0x45	; 69
    1eba:	29 f4       	brne	.+10     	; 0x1ec6 <guide_place+0x124>
		        {
			        staright_place(floor_array[3]);
    1ebc:	80 91 1a 02 	lds	r24, 0x021A
    1ec0:	90 91 1b 02 	lds	r25, 0x021B
    1ec4:	76 d9       	rcall	.-3348   	; 0x11b2 <staright_place>
		        }
				//sets source node
		        present='4';
    1ec6:	84 e3       	ldi	r24, 0x34	; 52
    1ec8:	80 93 1e 02 	sts	0x021E, r24
    1ecc:	08 95       	ret

00001ece <main>:
		    //default case 
			default: break;
	   }
}
int main()
{
    1ece:	cf 93       	push	r28
    1ed0:	df 93       	push	r29
     //initiating the devices 
	init_devices();
    1ed2:	0e 94 14 04 	call	0x828	; 0x828 <init_devices>
	lcd_set_4bit();
    1ed6:	0e 94 e1 00 	call	0x1c2	; 0x1c2 <lcd_set_4bit>
	lcd_init();
    1eda:	0e 94 4b 01 	call	0x296	; 0x296 <lcd_init>
    
	//default moves from start to node 'i'
	node();
    1ede:	0e 94 d9 04 	call	0x9b2	; 0x9b2 <node>
	//moves to initial direction 
	turn_right(100,100); 
    1ee2:	64 e6       	ldi	r22, 0x64	; 100
    1ee4:	70 e0       	ldi	r23, 0x00	; 0
    1ee6:	84 e6       	ldi	r24, 0x64	; 100
    1ee8:	90 e0       	ldi	r25, 0x00	; 0
    1eea:	0e 94 5b 06 	call	0xcb6	; 0xcb6 <turn_right>
	
	//executes for house 5
	//checks for requirement of house 5 ,moves to node r
	 if (material[8]!=0)
    1eee:	80 91 10 02 	lds	r24, 0x0210
    1ef2:	90 91 11 02 	lds	r25, 0x0211
    1ef6:	00 97       	sbiw	r24, 0x00	; 0
    1ef8:	81 f0       	breq	.+32     	; 0x1f1a <main+0x4c>
	 {
	 guide_pick(material[8]);
    1efa:	7d de       	rcall	.-774    	; 0x1bf6 <guide_pick>
	 execute_path('r',present);
    1efc:	60 91 1e 02 	lds	r22, 0x021E
    1f00:	82 e7       	ldi	r24, 0x72	; 114
    1f02:	ad dd       	rcall	.-1190   	; 0x1a5e <execute_path>
	 place_h5(floor_array[4]);
    1f04:	80 91 1c 02 	lds	r24, 0x021C
    1f08:	90 91 1d 02 	lds	r25, 0x021D
    1f0c:	0a da       	rcall	.-3052   	; 0x1322 <place_h5>
	 present='r';
    1f0e:	82 e7       	ldi	r24, 0x72	; 114
    1f10:	80 93 1e 02 	sts	0x021E, r24
	 current_direction='S';
    1f14:	83 e5       	ldi	r24, 0x53	; 83
    1f16:	80 93 1f 02 	sts	0x021F, r24
	 }
	 
	 if (material[9]!=0)
    1f1a:	80 91 12 02 	lds	r24, 0x0212
    1f1e:	90 91 13 02 	lds	r25, 0x0213
    1f22:	00 97       	sbiw	r24, 0x00	; 0
    1f24:	81 f0       	breq	.+32     	; 0x1f46 <main+0x78>
	 {
	 guide_pick(material[9]);
    1f26:	67 de       	rcall	.-818    	; 0x1bf6 <guide_pick>
	 execute_path('r',present);
    1f28:	60 91 1e 02 	lds	r22, 0x021E
    1f2c:	82 e7       	ldi	r24, 0x72	; 114
    1f2e:	97 dd       	rcall	.-1234   	; 0x1a5e <execute_path>
	 place_h5(floor_array[4]);
    1f30:	80 91 1c 02 	lds	r24, 0x021C
    1f34:	90 91 1d 02 	lds	r25, 0x021D
    1f38:	f4 d9       	rcall	.-3096   	; 0x1322 <place_h5>
	 present='r';
    1f3a:	82 e7       	ldi	r24, 0x72	; 114
    1f3c:	80 93 1e 02 	sts	0x021E, r24
	 current_direction='S';
    1f40:	83 e5       	ldi	r24, 0x53	; 83
    1f42:	80 93 1f 02 	sts	0x021F, r24
	 }
	
	//executes for house 1
    guide_pick(material[0]);
    1f46:	c0 e0       	ldi	r28, 0x00	; 0
    1f48:	d2 e0       	ldi	r29, 0x02	; 2
    1f4a:	88 81       	ld	r24, Y
    1f4c:	99 81       	ldd	r25, Y+1	; 0x01
    1f4e:	53 de       	rcall	.-858    	; 0x1bf6 <guide_pick>
	guide_place(1,material[0]);
    1f50:	68 81       	ld	r22, Y
    1f52:	79 81       	ldd	r23, Y+1	; 0x01
    1f54:	81 e0       	ldi	r24, 0x01	; 1
    1f56:	90 e0       	ldi	r25, 0x00	; 0
    1f58:	24 df       	rcall	.-440    	; 0x1da2 <guide_place>
	guide_pick(material[1]);
    1f5a:	c2 e0       	ldi	r28, 0x02	; 2
    1f5c:	d2 e0       	ldi	r29, 0x02	; 2
    1f5e:	88 81       	ld	r24, Y
    1f60:	99 81       	ldd	r25, Y+1	; 0x01
    1f62:	49 de       	rcall	.-878    	; 0x1bf6 <guide_pick>
	guide_place(1,material[1]);
    1f64:	68 81       	ld	r22, Y
    1f66:	79 81       	ldd	r23, Y+1	; 0x01
    1f68:	81 e0       	ldi	r24, 0x01	; 1
    1f6a:	90 e0       	ldi	r25, 0x00	; 0
    1f6c:	1a df       	rcall	.-460    	; 0x1da2 <guide_place>
	
	//executes for house 2
    guide_pick(material[2]);
    1f6e:	c4 e0       	ldi	r28, 0x04	; 4
    1f70:	d2 e0       	ldi	r29, 0x02	; 2
    1f72:	88 81       	ld	r24, Y
    1f74:	99 81       	ldd	r25, Y+1	; 0x01
    1f76:	3f de       	rcall	.-898    	; 0x1bf6 <guide_pick>
	guide_place(2,material[2]);
    1f78:	68 81       	ld	r22, Y
    1f7a:	79 81       	ldd	r23, Y+1	; 0x01
    1f7c:	82 e0       	ldi	r24, 0x02	; 2
    1f7e:	90 e0       	ldi	r25, 0x00	; 0
    1f80:	10 df       	rcall	.-480    	; 0x1da2 <guide_place>
	guide_pick(material[3]);
    1f82:	c6 e0       	ldi	r28, 0x06	; 6
    1f84:	d2 e0       	ldi	r29, 0x02	; 2
    1f86:	88 81       	ld	r24, Y
    1f88:	99 81       	ldd	r25, Y+1	; 0x01
    1f8a:	35 de       	rcall	.-918    	; 0x1bf6 <guide_pick>
	guide_place(2,material[3]);
    1f8c:	68 81       	ld	r22, Y
    1f8e:	79 81       	ldd	r23, Y+1	; 0x01
    1f90:	82 e0       	ldi	r24, 0x02	; 2
    1f92:	90 e0       	ldi	r25, 0x00	; 0
    1f94:	06 df       	rcall	.-500    	; 0x1da2 <guide_place>
	
	//executes for house 3
	guide_pick(material[4]);
    1f96:	c8 e0       	ldi	r28, 0x08	; 8
    1f98:	d2 e0       	ldi	r29, 0x02	; 2
    1f9a:	88 81       	ld	r24, Y
    1f9c:	99 81       	ldd	r25, Y+1	; 0x01
    1f9e:	2b de       	rcall	.-938    	; 0x1bf6 <guide_pick>
	guide_place(3,material[4]);
    1fa0:	68 81       	ld	r22, Y
    1fa2:	79 81       	ldd	r23, Y+1	; 0x01
    1fa4:	83 e0       	ldi	r24, 0x03	; 3
    1fa6:	90 e0       	ldi	r25, 0x00	; 0
    1fa8:	fc de       	rcall	.-520    	; 0x1da2 <guide_place>
	guide_pick(material[5]);
    1faa:	ca e0       	ldi	r28, 0x0A	; 10
    1fac:	d2 e0       	ldi	r29, 0x02	; 2
    1fae:	88 81       	ld	r24, Y
    1fb0:	99 81       	ldd	r25, Y+1	; 0x01
    1fb2:	21 de       	rcall	.-958    	; 0x1bf6 <guide_pick>
	guide_place(3,material[5]);
    1fb4:	68 81       	ld	r22, Y
    1fb6:	79 81       	ldd	r23, Y+1	; 0x01
    1fb8:	83 e0       	ldi	r24, 0x03	; 3
    1fba:	90 e0       	ldi	r25, 0x00	; 0
    1fbc:	f2 de       	rcall	.-540    	; 0x1da2 <guide_place>
	
	//executes for house 4
	guide_pick(material[6]);
    1fbe:	cc e0       	ldi	r28, 0x0C	; 12
    1fc0:	d2 e0       	ldi	r29, 0x02	; 2
    1fc2:	88 81       	ld	r24, Y
    1fc4:	99 81       	ldd	r25, Y+1	; 0x01
    1fc6:	17 de       	rcall	.-978    	; 0x1bf6 <guide_pick>
	guide_place(4,material[6]);
    1fc8:	68 81       	ld	r22, Y
    1fca:	79 81       	ldd	r23, Y+1	; 0x01
    1fcc:	84 e0       	ldi	r24, 0x04	; 4
    1fce:	90 e0       	ldi	r25, 0x00	; 0
    1fd0:	e8 de       	rcall	.-560    	; 0x1da2 <guide_place>
	guide_pick(material[7]);
    1fd2:	ce e0       	ldi	r28, 0x0E	; 14
    1fd4:	d2 e0       	ldi	r29, 0x02	; 2
    1fd6:	88 81       	ld	r24, Y
    1fd8:	99 81       	ldd	r25, Y+1	; 0x01
    1fda:	0d de       	rcall	.-998    	; 0x1bf6 <guide_pick>
	guide_place(4,material[7]);
    1fdc:	68 81       	ld	r22, Y
    1fde:	79 81       	ldd	r23, Y+1	; 0x01
    1fe0:	84 e0       	ldi	r24, 0x04	; 4
    1fe2:	90 e0       	ldi	r25, 0x00	; 0
    1fe4:	de de       	rcall	.-580    	; 0x1da2 <guide_place>

     //turns on buzzer for 5 sec 
     buzzer_on();
    1fe6:	0e 94 1d 04 	call	0x83a	; 0x83a <buzzer_on>
     buzzer_off();
    1fea:	0e 94 2c 04 	call	0x858	; 0x858 <buzzer_off>
    1fee:	80 e0       	ldi	r24, 0x00	; 0
    1ff0:	90 e0       	ldi	r25, 0x00	; 0
    1ff2:	df 91       	pop	r29
    1ff4:	cf 91       	pop	r28
    1ff6:	08 95       	ret

00001ff8 <__subsf3>:
    1ff8:	50 58       	subi	r21, 0x80	; 128

00001ffa <__addsf3>:
    1ffa:	bb 27       	eor	r27, r27
    1ffc:	aa 27       	eor	r26, r26
    1ffe:	0e d0       	rcall	.+28     	; 0x201c <__addsf3x>
    2000:	4d c1       	rjmp	.+666    	; 0x229c <__fp_round>
    2002:	3e d1       	rcall	.+636    	; 0x2280 <__fp_pscA>
    2004:	30 f0       	brcs	.+12     	; 0x2012 <__addsf3+0x18>
    2006:	43 d1       	rcall	.+646    	; 0x228e <__fp_pscB>
    2008:	20 f0       	brcs	.+8      	; 0x2012 <__addsf3+0x18>
    200a:	31 f4       	brne	.+12     	; 0x2018 <__addsf3+0x1e>
    200c:	9f 3f       	cpi	r25, 0xFF	; 255
    200e:	11 f4       	brne	.+4      	; 0x2014 <__addsf3+0x1a>
    2010:	1e f4       	brtc	.+6      	; 0x2018 <__addsf3+0x1e>
    2012:	33 c1       	rjmp	.+614    	; 0x227a <__fp_nan>
    2014:	0e f4       	brtc	.+2      	; 0x2018 <__addsf3+0x1e>
    2016:	e0 95       	com	r30
    2018:	e7 fb       	bst	r30, 7
    201a:	29 c1       	rjmp	.+594    	; 0x226e <__fp_inf>

0000201c <__addsf3x>:
    201c:	e9 2f       	mov	r30, r25
    201e:	4f d1       	rcall	.+670    	; 0x22be <__fp_split3>
    2020:	80 f3       	brcs	.-32     	; 0x2002 <__addsf3+0x8>
    2022:	ba 17       	cp	r27, r26
    2024:	62 07       	cpc	r22, r18
    2026:	73 07       	cpc	r23, r19
    2028:	84 07       	cpc	r24, r20
    202a:	95 07       	cpc	r25, r21
    202c:	18 f0       	brcs	.+6      	; 0x2034 <__addsf3x+0x18>
    202e:	71 f4       	brne	.+28     	; 0x204c <__addsf3x+0x30>
    2030:	9e f5       	brtc	.+102    	; 0x2098 <__addsf3x+0x7c>
    2032:	67 c1       	rjmp	.+718    	; 0x2302 <__fp_zero>
    2034:	0e f4       	brtc	.+2      	; 0x2038 <__addsf3x+0x1c>
    2036:	e0 95       	com	r30
    2038:	0b 2e       	mov	r0, r27
    203a:	ba 2f       	mov	r27, r26
    203c:	a0 2d       	mov	r26, r0
    203e:	0b 01       	movw	r0, r22
    2040:	b9 01       	movw	r22, r18
    2042:	90 01       	movw	r18, r0
    2044:	0c 01       	movw	r0, r24
    2046:	ca 01       	movw	r24, r20
    2048:	a0 01       	movw	r20, r0
    204a:	11 24       	eor	r1, r1
    204c:	ff 27       	eor	r31, r31
    204e:	59 1b       	sub	r21, r25
    2050:	99 f0       	breq	.+38     	; 0x2078 <__addsf3x+0x5c>
    2052:	59 3f       	cpi	r21, 0xF9	; 249
    2054:	50 f4       	brcc	.+20     	; 0x206a <__addsf3x+0x4e>
    2056:	50 3e       	cpi	r21, 0xE0	; 224
    2058:	68 f1       	brcs	.+90     	; 0x20b4 <__addsf3x+0x98>
    205a:	1a 16       	cp	r1, r26
    205c:	f0 40       	sbci	r31, 0x00	; 0
    205e:	a2 2f       	mov	r26, r18
    2060:	23 2f       	mov	r18, r19
    2062:	34 2f       	mov	r19, r20
    2064:	44 27       	eor	r20, r20
    2066:	58 5f       	subi	r21, 0xF8	; 248
    2068:	f3 cf       	rjmp	.-26     	; 0x2050 <__addsf3x+0x34>
    206a:	46 95       	lsr	r20
    206c:	37 95       	ror	r19
    206e:	27 95       	ror	r18
    2070:	a7 95       	ror	r26
    2072:	f0 40       	sbci	r31, 0x00	; 0
    2074:	53 95       	inc	r21
    2076:	c9 f7       	brne	.-14     	; 0x206a <__addsf3x+0x4e>
    2078:	7e f4       	brtc	.+30     	; 0x2098 <__addsf3x+0x7c>
    207a:	1f 16       	cp	r1, r31
    207c:	ba 0b       	sbc	r27, r26
    207e:	62 0b       	sbc	r22, r18
    2080:	73 0b       	sbc	r23, r19
    2082:	84 0b       	sbc	r24, r20
    2084:	ba f0       	brmi	.+46     	; 0x20b4 <__addsf3x+0x98>
    2086:	91 50       	subi	r25, 0x01	; 1
    2088:	a1 f0       	breq	.+40     	; 0x20b2 <__addsf3x+0x96>
    208a:	ff 0f       	add	r31, r31
    208c:	bb 1f       	adc	r27, r27
    208e:	66 1f       	adc	r22, r22
    2090:	77 1f       	adc	r23, r23
    2092:	88 1f       	adc	r24, r24
    2094:	c2 f7       	brpl	.-16     	; 0x2086 <__addsf3x+0x6a>
    2096:	0e c0       	rjmp	.+28     	; 0x20b4 <__addsf3x+0x98>
    2098:	ba 0f       	add	r27, r26
    209a:	62 1f       	adc	r22, r18
    209c:	73 1f       	adc	r23, r19
    209e:	84 1f       	adc	r24, r20
    20a0:	48 f4       	brcc	.+18     	; 0x20b4 <__addsf3x+0x98>
    20a2:	87 95       	ror	r24
    20a4:	77 95       	ror	r23
    20a6:	67 95       	ror	r22
    20a8:	b7 95       	ror	r27
    20aa:	f7 95       	ror	r31
    20ac:	9e 3f       	cpi	r25, 0xFE	; 254
    20ae:	08 f0       	brcs	.+2      	; 0x20b2 <__addsf3x+0x96>
    20b0:	b3 cf       	rjmp	.-154    	; 0x2018 <__addsf3+0x1e>
    20b2:	93 95       	inc	r25
    20b4:	88 0f       	add	r24, r24
    20b6:	08 f0       	brcs	.+2      	; 0x20ba <__addsf3x+0x9e>
    20b8:	99 27       	eor	r25, r25
    20ba:	ee 0f       	add	r30, r30
    20bc:	97 95       	ror	r25
    20be:	87 95       	ror	r24
    20c0:	08 95       	ret

000020c2 <__divsf3>:
    20c2:	0c d0       	rcall	.+24     	; 0x20dc <__divsf3x>
    20c4:	eb c0       	rjmp	.+470    	; 0x229c <__fp_round>
    20c6:	e3 d0       	rcall	.+454    	; 0x228e <__fp_pscB>
    20c8:	40 f0       	brcs	.+16     	; 0x20da <__divsf3+0x18>
    20ca:	da d0       	rcall	.+436    	; 0x2280 <__fp_pscA>
    20cc:	30 f0       	brcs	.+12     	; 0x20da <__divsf3+0x18>
    20ce:	21 f4       	brne	.+8      	; 0x20d8 <__divsf3+0x16>
    20d0:	5f 3f       	cpi	r21, 0xFF	; 255
    20d2:	19 f0       	breq	.+6      	; 0x20da <__divsf3+0x18>
    20d4:	cc c0       	rjmp	.+408    	; 0x226e <__fp_inf>
    20d6:	51 11       	cpse	r21, r1
    20d8:	15 c1       	rjmp	.+554    	; 0x2304 <__fp_szero>
    20da:	cf c0       	rjmp	.+414    	; 0x227a <__fp_nan>

000020dc <__divsf3x>:
    20dc:	f0 d0       	rcall	.+480    	; 0x22be <__fp_split3>
    20de:	98 f3       	brcs	.-26     	; 0x20c6 <__divsf3+0x4>

000020e0 <__divsf3_pse>:
    20e0:	99 23       	and	r25, r25
    20e2:	c9 f3       	breq	.-14     	; 0x20d6 <__divsf3+0x14>
    20e4:	55 23       	and	r21, r21
    20e6:	b1 f3       	breq	.-20     	; 0x20d4 <__divsf3+0x12>
    20e8:	95 1b       	sub	r25, r21
    20ea:	55 0b       	sbc	r21, r21
    20ec:	bb 27       	eor	r27, r27
    20ee:	aa 27       	eor	r26, r26
    20f0:	62 17       	cp	r22, r18
    20f2:	73 07       	cpc	r23, r19
    20f4:	84 07       	cpc	r24, r20
    20f6:	38 f0       	brcs	.+14     	; 0x2106 <__divsf3_pse+0x26>
    20f8:	9f 5f       	subi	r25, 0xFF	; 255
    20fa:	5f 4f       	sbci	r21, 0xFF	; 255
    20fc:	22 0f       	add	r18, r18
    20fe:	33 1f       	adc	r19, r19
    2100:	44 1f       	adc	r20, r20
    2102:	aa 1f       	adc	r26, r26
    2104:	a9 f3       	breq	.-22     	; 0x20f0 <__divsf3_pse+0x10>
    2106:	33 d0       	rcall	.+102    	; 0x216e <__divsf3_pse+0x8e>
    2108:	0e 2e       	mov	r0, r30
    210a:	3a f0       	brmi	.+14     	; 0x211a <__divsf3_pse+0x3a>
    210c:	e0 e8       	ldi	r30, 0x80	; 128
    210e:	30 d0       	rcall	.+96     	; 0x2170 <__divsf3_pse+0x90>
    2110:	91 50       	subi	r25, 0x01	; 1
    2112:	50 40       	sbci	r21, 0x00	; 0
    2114:	e6 95       	lsr	r30
    2116:	00 1c       	adc	r0, r0
    2118:	ca f7       	brpl	.-14     	; 0x210c <__divsf3_pse+0x2c>
    211a:	29 d0       	rcall	.+82     	; 0x216e <__divsf3_pse+0x8e>
    211c:	fe 2f       	mov	r31, r30
    211e:	27 d0       	rcall	.+78     	; 0x216e <__divsf3_pse+0x8e>
    2120:	66 0f       	add	r22, r22
    2122:	77 1f       	adc	r23, r23
    2124:	88 1f       	adc	r24, r24
    2126:	bb 1f       	adc	r27, r27
    2128:	26 17       	cp	r18, r22
    212a:	37 07       	cpc	r19, r23
    212c:	48 07       	cpc	r20, r24
    212e:	ab 07       	cpc	r26, r27
    2130:	b0 e8       	ldi	r27, 0x80	; 128
    2132:	09 f0       	breq	.+2      	; 0x2136 <__divsf3_pse+0x56>
    2134:	bb 0b       	sbc	r27, r27
    2136:	80 2d       	mov	r24, r0
    2138:	bf 01       	movw	r22, r30
    213a:	ff 27       	eor	r31, r31
    213c:	93 58       	subi	r25, 0x83	; 131
    213e:	5f 4f       	sbci	r21, 0xFF	; 255
    2140:	2a f0       	brmi	.+10     	; 0x214c <__divsf3_pse+0x6c>
    2142:	9e 3f       	cpi	r25, 0xFE	; 254
    2144:	51 05       	cpc	r21, r1
    2146:	68 f0       	brcs	.+26     	; 0x2162 <__divsf3_pse+0x82>
    2148:	92 c0       	rjmp	.+292    	; 0x226e <__fp_inf>
    214a:	dc c0       	rjmp	.+440    	; 0x2304 <__fp_szero>
    214c:	5f 3f       	cpi	r21, 0xFF	; 255
    214e:	ec f3       	brlt	.-6      	; 0x214a <__divsf3_pse+0x6a>
    2150:	98 3e       	cpi	r25, 0xE8	; 232
    2152:	dc f3       	brlt	.-10     	; 0x214a <__divsf3_pse+0x6a>
    2154:	86 95       	lsr	r24
    2156:	77 95       	ror	r23
    2158:	67 95       	ror	r22
    215a:	b7 95       	ror	r27
    215c:	f7 95       	ror	r31
    215e:	9f 5f       	subi	r25, 0xFF	; 255
    2160:	c9 f7       	brne	.-14     	; 0x2154 <__divsf3_pse+0x74>
    2162:	88 0f       	add	r24, r24
    2164:	91 1d       	adc	r25, r1
    2166:	96 95       	lsr	r25
    2168:	87 95       	ror	r24
    216a:	97 f9       	bld	r25, 7
    216c:	08 95       	ret
    216e:	e1 e0       	ldi	r30, 0x01	; 1
    2170:	66 0f       	add	r22, r22
    2172:	77 1f       	adc	r23, r23
    2174:	88 1f       	adc	r24, r24
    2176:	bb 1f       	adc	r27, r27
    2178:	62 17       	cp	r22, r18
    217a:	73 07       	cpc	r23, r19
    217c:	84 07       	cpc	r24, r20
    217e:	ba 07       	cpc	r27, r26
    2180:	20 f0       	brcs	.+8      	; 0x218a <__divsf3_pse+0xaa>
    2182:	62 1b       	sub	r22, r18
    2184:	73 0b       	sbc	r23, r19
    2186:	84 0b       	sbc	r24, r20
    2188:	ba 0b       	sbc	r27, r26
    218a:	ee 1f       	adc	r30, r30
    218c:	88 f7       	brcc	.-30     	; 0x2170 <__divsf3_pse+0x90>
    218e:	e0 95       	com	r30
    2190:	08 95       	ret

00002192 <__fixsfsi>:
    2192:	04 d0       	rcall	.+8      	; 0x219c <__fixunssfsi>
    2194:	68 94       	set
    2196:	b1 11       	cpse	r27, r1
    2198:	b5 c0       	rjmp	.+362    	; 0x2304 <__fp_szero>
    219a:	08 95       	ret

0000219c <__fixunssfsi>:
    219c:	98 d0       	rcall	.+304    	; 0x22ce <__fp_splitA>
    219e:	88 f0       	brcs	.+34     	; 0x21c2 <__fixunssfsi+0x26>
    21a0:	9f 57       	subi	r25, 0x7F	; 127
    21a2:	90 f0       	brcs	.+36     	; 0x21c8 <__fixunssfsi+0x2c>
    21a4:	b9 2f       	mov	r27, r25
    21a6:	99 27       	eor	r25, r25
    21a8:	b7 51       	subi	r27, 0x17	; 23
    21aa:	a0 f0       	brcs	.+40     	; 0x21d4 <__fixunssfsi+0x38>
    21ac:	d1 f0       	breq	.+52     	; 0x21e2 <__fixunssfsi+0x46>
    21ae:	66 0f       	add	r22, r22
    21b0:	77 1f       	adc	r23, r23
    21b2:	88 1f       	adc	r24, r24
    21b4:	99 1f       	adc	r25, r25
    21b6:	1a f0       	brmi	.+6      	; 0x21be <__fixunssfsi+0x22>
    21b8:	ba 95       	dec	r27
    21ba:	c9 f7       	brne	.-14     	; 0x21ae <__fixunssfsi+0x12>
    21bc:	12 c0       	rjmp	.+36     	; 0x21e2 <__fixunssfsi+0x46>
    21be:	b1 30       	cpi	r27, 0x01	; 1
    21c0:	81 f0       	breq	.+32     	; 0x21e2 <__fixunssfsi+0x46>
    21c2:	9f d0       	rcall	.+318    	; 0x2302 <__fp_zero>
    21c4:	b1 e0       	ldi	r27, 0x01	; 1
    21c6:	08 95       	ret
    21c8:	9c c0       	rjmp	.+312    	; 0x2302 <__fp_zero>
    21ca:	67 2f       	mov	r22, r23
    21cc:	78 2f       	mov	r23, r24
    21ce:	88 27       	eor	r24, r24
    21d0:	b8 5f       	subi	r27, 0xF8	; 248
    21d2:	39 f0       	breq	.+14     	; 0x21e2 <__fixunssfsi+0x46>
    21d4:	b9 3f       	cpi	r27, 0xF9	; 249
    21d6:	cc f3       	brlt	.-14     	; 0x21ca <__fixunssfsi+0x2e>
    21d8:	86 95       	lsr	r24
    21da:	77 95       	ror	r23
    21dc:	67 95       	ror	r22
    21de:	b3 95       	inc	r27
    21e0:	d9 f7       	brne	.-10     	; 0x21d8 <__fixunssfsi+0x3c>
    21e2:	3e f4       	brtc	.+14     	; 0x21f2 <__fixunssfsi+0x56>
    21e4:	90 95       	com	r25
    21e6:	80 95       	com	r24
    21e8:	70 95       	com	r23
    21ea:	61 95       	neg	r22
    21ec:	7f 4f       	sbci	r23, 0xFF	; 255
    21ee:	8f 4f       	sbci	r24, 0xFF	; 255
    21f0:	9f 4f       	sbci	r25, 0xFF	; 255
    21f2:	08 95       	ret

000021f4 <__floatunsisf>:
    21f4:	e8 94       	clt
    21f6:	09 c0       	rjmp	.+18     	; 0x220a <__stack+0xb>

000021f8 <__floatsisf>:
    21f8:	97 fb       	bst	r25, 7
    21fa:	3e f4       	brtc	.+14     	; 0x220a <__stack+0xb>
    21fc:	90 95       	com	r25
    21fe:	80 95       	com	r24
    2200:	70 95       	com	r23
    2202:	61 95       	neg	r22
    2204:	7f 4f       	sbci	r23, 0xFF	; 255
    2206:	8f 4f       	sbci	r24, 0xFF	; 255
    2208:	9f 4f       	sbci	r25, 0xFF	; 255
    220a:	99 23       	and	r25, r25
    220c:	a9 f0       	breq	.+42     	; 0x2238 <__stack+0x39>
    220e:	f9 2f       	mov	r31, r25
    2210:	96 e9       	ldi	r25, 0x96	; 150
    2212:	bb 27       	eor	r27, r27
    2214:	93 95       	inc	r25
    2216:	f6 95       	lsr	r31
    2218:	87 95       	ror	r24
    221a:	77 95       	ror	r23
    221c:	67 95       	ror	r22
    221e:	b7 95       	ror	r27
    2220:	f1 11       	cpse	r31, r1
    2222:	f8 cf       	rjmp	.-16     	; 0x2214 <__stack+0x15>
    2224:	fa f4       	brpl	.+62     	; 0x2264 <__stack+0x65>
    2226:	bb 0f       	add	r27, r27
    2228:	11 f4       	brne	.+4      	; 0x222e <__stack+0x2f>
    222a:	60 ff       	sbrs	r22, 0
    222c:	1b c0       	rjmp	.+54     	; 0x2264 <__stack+0x65>
    222e:	6f 5f       	subi	r22, 0xFF	; 255
    2230:	7f 4f       	sbci	r23, 0xFF	; 255
    2232:	8f 4f       	sbci	r24, 0xFF	; 255
    2234:	9f 4f       	sbci	r25, 0xFF	; 255
    2236:	16 c0       	rjmp	.+44     	; 0x2264 <__stack+0x65>
    2238:	88 23       	and	r24, r24
    223a:	11 f0       	breq	.+4      	; 0x2240 <__stack+0x41>
    223c:	96 e9       	ldi	r25, 0x96	; 150
    223e:	11 c0       	rjmp	.+34     	; 0x2262 <__stack+0x63>
    2240:	77 23       	and	r23, r23
    2242:	21 f0       	breq	.+8      	; 0x224c <__stack+0x4d>
    2244:	9e e8       	ldi	r25, 0x8E	; 142
    2246:	87 2f       	mov	r24, r23
    2248:	76 2f       	mov	r23, r22
    224a:	05 c0       	rjmp	.+10     	; 0x2256 <__stack+0x57>
    224c:	66 23       	and	r22, r22
    224e:	71 f0       	breq	.+28     	; 0x226c <__stack+0x6d>
    2250:	96 e8       	ldi	r25, 0x86	; 134
    2252:	86 2f       	mov	r24, r22
    2254:	70 e0       	ldi	r23, 0x00	; 0
    2256:	60 e0       	ldi	r22, 0x00	; 0
    2258:	2a f0       	brmi	.+10     	; 0x2264 <__stack+0x65>
    225a:	9a 95       	dec	r25
    225c:	66 0f       	add	r22, r22
    225e:	77 1f       	adc	r23, r23
    2260:	88 1f       	adc	r24, r24
    2262:	da f7       	brpl	.-10     	; 0x225a <__stack+0x5b>
    2264:	88 0f       	add	r24, r24
    2266:	96 95       	lsr	r25
    2268:	87 95       	ror	r24
    226a:	97 f9       	bld	r25, 7
    226c:	08 95       	ret

0000226e <__fp_inf>:
    226e:	97 f9       	bld	r25, 7
    2270:	9f 67       	ori	r25, 0x7F	; 127
    2272:	80 e8       	ldi	r24, 0x80	; 128
    2274:	70 e0       	ldi	r23, 0x00	; 0
    2276:	60 e0       	ldi	r22, 0x00	; 0
    2278:	08 95       	ret

0000227a <__fp_nan>:
    227a:	9f ef       	ldi	r25, 0xFF	; 255
    227c:	80 ec       	ldi	r24, 0xC0	; 192
    227e:	08 95       	ret

00002280 <__fp_pscA>:
    2280:	00 24       	eor	r0, r0
    2282:	0a 94       	dec	r0
    2284:	16 16       	cp	r1, r22
    2286:	17 06       	cpc	r1, r23
    2288:	18 06       	cpc	r1, r24
    228a:	09 06       	cpc	r0, r25
    228c:	08 95       	ret

0000228e <__fp_pscB>:
    228e:	00 24       	eor	r0, r0
    2290:	0a 94       	dec	r0
    2292:	12 16       	cp	r1, r18
    2294:	13 06       	cpc	r1, r19
    2296:	14 06       	cpc	r1, r20
    2298:	05 06       	cpc	r0, r21
    229a:	08 95       	ret

0000229c <__fp_round>:
    229c:	09 2e       	mov	r0, r25
    229e:	03 94       	inc	r0
    22a0:	00 0c       	add	r0, r0
    22a2:	11 f4       	brne	.+4      	; 0x22a8 <__fp_round+0xc>
    22a4:	88 23       	and	r24, r24
    22a6:	52 f0       	brmi	.+20     	; 0x22bc <__fp_round+0x20>
    22a8:	bb 0f       	add	r27, r27
    22aa:	40 f4       	brcc	.+16     	; 0x22bc <__fp_round+0x20>
    22ac:	bf 2b       	or	r27, r31
    22ae:	11 f4       	brne	.+4      	; 0x22b4 <__fp_round+0x18>
    22b0:	60 ff       	sbrs	r22, 0
    22b2:	04 c0       	rjmp	.+8      	; 0x22bc <__fp_round+0x20>
    22b4:	6f 5f       	subi	r22, 0xFF	; 255
    22b6:	7f 4f       	sbci	r23, 0xFF	; 255
    22b8:	8f 4f       	sbci	r24, 0xFF	; 255
    22ba:	9f 4f       	sbci	r25, 0xFF	; 255
    22bc:	08 95       	ret

000022be <__fp_split3>:
    22be:	57 fd       	sbrc	r21, 7
    22c0:	90 58       	subi	r25, 0x80	; 128
    22c2:	44 0f       	add	r20, r20
    22c4:	55 1f       	adc	r21, r21
    22c6:	59 f0       	breq	.+22     	; 0x22de <__fp_splitA+0x10>
    22c8:	5f 3f       	cpi	r21, 0xFF	; 255
    22ca:	71 f0       	breq	.+28     	; 0x22e8 <__fp_splitA+0x1a>
    22cc:	47 95       	ror	r20

000022ce <__fp_splitA>:
    22ce:	88 0f       	add	r24, r24
    22d0:	97 fb       	bst	r25, 7
    22d2:	99 1f       	adc	r25, r25
    22d4:	61 f0       	breq	.+24     	; 0x22ee <__fp_splitA+0x20>
    22d6:	9f 3f       	cpi	r25, 0xFF	; 255
    22d8:	79 f0       	breq	.+30     	; 0x22f8 <__fp_splitA+0x2a>
    22da:	87 95       	ror	r24
    22dc:	08 95       	ret
    22de:	12 16       	cp	r1, r18
    22e0:	13 06       	cpc	r1, r19
    22e2:	14 06       	cpc	r1, r20
    22e4:	55 1f       	adc	r21, r21
    22e6:	f2 cf       	rjmp	.-28     	; 0x22cc <__fp_split3+0xe>
    22e8:	46 95       	lsr	r20
    22ea:	f1 df       	rcall	.-30     	; 0x22ce <__fp_splitA>
    22ec:	08 c0       	rjmp	.+16     	; 0x22fe <__fp_splitA+0x30>
    22ee:	16 16       	cp	r1, r22
    22f0:	17 06       	cpc	r1, r23
    22f2:	18 06       	cpc	r1, r24
    22f4:	99 1f       	adc	r25, r25
    22f6:	f1 cf       	rjmp	.-30     	; 0x22da <__fp_splitA+0xc>
    22f8:	86 95       	lsr	r24
    22fa:	71 05       	cpc	r23, r1
    22fc:	61 05       	cpc	r22, r1
    22fe:	08 94       	sec
    2300:	08 95       	ret

00002302 <__fp_zero>:
    2302:	e8 94       	clt

00002304 <__fp_szero>:
    2304:	bb 27       	eor	r27, r27
    2306:	66 27       	eor	r22, r22
    2308:	77 27       	eor	r23, r23
    230a:	cb 01       	movw	r24, r22
    230c:	97 f9       	bld	r25, 7
    230e:	08 95       	ret

00002310 <__mulsf3>:
    2310:	0b d0       	rcall	.+22     	; 0x2328 <__mulsf3x>
    2312:	c4 cf       	rjmp	.-120    	; 0x229c <__fp_round>
    2314:	b5 df       	rcall	.-150    	; 0x2280 <__fp_pscA>
    2316:	28 f0       	brcs	.+10     	; 0x2322 <__mulsf3+0x12>
    2318:	ba df       	rcall	.-140    	; 0x228e <__fp_pscB>
    231a:	18 f0       	brcs	.+6      	; 0x2322 <__mulsf3+0x12>
    231c:	95 23       	and	r25, r21
    231e:	09 f0       	breq	.+2      	; 0x2322 <__mulsf3+0x12>
    2320:	a6 cf       	rjmp	.-180    	; 0x226e <__fp_inf>
    2322:	ab cf       	rjmp	.-170    	; 0x227a <__fp_nan>
    2324:	11 24       	eor	r1, r1
    2326:	ee cf       	rjmp	.-36     	; 0x2304 <__fp_szero>

00002328 <__mulsf3x>:
    2328:	ca df       	rcall	.-108    	; 0x22be <__fp_split3>
    232a:	a0 f3       	brcs	.-24     	; 0x2314 <__mulsf3+0x4>

0000232c <__mulsf3_pse>:
    232c:	95 9f       	mul	r25, r21
    232e:	d1 f3       	breq	.-12     	; 0x2324 <__mulsf3+0x14>
    2330:	95 0f       	add	r25, r21
    2332:	50 e0       	ldi	r21, 0x00	; 0
    2334:	55 1f       	adc	r21, r21
    2336:	62 9f       	mul	r22, r18
    2338:	f0 01       	movw	r30, r0
    233a:	72 9f       	mul	r23, r18
    233c:	bb 27       	eor	r27, r27
    233e:	f0 0d       	add	r31, r0
    2340:	b1 1d       	adc	r27, r1
    2342:	63 9f       	mul	r22, r19
    2344:	aa 27       	eor	r26, r26
    2346:	f0 0d       	add	r31, r0
    2348:	b1 1d       	adc	r27, r1
    234a:	aa 1f       	adc	r26, r26
    234c:	64 9f       	mul	r22, r20
    234e:	66 27       	eor	r22, r22
    2350:	b0 0d       	add	r27, r0
    2352:	a1 1d       	adc	r26, r1
    2354:	66 1f       	adc	r22, r22
    2356:	82 9f       	mul	r24, r18
    2358:	22 27       	eor	r18, r18
    235a:	b0 0d       	add	r27, r0
    235c:	a1 1d       	adc	r26, r1
    235e:	62 1f       	adc	r22, r18
    2360:	73 9f       	mul	r23, r19
    2362:	b0 0d       	add	r27, r0
    2364:	a1 1d       	adc	r26, r1
    2366:	62 1f       	adc	r22, r18
    2368:	83 9f       	mul	r24, r19
    236a:	a0 0d       	add	r26, r0
    236c:	61 1d       	adc	r22, r1
    236e:	22 1f       	adc	r18, r18
    2370:	74 9f       	mul	r23, r20
    2372:	33 27       	eor	r19, r19
    2374:	a0 0d       	add	r26, r0
    2376:	61 1d       	adc	r22, r1
    2378:	23 1f       	adc	r18, r19
    237a:	84 9f       	mul	r24, r20
    237c:	60 0d       	add	r22, r0
    237e:	21 1d       	adc	r18, r1
    2380:	82 2f       	mov	r24, r18
    2382:	76 2f       	mov	r23, r22
    2384:	6a 2f       	mov	r22, r26
    2386:	11 24       	eor	r1, r1
    2388:	9f 57       	subi	r25, 0x7F	; 127
    238a:	50 40       	sbci	r21, 0x00	; 0
    238c:	8a f0       	brmi	.+34     	; 0x23b0 <__mulsf3_pse+0x84>
    238e:	e1 f0       	breq	.+56     	; 0x23c8 <__mulsf3_pse+0x9c>
    2390:	88 23       	and	r24, r24
    2392:	4a f0       	brmi	.+18     	; 0x23a6 <__mulsf3_pse+0x7a>
    2394:	ee 0f       	add	r30, r30
    2396:	ff 1f       	adc	r31, r31
    2398:	bb 1f       	adc	r27, r27
    239a:	66 1f       	adc	r22, r22
    239c:	77 1f       	adc	r23, r23
    239e:	88 1f       	adc	r24, r24
    23a0:	91 50       	subi	r25, 0x01	; 1
    23a2:	50 40       	sbci	r21, 0x00	; 0
    23a4:	a9 f7       	brne	.-22     	; 0x2390 <__mulsf3_pse+0x64>
    23a6:	9e 3f       	cpi	r25, 0xFE	; 254
    23a8:	51 05       	cpc	r21, r1
    23aa:	70 f0       	brcs	.+28     	; 0x23c8 <__mulsf3_pse+0x9c>
    23ac:	60 cf       	rjmp	.-320    	; 0x226e <__fp_inf>
    23ae:	aa cf       	rjmp	.-172    	; 0x2304 <__fp_szero>
    23b0:	5f 3f       	cpi	r21, 0xFF	; 255
    23b2:	ec f3       	brlt	.-6      	; 0x23ae <__mulsf3_pse+0x82>
    23b4:	98 3e       	cpi	r25, 0xE8	; 232
    23b6:	dc f3       	brlt	.-10     	; 0x23ae <__mulsf3_pse+0x82>
    23b8:	86 95       	lsr	r24
    23ba:	77 95       	ror	r23
    23bc:	67 95       	ror	r22
    23be:	b7 95       	ror	r27
    23c0:	f7 95       	ror	r31
    23c2:	e7 95       	ror	r30
    23c4:	9f 5f       	subi	r25, 0xFF	; 255
    23c6:	c1 f7       	brne	.-16     	; 0x23b8 <__mulsf3_pse+0x8c>
    23c8:	fe 2b       	or	r31, r30
    23ca:	88 0f       	add	r24, r24
    23cc:	91 1d       	adc	r25, r1
    23ce:	96 95       	lsr	r25
    23d0:	87 95       	ror	r24
    23d2:	97 f9       	bld	r25, 7
    23d4:	08 95       	ret

000023d6 <pow>:
    23d6:	fa 01       	movw	r30, r20
    23d8:	ee 0f       	add	r30, r30
    23da:	ff 1f       	adc	r31, r31
    23dc:	30 96       	adiw	r30, 0x00	; 0
    23de:	21 05       	cpc	r18, r1
    23e0:	31 05       	cpc	r19, r1
    23e2:	99 f1       	breq	.+102    	; 0x244a <pow+0x74>
    23e4:	61 15       	cp	r22, r1
    23e6:	71 05       	cpc	r23, r1
    23e8:	61 f4       	brne	.+24     	; 0x2402 <pow+0x2c>
    23ea:	80 38       	cpi	r24, 0x80	; 128
    23ec:	bf e3       	ldi	r27, 0x3F	; 63
    23ee:	9b 07       	cpc	r25, r27
    23f0:	49 f1       	breq	.+82     	; 0x2444 <pow+0x6e>
    23f2:	68 94       	set
    23f4:	90 38       	cpi	r25, 0x80	; 128
    23f6:	81 05       	cpc	r24, r1
    23f8:	61 f0       	breq	.+24     	; 0x2412 <pow+0x3c>
    23fa:	80 38       	cpi	r24, 0x80	; 128
    23fc:	bf ef       	ldi	r27, 0xFF	; 255
    23fe:	9b 07       	cpc	r25, r27
    2400:	41 f0       	breq	.+16     	; 0x2412 <pow+0x3c>
    2402:	99 23       	and	r25, r25
    2404:	42 f5       	brpl	.+80     	; 0x2456 <pow+0x80>
    2406:	ff 3f       	cpi	r31, 0xFF	; 255
    2408:	e1 05       	cpc	r30, r1
    240a:	31 05       	cpc	r19, r1
    240c:	21 05       	cpc	r18, r1
    240e:	11 f1       	breq	.+68     	; 0x2454 <pow+0x7e>
    2410:	e8 94       	clt
    2412:	08 94       	sec
    2414:	e7 95       	ror	r30
    2416:	d9 01       	movw	r26, r18
    2418:	aa 23       	and	r26, r26
    241a:	29 f4       	brne	.+10     	; 0x2426 <pow+0x50>
    241c:	ab 2f       	mov	r26, r27
    241e:	be 2f       	mov	r27, r30
    2420:	f8 5f       	subi	r31, 0xF8	; 248
    2422:	d0 f3       	brcs	.-12     	; 0x2418 <pow+0x42>
    2424:	10 c0       	rjmp	.+32     	; 0x2446 <pow+0x70>
    2426:	ff 5f       	subi	r31, 0xFF	; 255
    2428:	70 f4       	brcc	.+28     	; 0x2446 <pow+0x70>
    242a:	a6 95       	lsr	r26
    242c:	e0 f7       	brcc	.-8      	; 0x2426 <pow+0x50>
    242e:	f7 39       	cpi	r31, 0x97	; 151
    2430:	50 f0       	brcs	.+20     	; 0x2446 <pow+0x70>
    2432:	19 f0       	breq	.+6      	; 0x243a <pow+0x64>
    2434:	ff 3a       	cpi	r31, 0xAF	; 175
    2436:	38 f4       	brcc	.+14     	; 0x2446 <pow+0x70>
    2438:	9f 77       	andi	r25, 0x7F	; 127
    243a:	9f 93       	push	r25
    243c:	0c d0       	rcall	.+24     	; 0x2456 <pow+0x80>
    243e:	0f 90       	pop	r0
    2440:	07 fc       	sbrc	r0, 7
    2442:	90 58       	subi	r25, 0x80	; 128
    2444:	08 95       	ret
    2446:	3e f0       	brts	.+14     	; 0x2456 <pow+0x80>
    2448:	18 cf       	rjmp	.-464    	; 0x227a <__fp_nan>
    244a:	60 e0       	ldi	r22, 0x00	; 0
    244c:	70 e0       	ldi	r23, 0x00	; 0
    244e:	80 e8       	ldi	r24, 0x80	; 128
    2450:	9f e3       	ldi	r25, 0x3F	; 63
    2452:	08 95       	ret
    2454:	4f e7       	ldi	r20, 0x7F	; 127
    2456:	9f 77       	andi	r25, 0x7F	; 127
    2458:	5f 93       	push	r21
    245a:	4f 93       	push	r20
    245c:	3f 93       	push	r19
    245e:	2f 93       	push	r18
    2460:	9e d0       	rcall	.+316    	; 0x259e <log>
    2462:	2f 91       	pop	r18
    2464:	3f 91       	pop	r19
    2466:	4f 91       	pop	r20
    2468:	5f 91       	pop	r21
    246a:	52 df       	rcall	.-348    	; 0x2310 <__mulsf3>
    246c:	05 c0       	rjmp	.+10     	; 0x2478 <exp>
    246e:	19 f4       	brne	.+6      	; 0x2476 <pow+0xa0>
    2470:	0e f0       	brts	.+2      	; 0x2474 <pow+0x9e>
    2472:	fd ce       	rjmp	.-518    	; 0x226e <__fp_inf>
    2474:	46 cf       	rjmp	.-372    	; 0x2302 <__fp_zero>
    2476:	01 cf       	rjmp	.-510    	; 0x227a <__fp_nan>

00002478 <exp>:
    2478:	2a df       	rcall	.-428    	; 0x22ce <__fp_splitA>
    247a:	c8 f3       	brcs	.-14     	; 0x246e <pow+0x98>
    247c:	96 38       	cpi	r25, 0x86	; 134
    247e:	c0 f7       	brcc	.-16     	; 0x2470 <pow+0x9a>
    2480:	07 f8       	bld	r0, 7
    2482:	0f 92       	push	r0
    2484:	e8 94       	clt
    2486:	2b e3       	ldi	r18, 0x3B	; 59
    2488:	3a ea       	ldi	r19, 0xAA	; 170
    248a:	48 eb       	ldi	r20, 0xB8	; 184
    248c:	5f e7       	ldi	r21, 0x7F	; 127
    248e:	4e df       	rcall	.-356    	; 0x232c <__mulsf3_pse>
    2490:	0f 92       	push	r0
    2492:	0f 92       	push	r0
    2494:	0f 92       	push	r0
    2496:	4d b7       	in	r20, 0x3d	; 61
    2498:	5e b7       	in	r21, 0x3e	; 62
    249a:	0f 92       	push	r0
    249c:	c0 d0       	rcall	.+384    	; 0x261e <modf>
    249e:	ec ef       	ldi	r30, 0xFC	; 252
    24a0:	f0 e0       	ldi	r31, 0x00	; 0
    24a2:	16 d0       	rcall	.+44     	; 0x24d0 <__fp_powser>
    24a4:	4f 91       	pop	r20
    24a6:	5f 91       	pop	r21
    24a8:	ef 91       	pop	r30
    24aa:	ff 91       	pop	r31
    24ac:	e5 95       	asr	r30
    24ae:	ee 1f       	adc	r30, r30
    24b0:	ff 1f       	adc	r31, r31
    24b2:	49 f0       	breq	.+18     	; 0x24c6 <exp+0x4e>
    24b4:	fe 57       	subi	r31, 0x7E	; 126
    24b6:	e0 68       	ori	r30, 0x80	; 128
    24b8:	44 27       	eor	r20, r20
    24ba:	ee 0f       	add	r30, r30
    24bc:	44 1f       	adc	r20, r20
    24be:	fa 95       	dec	r31
    24c0:	e1 f7       	brne	.-8      	; 0x24ba <exp+0x42>
    24c2:	41 95       	neg	r20
    24c4:	55 0b       	sbc	r21, r21
    24c6:	32 d0       	rcall	.+100    	; 0x252c <ldexp>
    24c8:	0f 90       	pop	r0
    24ca:	07 fe       	sbrs	r0, 7
    24cc:	26 c0       	rjmp	.+76     	; 0x251a <inverse>
    24ce:	08 95       	ret

000024d0 <__fp_powser>:
    24d0:	df 93       	push	r29
    24d2:	cf 93       	push	r28
    24d4:	1f 93       	push	r17
    24d6:	0f 93       	push	r16
    24d8:	ff 92       	push	r15
    24da:	ef 92       	push	r14
    24dc:	df 92       	push	r13
    24de:	7b 01       	movw	r14, r22
    24e0:	8c 01       	movw	r16, r24
    24e2:	68 94       	set
    24e4:	05 c0       	rjmp	.+10     	; 0x24f0 <__fp_powser+0x20>
    24e6:	da 2e       	mov	r13, r26
    24e8:	ef 01       	movw	r28, r30
    24ea:	1e df       	rcall	.-452    	; 0x2328 <__mulsf3x>
    24ec:	fe 01       	movw	r30, r28
    24ee:	e8 94       	clt
    24f0:	a5 91       	lpm	r26, Z+
    24f2:	25 91       	lpm	r18, Z+
    24f4:	35 91       	lpm	r19, Z+
    24f6:	45 91       	lpm	r20, Z+
    24f8:	55 91       	lpm	r21, Z+
    24fa:	ae f3       	brts	.-22     	; 0x24e6 <__fp_powser+0x16>
    24fc:	ef 01       	movw	r28, r30
    24fe:	8e dd       	rcall	.-1252   	; 0x201c <__addsf3x>
    2500:	fe 01       	movw	r30, r28
    2502:	97 01       	movw	r18, r14
    2504:	a8 01       	movw	r20, r16
    2506:	da 94       	dec	r13
    2508:	79 f7       	brne	.-34     	; 0x24e8 <__fp_powser+0x18>
    250a:	df 90       	pop	r13
    250c:	ef 90       	pop	r14
    250e:	ff 90       	pop	r15
    2510:	0f 91       	pop	r16
    2512:	1f 91       	pop	r17
    2514:	cf 91       	pop	r28
    2516:	df 91       	pop	r29
    2518:	08 95       	ret

0000251a <inverse>:
    251a:	9b 01       	movw	r18, r22
    251c:	ac 01       	movw	r20, r24
    251e:	60 e0       	ldi	r22, 0x00	; 0
    2520:	70 e0       	ldi	r23, 0x00	; 0
    2522:	80 e8       	ldi	r24, 0x80	; 128
    2524:	9f e3       	ldi	r25, 0x3F	; 63
    2526:	cd cd       	rjmp	.-1126   	; 0x20c2 <__divsf3>
    2528:	a2 ce       	rjmp	.-700    	; 0x226e <__fp_inf>
    252a:	ac c0       	rjmp	.+344    	; 0x2684 <__fp_mpack>

0000252c <ldexp>:
    252c:	d0 de       	rcall	.-608    	; 0x22ce <__fp_splitA>
    252e:	e8 f3       	brcs	.-6      	; 0x252a <inverse+0x10>
    2530:	99 23       	and	r25, r25
    2532:	d9 f3       	breq	.-10     	; 0x252a <inverse+0x10>
    2534:	94 0f       	add	r25, r20
    2536:	51 1d       	adc	r21, r1
    2538:	bb f3       	brvs	.-18     	; 0x2528 <inverse+0xe>
    253a:	91 50       	subi	r25, 0x01	; 1
    253c:	50 40       	sbci	r21, 0x00	; 0
    253e:	94 f0       	brlt	.+36     	; 0x2564 <ldexp+0x38>
    2540:	59 f0       	breq	.+22     	; 0x2558 <ldexp+0x2c>
    2542:	88 23       	and	r24, r24
    2544:	32 f0       	brmi	.+12     	; 0x2552 <ldexp+0x26>
    2546:	66 0f       	add	r22, r22
    2548:	77 1f       	adc	r23, r23
    254a:	88 1f       	adc	r24, r24
    254c:	91 50       	subi	r25, 0x01	; 1
    254e:	50 40       	sbci	r21, 0x00	; 0
    2550:	c1 f7       	brne	.-16     	; 0x2542 <ldexp+0x16>
    2552:	9e 3f       	cpi	r25, 0xFE	; 254
    2554:	51 05       	cpc	r21, r1
    2556:	44 f7       	brge	.-48     	; 0x2528 <inverse+0xe>
    2558:	88 0f       	add	r24, r24
    255a:	91 1d       	adc	r25, r1
    255c:	96 95       	lsr	r25
    255e:	87 95       	ror	r24
    2560:	97 f9       	bld	r25, 7
    2562:	08 95       	ret
    2564:	5f 3f       	cpi	r21, 0xFF	; 255
    2566:	ac f0       	brlt	.+42     	; 0x2592 <ldexp+0x66>
    2568:	98 3e       	cpi	r25, 0xE8	; 232
    256a:	9c f0       	brlt	.+38     	; 0x2592 <ldexp+0x66>
    256c:	bb 27       	eor	r27, r27
    256e:	86 95       	lsr	r24
    2570:	77 95       	ror	r23
    2572:	67 95       	ror	r22
    2574:	b7 95       	ror	r27
    2576:	08 f4       	brcc	.+2      	; 0x257a <ldexp+0x4e>
    2578:	b1 60       	ori	r27, 0x01	; 1
    257a:	93 95       	inc	r25
    257c:	c1 f7       	brne	.-16     	; 0x256e <ldexp+0x42>
    257e:	bb 0f       	add	r27, r27
    2580:	58 f7       	brcc	.-42     	; 0x2558 <ldexp+0x2c>
    2582:	11 f4       	brne	.+4      	; 0x2588 <ldexp+0x5c>
    2584:	60 ff       	sbrs	r22, 0
    2586:	e8 cf       	rjmp	.-48     	; 0x2558 <ldexp+0x2c>
    2588:	6f 5f       	subi	r22, 0xFF	; 255
    258a:	7f 4f       	sbci	r23, 0xFF	; 255
    258c:	8f 4f       	sbci	r24, 0xFF	; 255
    258e:	9f 4f       	sbci	r25, 0xFF	; 255
    2590:	e3 cf       	rjmp	.-58     	; 0x2558 <ldexp+0x2c>
    2592:	b8 ce       	rjmp	.-656    	; 0x2304 <__fp_szero>
    2594:	0e f0       	brts	.+2      	; 0x2598 <ldexp+0x6c>
    2596:	76 c0       	rjmp	.+236    	; 0x2684 <__fp_mpack>
    2598:	70 ce       	rjmp	.-800    	; 0x227a <__fp_nan>
    259a:	68 94       	set
    259c:	68 ce       	rjmp	.-816    	; 0x226e <__fp_inf>

0000259e <log>:
    259e:	97 de       	rcall	.-722    	; 0x22ce <__fp_splitA>
    25a0:	c8 f3       	brcs	.-14     	; 0x2594 <ldexp+0x68>
    25a2:	99 23       	and	r25, r25
    25a4:	d1 f3       	breq	.-12     	; 0x259a <ldexp+0x6e>
    25a6:	c6 f3       	brts	.-16     	; 0x2598 <ldexp+0x6c>
    25a8:	df 93       	push	r29
    25aa:	cf 93       	push	r28
    25ac:	1f 93       	push	r17
    25ae:	0f 93       	push	r16
    25b0:	ff 92       	push	r15
    25b2:	c9 2f       	mov	r28, r25
    25b4:	dd 27       	eor	r29, r29
    25b6:	88 23       	and	r24, r24
    25b8:	2a f0       	brmi	.+10     	; 0x25c4 <log+0x26>
    25ba:	21 97       	sbiw	r28, 0x01	; 1
    25bc:	66 0f       	add	r22, r22
    25be:	77 1f       	adc	r23, r23
    25c0:	88 1f       	adc	r24, r24
    25c2:	da f7       	brpl	.-10     	; 0x25ba <log+0x1c>
    25c4:	20 e0       	ldi	r18, 0x00	; 0
    25c6:	30 e0       	ldi	r19, 0x00	; 0
    25c8:	40 e8       	ldi	r20, 0x80	; 128
    25ca:	5f eb       	ldi	r21, 0xBF	; 191
    25cc:	9f e3       	ldi	r25, 0x3F	; 63
    25ce:	88 39       	cpi	r24, 0x98	; 152
    25d0:	20 f0       	brcs	.+8      	; 0x25da <log+0x3c>
    25d2:	80 3e       	cpi	r24, 0xE0	; 224
    25d4:	30 f0       	brcs	.+12     	; 0x25e2 <log+0x44>
    25d6:	21 96       	adiw	r28, 0x01	; 1
    25d8:	8f 77       	andi	r24, 0x7F	; 127
    25da:	0f dd       	rcall	.-1506   	; 0x1ffa <__addsf3>
    25dc:	e4 e2       	ldi	r30, 0x24	; 36
    25de:	f1 e0       	ldi	r31, 0x01	; 1
    25e0:	03 c0       	rjmp	.+6      	; 0x25e8 <log+0x4a>
    25e2:	0b dd       	rcall	.-1514   	; 0x1ffa <__addsf3>
    25e4:	e1 e5       	ldi	r30, 0x51	; 81
    25e6:	f1 e0       	ldi	r31, 0x01	; 1
    25e8:	73 df       	rcall	.-282    	; 0x24d0 <__fp_powser>
    25ea:	8b 01       	movw	r16, r22
    25ec:	be 01       	movw	r22, r28
    25ee:	ec 01       	movw	r28, r24
    25f0:	fb 2e       	mov	r15, r27
    25f2:	6f 57       	subi	r22, 0x7F	; 127
    25f4:	71 09       	sbc	r23, r1
    25f6:	75 95       	asr	r23
    25f8:	77 1f       	adc	r23, r23
    25fa:	88 0b       	sbc	r24, r24
    25fc:	99 0b       	sbc	r25, r25
    25fe:	fc dd       	rcall	.-1032   	; 0x21f8 <__floatsisf>
    2600:	28 e1       	ldi	r18, 0x18	; 24
    2602:	32 e7       	ldi	r19, 0x72	; 114
    2604:	41 e3       	ldi	r20, 0x31	; 49
    2606:	5f e3       	ldi	r21, 0x3F	; 63
    2608:	8f de       	rcall	.-738    	; 0x2328 <__mulsf3x>
    260a:	af 2d       	mov	r26, r15
    260c:	98 01       	movw	r18, r16
    260e:	ae 01       	movw	r20, r28
    2610:	ff 90       	pop	r15
    2612:	0f 91       	pop	r16
    2614:	1f 91       	pop	r17
    2616:	cf 91       	pop	r28
    2618:	df 91       	pop	r29
    261a:	00 dd       	rcall	.-1536   	; 0x201c <__addsf3x>
    261c:	3f ce       	rjmp	.-898    	; 0x229c <__fp_round>

0000261e <modf>:
    261e:	fa 01       	movw	r30, r20
    2620:	dc 01       	movw	r26, r24
    2622:	aa 0f       	add	r26, r26
    2624:	bb 1f       	adc	r27, r27
    2626:	9b 01       	movw	r18, r22
    2628:	ac 01       	movw	r20, r24
    262a:	bf 57       	subi	r27, 0x7F	; 127
    262c:	28 f4       	brcc	.+10     	; 0x2638 <modf+0x1a>
    262e:	22 27       	eor	r18, r18
    2630:	33 27       	eor	r19, r19
    2632:	44 27       	eor	r20, r20
    2634:	50 78       	andi	r21, 0x80	; 128
    2636:	1f c0       	rjmp	.+62     	; 0x2676 <modf+0x58>
    2638:	b7 51       	subi	r27, 0x17	; 23
    263a:	88 f4       	brcc	.+34     	; 0x265e <modf+0x40>
    263c:	ab 2f       	mov	r26, r27
    263e:	00 24       	eor	r0, r0
    2640:	46 95       	lsr	r20
    2642:	37 95       	ror	r19
    2644:	27 95       	ror	r18
    2646:	01 1c       	adc	r0, r1
    2648:	a3 95       	inc	r26
    264a:	d2 f3       	brmi	.-12     	; 0x2640 <modf+0x22>
    264c:	00 20       	and	r0, r0
    264e:	69 f0       	breq	.+26     	; 0x266a <modf+0x4c>
    2650:	22 0f       	add	r18, r18
    2652:	33 1f       	adc	r19, r19
    2654:	44 1f       	adc	r20, r20
    2656:	b3 95       	inc	r27
    2658:	da f3       	brmi	.-10     	; 0x2650 <modf+0x32>
    265a:	0d d0       	rcall	.+26     	; 0x2676 <modf+0x58>
    265c:	cd cc       	rjmp	.-1638   	; 0x1ff8 <__subsf3>
    265e:	61 30       	cpi	r22, 0x01	; 1
    2660:	71 05       	cpc	r23, r1
    2662:	a0 e8       	ldi	r26, 0x80	; 128
    2664:	8a 07       	cpc	r24, r26
    2666:	b9 46       	sbci	r27, 0x69	; 105
    2668:	30 f4       	brcc	.+12     	; 0x2676 <modf+0x58>
    266a:	9b 01       	movw	r18, r22
    266c:	ac 01       	movw	r20, r24
    266e:	66 27       	eor	r22, r22
    2670:	77 27       	eor	r23, r23
    2672:	88 27       	eor	r24, r24
    2674:	90 78       	andi	r25, 0x80	; 128
    2676:	30 96       	adiw	r30, 0x00	; 0
    2678:	21 f0       	breq	.+8      	; 0x2682 <modf+0x64>
    267a:	20 83       	st	Z, r18
    267c:	31 83       	std	Z+1, r19	; 0x01
    267e:	42 83       	std	Z+2, r20	; 0x02
    2680:	53 83       	std	Z+3, r21	; 0x03
    2682:	08 95       	ret

00002684 <__fp_mpack>:
    2684:	9f 3f       	cpi	r25, 0xFF	; 255
    2686:	31 f0       	breq	.+12     	; 0x2694 <__fp_mpack_finite+0xc>

00002688 <__fp_mpack_finite>:
    2688:	91 50       	subi	r25, 0x01	; 1
    268a:	20 f4       	brcc	.+8      	; 0x2694 <__fp_mpack_finite+0xc>
    268c:	87 95       	ror	r24
    268e:	77 95       	ror	r23
    2690:	67 95       	ror	r22
    2692:	b7 95       	ror	r27
    2694:	88 0f       	add	r24, r24
    2696:	91 1d       	adc	r25, r1
    2698:	96 95       	lsr	r25
    269a:	87 95       	ror	r24
    269c:	97 f9       	bld	r25, 7
    269e:	08 95       	ret

000026a0 <__tablejump2__>:
    26a0:	ee 0f       	add	r30, r30
    26a2:	ff 1f       	adc	r31, r31

000026a4 <__tablejump__>:
    26a4:	05 90       	lpm	r0, Z+
    26a6:	f4 91       	lpm	r31, Z
    26a8:	e0 2d       	mov	r30, r0
    26aa:	19 94       	eijmp

000026ac <__umulhisi3>:
    26ac:	a2 9f       	mul	r26, r18
    26ae:	b0 01       	movw	r22, r0
    26b0:	b3 9f       	mul	r27, r19
    26b2:	c0 01       	movw	r24, r0
    26b4:	a3 9f       	mul	r26, r19
    26b6:	70 0d       	add	r23, r0
    26b8:	81 1d       	adc	r24, r1
    26ba:	11 24       	eor	r1, r1
    26bc:	91 1d       	adc	r25, r1
    26be:	b2 9f       	mul	r27, r18
    26c0:	70 0d       	add	r23, r0
    26c2:	81 1d       	adc	r24, r1
    26c4:	11 24       	eor	r1, r1
    26c6:	91 1d       	adc	r25, r1
    26c8:	08 95       	ret

000026ca <_exit>:
    26ca:	f8 94       	cli

000026cc <__stop_program>:
    26cc:	ff cf       	rjmp	.-2      	; 0x26cc <__stop_program>
